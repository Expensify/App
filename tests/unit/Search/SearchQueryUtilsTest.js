"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
// we need "dirty" object key names in these tests
var Policy_1 = require("@libs/actions/Policy/Policy");
var CONST_1 = require("@src/CONST");
var SearchQueryUtils_1 = require("@src/libs/SearchQueryUtils");
var ONYXKEYS_1 = require("@src/ONYXKEYS");
var personalDetailsFakeData = {
    'johndoe@example.com': {
        accountID: 12345,
    },
    'janedoe@example.com': {
        accountID: 78901,
    },
};
jest.mock('@libs/PersonalDetailsUtils', function () {
    return {
        getPersonalDetailByEmail: function (email) {
            return personalDetailsFakeData[email];
        },
    };
});
// The default query is generated by default values from parser, which are defined in grammar.
// We don't want to test or mock the grammar and the parser, so we're simply defining this string directly here.
var defaultQuery = "type:expense status:all sortBy:date sortOrder:desc";
describe('SearchQueryUtils', function () {
    describe('getQueryWithUpdatedValues', function () {
        test('returns default query for empty value', function () {
            var userQuery = '';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual(defaultQuery);
        });
        test('returns query with updated amounts', function () {
            var userQuery = 'foo test amount:20000';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual("".concat(defaultQuery, " amount:2000000 foo test"));
        });
        test('returns query with user emails substituted', function () {
            var userQuery = 'from:johndoe@example.com hello';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual("".concat(defaultQuery, " from:12345 hello"));
        });
        test('returns query with user emails substituted and preserves user ids', function () {
            var userQuery = 'from:johndoe@example.com to:112233';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual("".concat(defaultQuery, " from:12345 to:112233"));
        });
        test('returns query with all of the fields correctly substituted', function () {
            var userQuery = 'from:9876,87654 to:janedoe@example.com hello amount:150 test';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual("".concat(defaultQuery, " from:9876,87654 to:78901 amount:15000 hello test"));
        });
        test('returns query with updated groupBy', function () {
            var userQuery = 'from:johndoe@example.com groupBy:reports';
            var result = (0, SearchQueryUtils_1.getQueryWithUpdatedValues)(userQuery);
            expect(result).toEqual("".concat(defaultQuery, " groupBy:reports from:12345"));
        });
    });
    describe('buildQueryStringFromFilterFormValues', function () {
        test('simple filter value', function () {
            var filterValues = {
                type: 'expense',
                status: 'all',
                policyID: '12345',
                lessThan: '100',
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense status:all policyID:12345 amount<100');
        });
        test('with Policy ID', function () {
            var filterValues = {
                policyID: '12345',
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc policyID:12345');
        });
        test('with keywords', function () {
            var filterValues = {
                type: 'expense',
                status: 'all',
                policyID: '67890',
                merchant: 'Amazon',
                description: 'Electronics',
                keyword: 'laptop',
                category: ['electronics', 'gadgets'],
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense status:all policyID:67890 merchant:Amazon description:Electronics laptop category:electronics,gadgets');
        });
        test('currencies and categories', function () {
            var filterValues = {
                type: 'expense',
                status: 'all',
                category: ['services', 'consulting'],
                currency: ['USD', 'EUR'],
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense status:all category:services,consulting currency:USD,EUR');
        });
        test('has empty category values', function () {
            var filterValues = {
                type: 'expense',
                status: 'all',
                category: ['equipment', 'consulting', 'none,Uncategorized'],
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense status:all category:equipment,consulting,none,Uncategorized');
        });
        test('empty filter values', function () {
            var filterValues = {};
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc');
        });
        test('array of from', function () {
            var filterValues = {
                type: 'expense',
                from: ['user1@gmail.com', 'user2@gmail.com'],
                to: ['user3@gmail.com'],
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense from:user1@gmail.com,user2@gmail.com to:user3@gmail.com');
        });
        test('complex filter values', function () {
            var filterValues = {
                type: 'expense',
                from: ['user1@gmail.com', 'user2@gmail.com'],
                to: ['user3@gmail.com'],
                dateAfter: '2025-03-01',
                dateBefore: '2025-03-10',
                lessThan: '1000',
                greaterThan: '1',
                category: ['finance', 'insurance'],
            };
            var result = (0, SearchQueryUtils_1.buildQueryStringFromFilterFormValues)(filterValues);
            expect(result).toEqual('sortBy:date sortOrder:desc type:expense from:user1@gmail.com,user2@gmail.com to:user3@gmail.com category:finance,insurance date<2025-03-10 date>2025-03-01 amount>1 amount<1000');
            expect(result).not.toMatch(CONST_1.default.VALIDATE_FOR_HTML_TAG_REGEX);
        });
    });
    describe('buildFilterFormValuesFromQuery', function () {
        test('category filter includes empty values', function () {
            var _a;
            var policyID = (0, Policy_1.generatePolicyID)();
            var queryString = 'sortBy:date sortOrder:desc type:expense status:all category:none,Uncategorized,Maintenance';
            var queryJSON = (0, SearchQueryUtils_1.buildSearchQueryJSON)(queryString);
            var policyCategories = (_a = {},
                _a["".concat(ONYXKEYS_1.default.COLLECTION.POLICY_CATEGORIES).concat(policyID)] = {
                    Maintenance: {
                        enabled: true,
                        name: 'Maintenance',
                    },
                    Travel: {
                        enabled: true,
                        name: 'Travel',
                    },
                    Meals: {
                        enabled: true,
                        name: 'Meals',
                    },
                },
                _a);
            var policyTags = {};
            var currencyList = {};
            var personalDetails = {};
            var cardList = {};
            var reports = {};
            var taxRates = {};
            if (!queryJSON) {
                throw new Error('Failed to parse query string');
            }
            var result = (0, SearchQueryUtils_1.buildFilterFormValuesFromQuery)(queryJSON, policyCategories, policyTags, currencyList, personalDetails, cardList, reports, taxRates);
            expect(result).toEqual({
                type: 'expense',
                status: 'all',
                category: ['Maintenance', 'none,Uncategorized'],
            });
        });
    });
    describe('shouldHighlight', function () {
        it('returns false if either input is empty', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('', 'test')).toBe(false);
            expect((0, SearchQueryUtils_1.shouldHighlight)('Some text', '')).toBe(false);
        });
        it('matches exact word at beginning', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'Take')).toBe(true);
        });
        it('matches exact word in middle', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute')).toBe(true);
        });
        it('matches phrase with leading space', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', ' 2-minute tour')).toBe(true);
        });
        it('matches with special characters', function () {
            // cspell:disable-next-line
            expect((0, SearchQueryUtils_1.shouldHighlight)('Explore the #%tự đặc biệt!', '#%tự')).toBe(true);
        });
        it('is case-insensitive', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'TOUR')).toBe(true);
        });
        it('does not match partial word in the middle', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'in')).toBe(false);
        });
        it('does not match incomplete trailing text', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute to')).toBe(false);
        });
        it('matches multi-word phrase exactly', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', '2-minute tour')).toBe(true);
        });
        it('does not match words out of order', function () {
            expect((0, SearchQueryUtils_1.shouldHighlight)('Take a 2-minute tour', 'tour 2-minute')).toBe(false);
        });
    });
});
