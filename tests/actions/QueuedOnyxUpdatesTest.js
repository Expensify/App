"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_native_onyx_1 = require("react-native-onyx");
var QueuedOnyxUpdates_1 = require("@libs/actions/QueuedOnyxUpdates");
var ONYXKEYS_1 = require("@src/ONYXKEYS");
var waitForBatchedUpdates_1 = require("../utils/waitForBatchedUpdates");
var queuedOnyxUpdates = [
    { key: ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE, value: true, onyxMethod: 'merge' },
    { key: ONYXKEYS_1.default.PREFERRED_THEME, value: 'system', onyxMethod: 'merge' },
    { key: ONYXKEYS_1.default.NVP_PREFERRED_LOCALE, value: 'en', onyxMethod: 'merge' },
    {
        key: ONYXKEYS_1.default.SESSION,
        value: {
            accountID: 18748326,
            authToken: 'testToken',
            email: 'abcd+2342424224@gmail.com',
            encryptedAuthToken: 'testEncryptedAuthToken',
            loading: false,
        },
        onyxMethod: 'merge',
    },
    { key: ONYXKEYS_1.default.IS_LOADING_APP, value: false, onyxMethod: 'merge' },
    {
        key: ONYXKEYS_1.default.CREDENTIALS,
        value: {
            autoGeneratedLogin: '',
            autoGeneratedPassword: '',
            login: 'abcd+2342424224@gmail.com',
        },
        onyxMethod: 'merge',
    },
    { key: ONYXKEYS_1.default.IS_SIDEBAR_LOADED, value: true, onyxMethod: 'merge' },
    { key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT, "2175919089355165"), value: { reportID: 'reportID' }, onyxMethod: 'merge' },
    {
        key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS, "2175919089355165"),
        value: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            '4135522899867010163': {
                reportActionID: '4135522899867010163',
            },
        },
        onyxMethod: 'merge',
    },
];
jest.mock('@src/CONFIG', function () { return ({
    IS_TEST_ENV: false,
}); });
function getOnyxUpdateValue(key) {
    var _a;
    return (_a = queuedOnyxUpdates.find(function (item) { return item.key === key; })) === null || _a === void 0 ? void 0 : _a.value;
}
function testOnyxKeyValue(key) {
    return __awaiter(this, void 0, void 0, function () {
        var expectedValue;
        return __generator(this, function (_a) {
            expectedValue = getOnyxUpdateValue(key);
            return [2 /*return*/, new Promise(function (resolve) {
                    var connection = react_native_onyx_1.default.connect({
                        key: key,
                        waitForCollectionCallback: false,
                        callback: function (value) {
                            react_native_onyx_1.default.disconnect(connection);
                            expect(value).toEqual(expectedValue);
                            resolve();
                        },
                    });
                })];
        });
    });
}
describe('actions/QueuedOnyxUpdates', function () {
    beforeAll(function () {
        react_native_onyx_1.default.init({
            keys: ONYXKEYS_1.default,
        });
    });
    beforeEach(function () {
        return react_native_onyx_1.default.clear().then(waitForBatchedUpdates_1.default);
    });
    describe('flushQueue', function () {
        it('should filter queued updates when currentAccountID is undefined', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, QueuedOnyxUpdates_1.queueOnyxUpdates)(queuedOnyxUpdates)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, react_native_onyx_1.default.multiSet((_a = {},
                                _a[ONYXKEYS_1.default.SESSION] = null,
                                _a))];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, (0, QueuedOnyxUpdates_1.flushQueue)()];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.PREFERRED_THEME)];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.NVP_PREFERRED_LOCALE)];
                    case 6:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.SESSION)];
                    case 7:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.IS_LOADING_APP)];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.CREDENTIALS)];
                    case 9:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.IS_SIDEBAR_LOADED)];
                    case 10:
                        _b.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var connection = react_native_onyx_1.default.connect({
                                    key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT, "2175919089355165"),
                                    waitForCollectionCallback: false,
                                    callback: function (report) {
                                        react_native_onyx_1.default.disconnect(connection);
                                        expect(report).toBeUndefined();
                                        resolve();
                                    },
                                });
                            })];
                    case 11:
                        _b.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var connection = react_native_onyx_1.default.connect({
                                    key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS, "2175919089355165"),
                                    waitForCollectionCallback: false,
                                    callback: function (report) {
                                        react_native_onyx_1.default.disconnect(connection);
                                        expect(report).toBeUndefined();
                                        resolve();
                                    },
                                });
                            })];
                    case 12:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not filter updates if currentAccountID is defined', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, QueuedOnyxUpdates_1.queueOnyxUpdates)(queuedOnyxUpdates)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, react_native_onyx_1.default.multiSet((_a = {},
                                _a[ONYXKEYS_1.default.SESSION] = {
                                    accountID: 1,
                                },
                                _a))];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, (0, QueuedOnyxUpdates_1.flushQueue)()];
                    case 3:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.NVP_TRY_FOCUS_MODE)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.PREFERRED_THEME)];
                    case 5:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.NVP_PREFERRED_LOCALE)];
                    case 6:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.SESSION)];
                    case 7:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.IS_LOADING_APP)];
                    case 8:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.CREDENTIALS)];
                    case 9:
                        _b.sent();
                        return [4 /*yield*/, testOnyxKeyValue(ONYXKEYS_1.default.IS_SIDEBAR_LOADED)];
                    case 10:
                        _b.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var connection = react_native_onyx_1.default.connect({
                                    key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT, "2175919089355165"),
                                    waitForCollectionCallback: false,
                                    callback: function (report) {
                                        react_native_onyx_1.default.disconnect(connection);
                                        expect(report).toEqual(getOnyxUpdateValue("".concat(ONYXKEYS_1.default.COLLECTION.REPORT, "2175919089355165")));
                                        resolve();
                                    },
                                });
                            })];
                    case 11:
                        _b.sent();
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var connection = react_native_onyx_1.default.connect({
                                    key: "".concat(ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS, "2175919089355165"),
                                    waitForCollectionCallback: false,
                                    callback: function (reportActions) {
                                        react_native_onyx_1.default.disconnect(connection);
                                        expect(reportActions).toEqual(getOnyxUpdateValue("".concat(ONYXKEYS_1.default.COLLECTION.REPORT_ACTIONS, "2175919089355165")));
                                        resolve();
                                    },
                                });
                            })];
                    case 12:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
