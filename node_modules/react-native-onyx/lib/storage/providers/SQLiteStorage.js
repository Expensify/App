/**
 * The AsyncStorage provider stores everything in a key/value store by
 * converting the value to a JSON string
 */

 import _ from 'underscore';
 import AsyncStorage from '@react-native-async-storage/async-storage';
 import { open } from 'react-native-quick-sqlite';

 const db = open('Expensify-new-db.sqlite');
 db.execute('CREATE TABLE IF NOT EXISTS magic_map (id INTEGER PRIMARY KEY, record_key TEXT NOT NULL PRIMARY KEY, value TEXT NOT NULL)');
 // Do We want to create an index here?

 const provider = {
     /**
      * Get the value of a given key or return `null` if it's not available in storage
      * @param {String} key
      * @return {Promise<*>}
      */
     getItem(key) {
         return db.executeAsync("SELECT record_key, value from magic_map where record_key=?;", [key]).then(({ rows }) => {
          const res = rows[0]._array[0];
          console.log('aaabbb res', res);
          return [res.record_key, res.value];
         });
     },
 
     /**
      * Get multiple key-value pairs for the give array of keys in a batch
      * @param {String[]} keys
      * @return {Promise<Array<[key, value]>>}
      */
     multiGet(keys) { 
      return db.executeAsync(`SELECT record_key, value from magic_map where record_key IN (${new Array(keys.length).fill('?').join(',')});`, [keys])
        .then(({ rows }) => {
        const res = rows[0]._array.map(row => [row.record_key, row.value]);
        console.log('aaabbb res', res);
        return res;
       });
     },
 
     /**
      * Sets the value for a given key. The only requirement is that the value should be serializable to JSON string
      * @param {String} key
      * @param {*} value
      * @return {Promise<void>}
      */
     setItem(key, value) {
        return db.executeAsync("REPLACE into magic_map (record_key, value) VALUES (?, ?);", [key, value]);
     },
 
     /**
      * Stores multiple key-value pairs in a batch
      * @param {Array<[key, value]>} pairs
      * @return {Promise<void>}
      */
     multiSet(pairs) { // maybe just generate array of ? 
        return db.executeBatchAsync([["REPLACE into magic_map (record_key, value) VALUES (?, ?);", pairs]]);
     },
 
     /**
      * Multiple merging of existing and new values in a batch
      * @param {Array<[key, value]>} pairs
      * @return {Promise<void>}
      */
     multiMerge(pairs) {
         return db.multiMerge('magic_map', 'record_key', 'value', pairs);
     },
 
     /**
      * Returns all keys available in storage
      * @returns {Promise<String[]>}
      */
     getAllKeys: () => {
      return db.executeAsync("SELECT record_key from magic_map;", [key]).then(({ rows }) => {
        const res = rows[0]._array;
        console.log('aaabbb res', res);
        return res;
       });
     },
 
     /**
      * Remove given key and it's value from storage
      * @param {String} key
      * @returns {Promise<void>}
      */
     removeItem: (key) => { return db.executeAsync("DELETE FROM magic_map where record_key=?;", [key])},
 
     /**
      * Clear absolutely everything from storage
      * @returns {Promise<void>}
      */
     clear: () => {
      return db.executeAsync("DROP TABLE magic_map;", [key]);
     },
 };
 
 export default provider;
 