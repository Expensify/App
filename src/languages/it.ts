import {CONST as COMMON_CONST} from 'expensify-common';
import startCase from 'lodash/startCase';
import CONST from '@src/CONST';
import type {Country} from '@src/CONST';
import type {
    AccountOwnerParams,
    ActionsAreCurrentlyRestricted,
    AddedOrDeletedPolicyReportFieldParams,
    AddedPolicyCustomUnitRateParams,
    AddEmployeeParams,
    AddressLineParams,
    AdminCanceledRequestParams,
    AlreadySignedInParams,
    ApprovalWorkflowErrorParams,
    ApprovedAmountParams,
    AssignCardParams,
    AssignedCardParams,
    AssigneeParams,
    AuthenticationErrorParams,
    AutoPayApprovedReportsLimitErrorParams,
    BadgeFreeTrialParams,
    BeginningOfChatHistoryAdminRoomPartOneParams,
    BeginningOfChatHistoryAnnounceRoomPartOneParams,
    BeginningOfChatHistoryDomainRoomPartOneParams,
    BillingBannerCardAuthenticationRequiredParams,
    BillingBannerCardExpiredParams,
    BillingBannerCardOnDisputeParams,
    BillingBannerDisputePendingParams,
    BillingBannerInsufficientFundsParams,
    BillingBannerSubtitleWithDateParams,
    CanceledRequestParams,
    CardEndingParams,
    CardInfoParams,
    CardNextPaymentParams,
    CategoryNameParams,
    ChangeFieldParams,
    ChangeOwnerDuplicateSubscriptionParams,
    ChangeOwnerHasFailedSettlementsParams,
    ChangeOwnerSubscriptionParams,
    ChangePolicyParams,
    ChangeTypeParams,
    CharacterLengthLimitParams,
    CharacterLimitParams,
    ChatWithAccountManagerParams,
    CompanyCardBankName,
    CompanyCardFeedNameParams,
    CompanyNameParams,
    ConfirmThatParams,
    ConnectionNameParams,
    ConnectionParams,
    CurrencyCodeParams,
    CustomersOrJobsLabelParams,
    CustomUnitRateParams,
    DateParams,
    DateShouldBeAfterParams,
    DateShouldBeBeforeParams,
    DefaultAmountParams,
    DefaultVendorDescriptionParams,
    DelegateRoleParams,
    DelegateSubmitParams,
    DelegatorParams,
    DeleteActionParams,
    DeleteConfirmationParams,
    DeleteTransactionParams,
    DemotedFromWorkspaceParams,
    DidSplitAmountMessageParams,
    EarlyDiscountSubtitleParams,
    EarlyDiscountTitleParams,
    EditActionParams,
    EditDestinationSubtitleParams,
    ElectronicFundsParams,
    EnterMagicCodeParams,
    ExportAgainModalDescriptionParams,
    ExportedToIntegrationParams,
    ExportIntegrationSelectedParams,
    FeatureNameParams,
    FileLimitParams,
    FiltersAmountBetweenParams,
    FlightLayoverParams,
    FormattedMaxLengthParams,
    ForwardedAmountParams,
    GoBackMessageParams,
    GoToRoomParams,
    ImportedTagsMessageParams,
    ImportedTypesParams,
    ImportFieldParams,
    ImportMembersSuccessfullDescriptionParams,
    ImportPerDiemRatesSuccessfullDescriptionParams,
    ImportTagsSuccessfullDescriptionParams,
    IncorrectZipFormatParams,
    InstantSummaryParams,
    IntacctMappingTitleParams,
    IntegrationExportParams,
    IntegrationSyncFailedParams,
    InvalidPropertyParams,
    InvalidValueParams,
    IssueVirtualCardParams,
    LastFourDigitsParams,
    LastSyncAccountingParams,
    LastSyncDateParams,
    LeftWorkspaceParams,
    LocalTimeParams,
    LoggedInAsParams,
    LogSizeParams,
    ManagerApprovedAmountParams,
    ManagerApprovedParams,
    MarkedReimbursedParams,
    MarkReimbursedFromIntegrationParams,
    MissingPropertyParams,
    MovedFromPersonalSpaceParams,
    NeedCategoryForExportToIntegrationParams,
    NoLongerHaveAccessParams,
    NotAllowedExtensionParams,
    NotYouParams,
    OOOEventSummaryFullDayParams,
    OOOEventSummaryPartialDayParams,
    OptionalParam,
    OurEmailProviderParams,
    OwnerOwesAmountParams,
    PaidElsewhereWithAmountParams,
    PaidWithExpensifyWithAmountParams,
    ParentNavigationSummaryParams,
    PayerOwesAmountParams,
    PayerOwesParams,
    PayerPaidAmountParams,
    PayerPaidParams,
    PayerSettledParams,
    PaySomeoneParams,
    ReconciliationWorksParams,
    RemovedFromApprovalWorkflowParams,
    RemovedTheRequestParams,
    RemoveMemberPromptParams,
    RemoveMembersWarningPrompt,
    RenamedRoomActionParams,
    ReportArchiveReasonsClosedParams,
    ReportArchiveReasonsInvoiceReceiverPolicyDeletedParams,
    ReportArchiveReasonsMergedParams,
    ReportArchiveReasonsRemovedFromPolicyParams,
    ReportPolicyNameParams,
    RequestAmountParams,
    RequestCountParams,
    RequestedAmountMessageParams,
    RequiredFieldParams,
    ResolutionConstraintsParams,
    RoleNamesParams,
    RoomNameReservedErrorParams,
    RoomRenamedToParams,
    SecondaryLoginParams,
    SetTheDistanceMerchantParams,
    SetTheRequestParams,
    SettledAfterAddedBankAccountParams,
    SettleExpensifyCardParams,
    SettlementDateParams,
    ShareParams,
    SignUpNewFaceCodeParams,
    SizeExceededParams,
    SplitAmountParams,
    SpreadCategoriesParams,
    SpreadFieldNameParams,
    SpreadSheetColumnParams,
    StatementTitleParams,
    StepCounterParams,
    StripePaidParams,
    SubmitsToParams,
    SubscriptionCommitmentParams,
    SubscriptionSettingsRenewsOnParams,
    SubscriptionSettingsSaveUpToParams,
    SubscriptionSizeParams,
    SyncStageNameConnectionsParams,
    TaskCreatedActionParams,
    TaxAmountParams,
    TermsParams,
    ThreadRequestReportNameParams,
    ThreadSentMoneyReportNameParams,
    ToValidateLoginParams,
    TransferParams,
    TrialStartedTitleParams,
    UnapprovedParams,
    UnapproveWithIntegrationWarningParams,
    UnshareParams,
    UntilTimeParams,
    UpdatedPolicyCategoryNameParams,
    UpdatedPolicyCategoryParams,
    UpdatedPolicyCurrencyParams,
    UpdatedPolicyDescriptionParams,
    UpdatedPolicyFieldWithNewAndOldValueParams,
    UpdatedPolicyFieldWithValueParam,
    UpdatedPolicyFrequencyParams,
    UpdatedPolicyPreventSelfApprovalParams,
    UpdatedPolicyReportFieldDefaultValueParams,
    UpdatedPolicyTagFieldParams,
    UpdatedPolicyTagNameParams,
    UpdatedPolicyTagParams,
    UpdatedTheDistanceMerchantParams,
    UpdatedTheRequestParams,
    UpdateRoleParams,
    UsePlusButtonParams,
    UserIsAlreadyMemberParams,
    UserSplitParams,
    ViolationsAutoReportedRejectedExpenseParams,
    ViolationsCashExpenseWithNoReceiptParams,
    ViolationsConversionSurchargeParams,
    ViolationsCustomRulesParams,
    ViolationsInvoiceMarkupParams,
    ViolationsMaxAgeParams,
    ViolationsMissingTagParams,
    ViolationsModifiedAmountParams,
    ViolationsOverCategoryLimitParams,
    ViolationsOverLimitParams,
    ViolationsPerDayLimitParams,
    ViolationsReceiptRequiredParams,
    ViolationsRterParams,
    ViolationsTagOutOfPolicyParams,
    ViolationsTaxOutOfPolicyParams,
    WaitingOnBankAccountParams,
    WalletProgramParams,
    WelcomeEnterMagicCodeParams,
    WelcomeToRoomParams,
    WeSentYouMagicSignInLinkParams,
    WorkspaceLockedPlanTypeParams,
    WorkspaceMemberList,
    WorkspaceOwnerWillNeedToAddOrUpdatePaymentCardParams,
    WorkspaceYouMayJoin,
    YourPlanPriceParams,
    ZipCodeExampleFormatParams,
} from './params';
import type {TranslationDeepObject} from './types';

type StateValue = {
    stateISO: string;
    stateName: string;
};
type States = Record<keyof typeof COMMON_CONST.STATES, StateValue>;
type AllCountries = Record<Country, string>;
/* eslint-disable max-len */
const translations = {
    common: {
        cancel: 'it Cancel',
        dismiss: 'it Dismiss',
        yes: 'it Yes',
        no: 'it No',
        ok: 'it OK',
        notNow: 'it Not now',
        learnMore: 'it Learn more.',
        buttonConfirm: 'it Got it',
        name: 'it Name',
        attachment: 'it Attachment',
        attachments: 'it Attachments',
        center: 'it Center',
        from: 'it From',
        to: 'it To',
        in: 'it In',
        optional: 'it Optional',
        new: 'it New',
        search: 'it Search',
        reports: 'it Reports',
        find: 'it Find',
        searchWithThreeDots: 'it Search...',
        next: 'it Next',
        previous: 'it Previous',
        goBack: 'it Go back',
        create: 'it Create',
        add: 'it Add',
        resend: 'it Resend',
        save: 'it Save',
        select: 'it Select',
        selectMultiple: 'it Select multiple',
        saveChanges: 'it Save changes',
        submit: 'it Submit',
        rotate: 'it Rotate',
        zoom: 'it Zoom',
        password: 'it Password',
        magicCode: 'it Magic code',
        twoFactorCode: 'it Two-factor code',
        workspaces: 'it Workspaces',
        inbox: 'it Inbox',
        group: 'it Group',
        profile: 'it Profile',
        referral: 'it Referral',
        payments: 'it Payments',
        approvals: 'it Approvals',
        wallet: 'it Wallet',
        preferences: 'it Preferences',
        view: 'it View',
        review: 'it Review',
        not: 'it Not',
        signIn: 'it Sign in',
        signInWithGoogle: 'it Sign in with Google',
        signInWithApple: 'it Sign in with Apple',
        signInWith: 'it Sign in with',
        continue: 'it Continue',
        firstName: 'it First name',
        lastName: 'it Last name',
        scanning: 'it Scanning',
        addCardTermsOfService: 'it Expensify Terms of Service',
        perPerson: 'it per person',
        phone: 'it Phone',
        phoneNumber: 'it Phone number',
        phoneNumberPlaceholder: 'it (xxx) xxx-xxxx',
        email: 'it Email',
        and: 'it and',
        or: 'it or',
        details: 'it Details',
        privacy: 'it Privacy',
        privacyPolicy: 'it Privacy Policy',
        hidden: 'it Hidden',
        visible: 'it Visible',
        delete: 'it Delete',
        archived: 'it archived',
        contacts: 'it Contacts',
        recents: 'it Recents',
        close: 'it Close',
        download: 'it Download',
        downloading: 'it Downloading',
        uploading: 'it Uploading',
        pin: 'it Pin',
        unPin: 'it Unpin',
        back: 'it Back',
        saveAndContinue: 'it Save & continue',
        settings: 'it Settings',
        termsOfService: 'it Terms of Service',
        members: 'it Members',
        invite: 'it Invite',
        here: 'it here',
        date: 'it Date',
        dob: 'it Date of birth',
        currentYear: 'it Current year',
        currentMonth: 'it Current month',
        ssnLast4: 'it Last 4 digits of SSN',
        ssnFull9: 'it Full 9 digits of SSN',
        addressLine: ({lineNumber}: AddressLineParams) => `it Address line ${lineNumber}`,
        personalAddress: 'it Personal address',
        companyAddress: 'it Company address',
        noPO: 'it No PO boxes or mail-drop addresses, please.',
        city: 'it City',
        state: 'it State',
        streetAddress: 'it Street address',
        stateOrProvince: 'it State / Province',
        country: 'it Country',
        zip: 'it Zip code',
        zipPostCode: 'it Zip / Postcode',
        whatThis: "it What's this?",
        iAcceptThe: 'it I accept the ',
        remove: 'it Remove',
        admin: 'it Admin',
        owner: 'it Owner',
        dateFormat: 'it YYYY-MM-DD',
        send: 'it Send',
        na: 'it N/A',
        noResultsFound: 'it No results found',
        recentDestinations: 'it Recent destinations',
        timePrefix: "it It's",
        conjunctionFor: 'it for',
        todayAt: 'it Today at',
        tomorrowAt: 'it Tomorrow at',
        yesterdayAt: 'it Yesterday at',
        conjunctionAt: 'it at',
        conjunctionTo: 'it to',
        genericErrorMessage: 'it Oops... something went wrong and your request could not be completed. Please try again later.',
        percentage: 'it Percentage',
        error: {
            invalidAmount: 'it Invalid amount.',
            acceptTerms: 'it You must accept the Terms of Service to continue.',
            phoneNumber: `it Please enter a valid phone number, with the country code (e.g. ${CONST.EXAMPLE_PHONE_NUMBER})`,
            fieldRequired: 'it This field is required.',
            requestModified: 'it This request is being modified by another member.',
            characterLimit: ({limit}: CharacterLimitParams) => `it Exceeds the maximum length of ${limit} characters`,
            characterLimitExceedCounter: ({length, limit}: CharacterLengthLimitParams) => `it Character limit exceeded (${length}/${limit})`,
            dateInvalid: 'it Please select a valid date.',
            invalidDateShouldBeFuture: 'it Please choose today or a future date.',
            invalidTimeShouldBeFuture: 'it Please choose a time at least one minute ahead.',
            invalidCharacter: 'it Invalid character.',
            enterMerchant: 'it Enter a merchant name.',
            enterAmount: 'it Enter an amount.',
            enterDate: 'it Enter a date.',
            invalidTimeRange: 'it Please enter a time using the 12-hour clock format (e.g., 2:30 PM).',
            pleaseCompleteForm: 'it Please complete the form above to continue.',
            pleaseSelectOne: 'it Please select an option above.',
            invalidRateError: 'it Please enter a valid rate.',
            lowRateError: 'it Rate must be greater than 0.',
            email: 'it Please enter a valid email address.',
        },
        comma: 'it comma',
        semicolon: 'it semicolon',
        please: 'it Please',
        contactUs: 'it contact us',
        pleaseEnterEmailOrPhoneNumber: 'it Please enter an email or phone number',
        fixTheErrors: 'it fix the errors',
        inTheFormBeforeContinuing: 'it in the form before continuing',
        confirm: 'it Confirm',
        reset: 'it Reset',
        done: 'it Done',
        more: 'it More',
        debitCard: 'it Debit card',
        bankAccount: 'it Bank account',
        personalBankAccount: 'it Personal bank account',
        businessBankAccount: 'it Business bank account',
        join: 'it Join',
        leave: 'it Leave',
        decline: 'it Decline',
        transferBalance: 'it Transfer balance',
        cantFindAddress: "it Can't find your address? ",
        enterManually: 'it Enter it manually',
        message: 'it Message ',
        leaveThread: 'it Leave thread',
        you: 'it You',
        youAfterPreposition: 'it you',
        your: 'it your',
        conciergeHelp: 'it Please reach out to Concierge for help.',
        youAppearToBeOffline: 'it You appear to be offline.',
        thisFeatureRequiresInternet: 'it This feature requires an active internet connection.',
        attachementWillBeAvailableOnceBackOnline: 'it Attachment will become available once back online.',
        areYouSure: 'it Are you sure?',
        verify: 'it Verify',
        yesContinue: 'it Yes, continue',
        websiteExample: 'it e.g. https://www.expensify.com',
        zipCodeExampleFormat: ({zipSampleFormat}: ZipCodeExampleFormatParams) => (zipSampleFormat ? `it e.g. ${zipSampleFormat}` : 'it '),
        description: 'it Description',
        with: 'it with',
        shareCode: 'it Share code',
        share: 'it Share',
        per: 'it per',
        mi: 'it mile',
        km: 'it kilometer',
        copied: 'it Copied!',
        someone: 'it Someone',
        total: 'it Total',
        edit: 'it Edit',
        letsDoThis: `Let's do this!`,
        letsStart: `Let's start`,
        showMore: 'it Show more',
        merchant: 'it Merchant',
        category: 'it Category',
        billable: 'it Billable',
        nonBillable: 'it Non-billable',
        tag: 'it Tag',
        receipt: 'it Receipt',
        verified: 'it Verified',
        replace: 'it Replace',
        distance: 'it Distance',
        mile: 'it mile',
        miles: 'it miles',
        kilometer: 'it kilometer',
        kilometers: 'it kilometers',
        recent: 'it Recent',
        all: 'it All',
        am: 'it AM',
        pm: 'it PM',
        tbd: 'it TBD',
        selectCurrency: 'it Select a currency',
        card: 'it Card',
        whyDoWeAskForThis: 'it Why do we ask for this?',
        required: 'it Required',
        showing: 'it Showing',
        of: 'it of',
        default: 'it Default',
        update: 'it Update',
        member: 'it Member',
        auditor: 'it Auditor',
        role: 'it Role',
        currency: 'it Currency',
        rate: 'it Rate',
        emptyLHN: {
            title: 'it Woohoo! All caught up.',
            subtitleText1: 'it Find a chat using the',
            subtitleText2: 'it button above, or create something using the',
            subtitleText3: 'it button below.',
        },
        businessName: 'it Business name',
        clear: 'it Clear',
        type: 'it Type',
        action: 'it Action',
        expenses: 'it Expenses',
        tax: 'it Tax',
        shared: 'it Shared',
        drafts: 'it Drafts',
        finished: 'it Finished',
        upgrade: 'it Upgrade',
        downgradeWorkspace: 'it Downgrade workspace',
        companyID: 'it Company ID',
        userID: 'it User ID',
        disable: 'it Disable',
        export: 'it Export',
        initialValue: 'it Initial value',
        currentDate: 'it Current date',
        value: 'it Value',
        downloadFailedTitle: 'it Download failed',
        downloadFailedDescription: "it Your download couldn't be completed. Please try again later.",
        filterLogs: 'it Filter Logs',
        network: 'it Network',
        reportID: 'it Report ID',
        bankAccounts: 'it Bank accounts',
        chooseFile: 'it Choose file',
        dropTitle: 'it Let it go',
        dropMessage: 'it Drop your file here',
        ignore: 'it Ignore',
        enabled: 'it Enabled',
        disabled: 'it Disabled',
        import: 'it Import',
        offlinePrompt: "it You can't take this action right now.",
        outstanding: 'it Outstanding',
        chats: 'it Chats',
        unread: 'it Unread',
        sent: 'it Sent',
        links: 'it Links',
        days: 'it days',
        rename: 'it Rename',
        address: 'it Address',
        hourAbbreviation: 'it h',
        minuteAbbreviation: 'it m',
        skip: 'it Skip',
        chatWithAccountManager: ({accountManagerDisplayName}: ChatWithAccountManagerParams) => `it Need something specific? Chat with your account manager, ${accountManagerDisplayName}.`,
        chatNow: 'it Chat now',
        destination: 'it Destination',
        subrate: 'it Subrate',
        perDiem: 'it Per diem',
        validate: 'it Validate',
    },
    supportalNoAccess: {
        title: 'it Not so fast',
        description: 'it You are not authorized to take this action when support logged in.',
    },
    location: {
        useCurrent: 'it Use current location',
        notFound: 'it We were unable to find your location. Please try again or enter an address manually.',
        permissionDenied: "it It looks like you've denied access to your location.",
        please: 'it Please',
        allowPermission: 'it allow location access in settings',
        tryAgain: 'it and try again.',
    },
    anonymousReportFooter: {
        logoTagline: 'it Join the discussion.',
    },
    attachmentPicker: {
        cameraPermissionRequired: 'it Camera access',
        expensifyDoesntHaveAccessToCamera: "it Expensify can't take photos without access to your camera. Tap settings to update permissions.",
        attachmentError: 'it Attachment error',
        errorWhileSelectingAttachment: 'it An error occurred while selecting an attachment. Please try again.',
        errorWhileSelectingCorruptedAttachment: 'it An error occurred while selecting a corrupted attachment. Please try another file.',
        takePhoto: 'it Take photo',
        chooseFromGallery: 'it Choose from gallery',
        chooseDocument: 'it Choose file',
        attachmentTooLarge: 'it Attachment is too large',
        sizeExceeded: 'it Attachment size is larger than 24 MB limit',
        sizeExceededWithLimit: ({maxUploadSizeInMB}: SizeExceededParams) => `it Attachment size is larger than ${maxUploadSizeInMB} MB limit`,
        attachmentTooSmall: 'it Attachment is too small',
        sizeNotMet: 'it Attachment size must be greater than 240 bytes',
        wrongFileType: 'it Invalid file type',
        notAllowedExtension: 'it This file type is not allowed. Please try a different file type.',
        folderNotAllowedMessage: 'it Uploading a folder is not allowed. Please try a different file.',
        protectedPDFNotSupported: 'it Password-protected PDF is not supported',
        attachmentImageResized: 'it This image has been resized for previewing. Download for full resolution.',
        attachmentImageTooLarge: 'it This image is too large to preview before uploading.',
        tooManyFiles: ({fileLimit}: FileLimitParams) => `it You can only upload up to ${fileLimit} files at a time.`,
        sizeExceededWithValue: ({maxUploadSizeInMB}: SizeExceededParams) => `it Files exceeds ${maxUploadSizeInMB} MB. Please try again.`,
    },
    filePicker: {
        fileError: 'it File error',
        errorWhileSelectingFile: 'it An error occurred while selecting an file. Please try again.',
    },
    connectionComplete: {
        title: 'it Connection complete',
        supportingText: 'it You can close this window and head back to the Expensify app.',
    },
    avatarCropModal: {
        title: 'it Edit photo',
        description: 'it Drag, zoom, and rotate your image however you like.',
    },
    composer: {
        noExtensionFoundForMimeType: 'it No extension found for mime type',
        problemGettingImageYouPasted: 'it There was a problem getting the image you pasted',
        commentExceededMaxLength: ({formattedMaxLength}: FormattedMaxLengthParams) => `it The maximum comment length is ${formattedMaxLength} characters.`,
        taskTitleExceededMaxLength: ({formattedMaxLength}: FormattedMaxLengthParams) => `it The maximum task title length is ${formattedMaxLength} characters.`,
    },
    baseUpdateAppModal: {
        updateApp: 'it Update app',
        updatePrompt: 'it A new version of this app is available.\nUpdate now or restart the app later to download the latest changes.',
    },
    deeplinkWrapper: {
        launching: 'it Launching Expensify',
        expired: 'it Your session has expired.',
        signIn: 'it Please sign in again.',
        redirectedToDesktopApp: "it We've redirected you to the desktop app.",
        youCanAlso: 'it You can also',
        openLinkInBrowser: 'it open this link in your browser',
        loggedInAs: ({email}: LoggedInAsParams) => `it You're logged in as ${email}. Click "Open link" in the prompt to log into the desktop app with this account.`,
        doNotSeePrompt: "it Can't see the prompt?",
        tryAgain: 'it Try again',
        or: 'it , or',
        continueInWeb: 'it continue to the web app',
    },
    validateCodeModal: {
        successfulSignInTitle: "it Abracadabra,\nyou're signed in!",
        successfulSignInDescription: 'it Head back to your original tab to continue.',
        title: "it Here's your magic code",
        description: 'it Please enter the code from the device\nwhere it was originally requested',
        doNotShare: 'it Do not share your code with anyone.\nExpensify will never ask you for it!',
        or: 'it , or',
        signInHere: 'it just sign in here',
        expiredCodeTitle: 'it Magic code expired',
        expiredCodeDescription: 'it Go back to the original device and request a new code',
        successfulNewCodeRequest: 'it Code requested. Please check your device.',
        tfaRequiredTitle: 'it Two-factor authentication\nrequired',
        tfaRequiredDescription: "it Please enter the two-factor authentication code\nwhere you're trying to sign in.",
        requestOneHere: 'it request one here.',
    },
    moneyRequestConfirmationList: {
        paidBy: 'it Paid by',
        whatsItFor: "it What's it for?",
    },
    selectionList: {
        nameEmailOrPhoneNumber: 'it Name, email, or phone number',
        findMember: 'it Find a member',
    },
    emptyList: {
        [CONST.IOU.TYPE.SUBMIT]: {
            title: 'it Submit an expense',
            subtitleText1: 'it Submit to someone and ',
            subtitleText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            subtitleText3: 'it  when they become a customer.',
        },
        [CONST.IOU.TYPE.SPLIT]: {
            title: 'it Split an expense',
            subtitleText1: 'it Split with a friend and ',
            subtitleText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            subtitleText3: 'it  when they become a customer.',
        },
        [CONST.IOU.TYPE.PAY]: {
            title: 'it Pay someone',
            subtitleText1: 'it Pay anyone and ',
            subtitleText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            subtitleText3: 'it  when they become a customer.',
        },
    },
    videoChatButtonAndMenu: {
        tooltip: 'it Book a call',
    },
    hello: 'it Hello',
    phoneCountryCode: 'it 1',
    welcomeText: {
        getStarted: 'it Get started below.',
        anotherLoginPageIsOpen: 'it Another login page is open.',
        anotherLoginPageIsOpenExplanation: "it You've opened the login page in a separate tab. Please log in from that tab.",
        welcome: 'it Welcome!',
        welcomeWithoutExclamation: 'it Welcome',
        phrase2: "it Money talks. And now that chat and payments are in one place, it's also easy.",
        phrase3: 'it Your payments get to you as fast as you can get your point across.',
        enterPassword: 'it Please enter your password',
        welcomeNewFace: ({login}: SignUpNewFaceCodeParams) => `it ${login}, it's always great to see a new face around here!`,
        welcomeEnterMagicCode: ({login}: WelcomeEnterMagicCodeParams) => `it Please enter the magic code sent to ${login}. It should arrive within a minute or two.`,
    },
    login: {
        hero: {
            header: 'it Travel and expense, at the speed of chat',
            body: 'it Welcome to the next generation of Expensify, where your travel and expenses move faster with the help of contextual, realtime chat.',
        },
    },
    thirdPartySignIn: {
        alreadySignedIn: ({email}: AlreadySignedInParams) => `it You're already signed in as ${email}.`,
        goBackMessage: ({provider}: GoBackMessageParams) => `it Don't want to sign in with ${provider}?`,
        continueWithMyCurrentSession: 'it Continue with my current session',
        redirectToDesktopMessage: "it We'll redirect you to the desktop app once you finish signing in.",
        signInAgreementMessage: 'it By logging in, you agree to the',
        termsOfService: 'it Terms of Service',
        privacy: 'it Privacy',
    },
    samlSignIn: {
        welcomeSAMLEnabled: 'it Continue logging in with single sign-on:',
        orContinueWithMagicCode: 'it You can also sign in with a magic code',
        useSingleSignOn: 'it Use single sign-on',
        useMagicCode: 'it Use magic code',
        launching: 'it Launching...',
        oneMoment: "it One moment while we redirect you to your company's single sign-on portal.",
    },
    reportActionCompose: {
        dropToUpload: 'it Drop to upload',
        sendAttachment: 'it Send attachment',
        addAttachment: 'it Add attachment',
        writeSomething: 'it Write something...',
        blockedFromConcierge: 'it Communication is barred',
        fileUploadFailed: 'it Upload failed. File is not supported.',
        localTime: ({user, time}: LocalTimeParams) => `it It's ${time} for ${user}`,
        edited: 'it (edited)',
        emoji: 'it Emoji',
        collapse: 'it Collapse',
        expand: 'it Expand',
    },
    reportActionContextMenu: {
        copyToClipboard: 'it Copy to clipboard',
        copied: 'it Copied!',
        copyLink: 'it Copy link',
        copyURLToClipboard: 'it Copy URL to clipboard',
        copyEmailToClipboard: 'it Copy email to clipboard',
        markAsUnread: 'it Mark as unread',
        markAsRead: 'it Mark as read',
        editAction: ({action}: EditActionParams) => `it Edit ${action?.actionName === CONST.REPORT.ACTIONS.TYPE.IOU ? 'expense' : 'comment'}`,
        deleteAction: ({action}: DeleteActionParams) => `it Delete ${action?.actionName === CONST.REPORT.ACTIONS.TYPE.IOU ? 'expense' : 'comment'}`,
        deleteConfirmation: ({action}: DeleteConfirmationParams) =>
            `it Are you sure you want to delete this ${action?.actionName === CONST.REPORT.ACTIONS.TYPE.IOU ? 'expense' : 'comment'}?`,
        onlyVisible: 'it Only visible to',
        replyInThread: 'it Reply in thread',
        joinThread: 'it Join thread',
        leaveThread: 'it Leave thread',
        copyOnyxData: 'it Copy Onyx data',
        flagAsOffensive: 'it Flag as offensive',
        menu: 'it Menu',
    },
    emojiReactions: {
        addReactionTooltip: 'it Add reaction',
        reactedWith: 'it reacted with',
    },
    reportActionsView: {
        beginningOfArchivedRoomPartOne: 'it You missed the party in ',
        beginningOfArchivedRoomPartTwo: "it , there's nothing to see here.",
        beginningOfChatHistoryDomainRoomPartOne: ({domainRoom}: BeginningOfChatHistoryDomainRoomPartOneParams) => `it This chat is with all Expensify members on the ${domainRoom} domain.`,
        beginningOfChatHistoryDomainRoomPartTwo: 'it  Use it to chat with colleagues, share tips, and ask questions.',
        beginningOfChatHistoryAdminRoomPartOne: ({workspaceName}: BeginningOfChatHistoryAdminRoomPartOneParams) => `it This chat is with ${workspaceName} admins.`,
        beginningOfChatHistoryAdminRoomPartTwo: 'it  Use it to chat about workspace setup and more.',
        beginningOfChatHistoryAnnounceRoomPartOne: ({workspaceName}: BeginningOfChatHistoryAnnounceRoomPartOneParams) => `it This chat is with everyone in ${workspaceName}.`,
        beginningOfChatHistoryAnnounceRoomPartTwo: ` Use it for the most important announcements.`,
        beginningOfChatHistoryUserRoomPartOne: 'it This chat room is for anything ',
        beginningOfChatHistoryUserRoomPartTwo: 'it  related.',
        beginningOfChatHistoryInvoiceRoomPartOne: `This chat is for invoices between `,
        beginningOfChatHistoryInvoiceRoomPartTwo: `. Use the + button to send an invoice.`,
        beginningOfChatHistory: 'it This chat is with ',
        beginningOfChatHistoryPolicyExpenseChatPartOne: 'it This is where ',
        beginningOfChatHistoryPolicyExpenseChatPartTwo: 'it  will submit expenses to ',
        beginningOfChatHistoryPolicyExpenseChatPartThree: 'it . Just use the + button.',
        beginningOfChatHistorySelfDM: 'it This is your personal space. Use it for notes, tasks, drafts, and reminders.',
        beginningOfChatHistorySystemDM: "it Welcome! Let's get you set up.",
        chatWithAccountManager: 'it Chat with your account manager here',
        sayHello: 'it Say hello!',
        yourSpace: 'it Your space',
        welcomeToRoom: ({roomName}: WelcomeToRoomParams) => `it Welcome to ${roomName}!`,
        usePlusButton: ({additionalText}: UsePlusButtonParams) => `it \nUse the + button to ${additionalText} an expense.`,
        askConcierge: 'it \nAsk questions and get 24/7 realtime support.',
        conciergeSupport: 'it 24/7 support',
        create: 'it create',
        iouTypes: {
            pay: 'it pay',
            split: 'it split',
            submit: 'it submit',
            track: 'it track',
            invoice: 'it invoice',
        },
    },
    adminOnlyCanPost: 'it Only admins can send messages in this room.',
    reportAction: {
        asCopilot: 'it as copilot for',
    },
    mentionSuggestions: {
        hereAlternateText: 'it Notify everyone in this conversation',
    },
    newMessages: 'it New messages',
    youHaveBeenBanned: "it Note: You've been banned from chatting in this channel.",
    reportTypingIndicator: {
        isTyping: 'it is typing...',
        areTyping: 'it are typing...',
        multipleMembers: 'it Multiple members',
    },
    reportArchiveReasons: {
        [CONST.REPORT.ARCHIVE_REASON.DEFAULT]: 'it This chat room has been archived.',
        [CONST.REPORT.ARCHIVE_REASON.ACCOUNT_CLOSED]: ({displayName}: ReportArchiveReasonsClosedParams) => `it This chat is no longer active because ${displayName} closed their account.`,
        [CONST.REPORT.ARCHIVE_REASON.ACCOUNT_MERGED]: ({displayName, oldDisplayName}: ReportArchiveReasonsMergedParams) =>
            `it This chat is no longer active because ${oldDisplayName} has merged their account with ${displayName}.`,
        [CONST.REPORT.ARCHIVE_REASON.REMOVED_FROM_POLICY]: ({displayName, policyName, shouldUseYou = false}: ReportArchiveReasonsRemovedFromPolicyParams) =>
            shouldUseYou
                ? `it This chat is no longer active because <strong>you</strong> are no longer a member of the ${policyName} workspace.`
                : `it This chat is no longer active because ${displayName} is no longer a member of the ${policyName} workspace.`,
        [CONST.REPORT.ARCHIVE_REASON.POLICY_DELETED]: ({policyName}: ReportArchiveReasonsInvoiceReceiverPolicyDeletedParams) =>
            `it This chat is no longer active because ${policyName} is no longer an active workspace.`,
        [CONST.REPORT.ARCHIVE_REASON.INVOICE_RECEIVER_POLICY_DELETED]: ({policyName}: ReportArchiveReasonsInvoiceReceiverPolicyDeletedParams) =>
            `it This chat is no longer active because ${policyName} is no longer an active workspace.`,
        [CONST.REPORT.ARCHIVE_REASON.BOOKING_END_DATE_HAS_PASSED]: 'it This booking is archived.',
    },
    writeCapabilityPage: {
        label: 'it Who can post',
        writeCapability: {
            all: 'it All members',
            admins: 'it Admins only',
        },
    },
    sidebarScreen: {
        buttonFind: 'it Find something...',
        buttonMySettings: 'it My settings',
        fabNewChat: 'it Start chat',
        fabNewChatExplained: 'it Start chat (Floating action)',
        chatPinned: 'it Chat pinned',
        draftedMessage: 'it Drafted message',
        listOfChatMessages: 'it List of chat messages',
        listOfChats: 'it List of chats',
        saveTheWorld: 'it Save the world',
        tooltip: 'it Get started here!',
        redirectToExpensifyClassicModal: {
            title: 'it Coming soon',
            description: "it We're fine-tuning a few more bits and pieces of New Expensify to accommodate your specific setup. In the meantime, head over to Expensify Classic.",
        },
    },
    allSettingsScreen: {
        subscription: 'it Subscription',
        domains: 'it Domains',
    },
    tabSelector: {
        chat: 'it Chat',
        room: 'it Room',
        distance: 'it Distance',
        manual: 'it Manual',
        scan: 'it Scan',
    },
    spreadsheet: {
        upload: 'it Upload a spreadsheet',
        dragAndDrop: 'it Drag and drop your spreadsheet here, or choose a file below. Supported formats: .csv, .txt, .xls, and .xlsx.',
        chooseSpreadsheet: 'it Select a spreadsheet file to import. Supported formats: .csv, .txt, .xls, and .xlsx.',
        fileContainsHeader: 'it File contains column headers',
        column: ({name}: SpreadSheetColumnParams) => `it Column ${name}`,
        fieldNotMapped: ({fieldName}: SpreadFieldNameParams) => `it Oops! A required field ("${fieldName}") hasn't been mapped. Please review and try again.`,
        singleFieldMultipleColumns: ({fieldName}: SpreadFieldNameParams) => `it Oops! You've mapped a single field ("${fieldName}") to multiple columns. Please review and try again.`,
        emptyMappedField: ({fieldName}: SpreadFieldNameParams) => `it Oops! The field ("${fieldName}") contains one or more empty values. Please review and try again.`,
        importSuccessfullTitle: 'it Import successful',
        importCategoriesSuccessfullDescription: ({categories}: SpreadCategoriesParams) => (categories > 1 ? `it ${categories} categories have been added.` : 'it 1 category has been added.'),
        importMembersSuccessfullDescription: ({members}: ImportMembersSuccessfullDescriptionParams) =>
            members > 1 ? `it ${members} members have been added.` : 'it 1 member has been added.',
        importTagsSuccessfullDescription: ({tags}: ImportTagsSuccessfullDescriptionParams) => (tags > 1 ? `it ${tags} tags have been added.` : 'it 1 tag has been added.'),
        importPerDiemRatesSuccessfullDescription: ({rates}: ImportPerDiemRatesSuccessfullDescriptionParams) =>
            rates > 1 ? `it ${rates} per diem rates have been added.` : 'it 1 per diem rate has been added.',
        importFailedTitle: 'it Import failed',
        importFailedDescription: 'it Please ensure all fields are filled out correctly and try again. If the problem persists, please reach out to Concierge.',
        importDescription: 'it Choose which fields to map from your spreadsheet by clicking the dropdown next to each imported column below.',
        sizeNotMet: 'it File size must be greater than 0 bytes',
        invalidFileMessage:
            'it The file you uploaded is either empty or contains invalid data. Please ensure that the file is correctly formatted and contains the necessary information before uploading it again.',
        importSpreadsheet: 'it Import spreadsheet',
        downloadCSV: 'it Download CSV',
    },
    receipt: {
        upload: 'it Upload receipt',
        dragReceiptBeforeEmail: 'it Drag a receipt onto this page, forward a receipt to ',
        dragReceiptAfterEmail: 'it  or choose a file to upload below.',
        chooseReceipt: 'it Choose a receipt to upload or forward a receipt to ',
        takePhoto: 'it Take a photo',
        cameraAccess: 'it Camera access is required to take pictures of receipts.',
        deniedCameraAccess: "it Camera access still hasn't been granted, please follow ",
        deniedCameraAccessInstructions: 'it these instructions',
        cameraErrorTitle: 'it Camera error',
        cameraErrorMessage: 'it An error occurred while taking a photo. Please try again.',
        locationAccessTitle: 'it Allow location access',
        locationAccessMessage: 'it Location access helps us keep your timezone and currency accurate wherever you go.',
        locationErrorTitle: 'it Allow location access',
        locationErrorMessage: 'it Location access helps us keep your timezone and currency accurate wherever you go.',
        allowLocationFromSetting: `Location access helps us keep your timezone and currency accurate wherever you go. Please allow location access from your device's permission settings.`,
        dropTitle: 'it Let it go',
        dropMessage: 'it Drop your file here',
        flash: 'it flash',
        shutter: 'it shutter',
        gallery: 'it gallery',
        deleteReceipt: 'it Delete receipt',
        deleteConfirmation: 'it Are you sure you want to delete this receipt?',
        addReceipt: 'it Add receipt',
    },
    quickAction: {
        scanReceipt: 'it Scan receipt',
        recordDistance: 'it Record distance',
        requestMoney: 'it Create expense',
        splitBill: 'it Split expense',
        splitScan: 'it Split receipt',
        splitDistance: 'it Split distance',
        paySomeone: ({name}: PaySomeoneParams = {}) => `it Pay ${name ?? 'someone'}`,
        assignTask: 'it Assign task',
        header: 'it Quick action',
        trackManual: 'it Create expense',
        trackScan: 'it Scan receipt',
        trackDistance: 'it Track distance',
        noLongerHaveReportAccess: 'it You no longer have access to your previous quick action destination. Pick a new one below.',
        updateDestination: 'it Update destination',
    },
    iou: {
        amount: 'it Amount',
        taxAmount: 'it Tax amount',
        taxRate: 'it Tax rate',
        approve: 'it Approve',
        approved: 'it Approved',
        cash: 'it Cash',
        card: 'it Card',
        original: 'it Original',
        split: 'it Split',
        splitExpense: 'it Split expense',
        paySomeone: ({name}: PaySomeoneParams = {}) => `it Pay ${name ?? 'someone'}`,
        expense: 'it Expense',
        categorize: 'it Categorize',
        share: 'it Share',
        participants: 'it Participants',
        createExpense: 'it Create expense',
        chooseRecipient: 'it Choose recipient',
        createExpenseWithAmount: ({amount}: {amount: string}) => `it Create ${amount} expense`,
        confirmDetails: 'it Confirm details',
        pay: 'it Pay',
        cancelPayment: 'it Cancel payment',
        cancelPaymentConfirmation: 'it Are you sure that you want to cancel this payment?',
        viewDetails: 'it View details',
        pending: 'it Pending',
        canceled: 'it Canceled',
        posted: 'it Posted',
        deleteReceipt: 'it Delete receipt',
        deletedTransaction: ({amount, merchant}: DeleteTransactionParams) => `it deleted an expense on this report,  ${merchant} - ${amount}`,
        pendingMatchWithCreditCard: 'it Receipt pending match with card transaction',
        pendingMatch: 'it Pending match',
        pendingMatchWithCreditCardDescription: 'it Receipt pending match with card transaction. Mark as cash to cancel.',
        markAsCash: 'it Mark as cash',
        routePending: 'it Route pending...',
        receiptScanning: () => ({
            one: 'it Receipt scanning...',
            other: 'it Receipts scanning...',
        }),
        receiptScanInProgress: 'it Receipt scan in progress',
        receiptScanInProgressDescription: 'it Receipt scan in progress. Check back later or enter the details now.',
        receiptIssuesFound: () => ({
            one: 'it Issue found',
            other: 'it Issues found',
        }),
        fieldPending: 'it Pending...',
        defaultRate: 'it Default rate',
        receiptMissingDetails: 'it Receipt missing details',
        missingAmount: 'it Missing amount',
        missingMerchant: 'it Missing merchant',
        receiptStatusTitle: 'it Scanning\u2026',
        receiptStatusText: "it Only you can see this receipt when it's scanning. Check back later or enter the details now.",
        receiptScanningFailed: 'it Receipt scanning failed. Please enter the details manually.',
        transactionPendingDescription: 'it Transaction pending. It may take a few days to post.',
        companyInfo: 'it Company info',
        companyInfoDescription: 'it We need a few more details before you can send your first invoice.',
        yourCompanyName: 'it Your company name',
        yourCompanyWebsite: 'it Your company website',
        yourCompanyWebsiteNote: "it If you don't have a website, you can provide your company's LinkedIn or social media profile instead.",
        invalidDomainError: 'it You have entered an invalid domain. To continue, please enter a valid domain.',
        publicDomainError: 'it You have entered a public domain. To continue, please enter a private domain.',
        expenseCount: ({scanningReceipts = 0, pendingReceipts = 0}: RequestCountParams) => {
            const statusText: string[] = [];
            if (scanningReceipts > 0) {
                statusText.push(`it ${scanningReceipts} scanning`);
            }
            if (pendingReceipts > 0) {
                statusText.push(`it ${pendingReceipts} pending`);
            }
            return {
                one: statusText.length > 0 ? `it 1 expense (${statusText.join(', ')})` : `1 expense`,
                other: (count: number) => (statusText.length > 0 ? `it ${count} expenses (${statusText.join(', ')})` : `it ${count} expenses`),
            };
        },
        deleteExpense: () => ({
            one: 'it Delete expense',
            other: 'it Delete expenses',
        }),
        deleteConfirmation: () => ({
            one: 'it Are you sure that you want to delete this expense?',
            other: 'it Are you sure that you want to delete these expenses?',
        }),
        settledExpensify: 'it Paid',
        done: 'it Done',
        settledElsewhere: 'it Paid elsewhere',
        individual: 'it Individual',
        business: 'it Business',
        settleExpensify: ({formattedAmount}: SettleExpensifyCardParams) => (formattedAmount ? `it Pay ${formattedAmount} with Expensify` : `Pay with Expensify`),
        settlePersonal: ({formattedAmount}: SettleExpensifyCardParams) => (formattedAmount ? `it Pay ${formattedAmount} as an individual` : `Pay as an individual`),
        settlePayment: ({formattedAmount}: SettleExpensifyCardParams) => `it Pay ${formattedAmount}`,
        settleBusiness: ({formattedAmount}: SettleExpensifyCardParams) => (formattedAmount ? `it Pay ${formattedAmount} as a business` : `Pay as a business`),
        payElsewhere: ({formattedAmount}: SettleExpensifyCardParams) => (formattedAmount ? `it Pay ${formattedAmount} elsewhere` : `Pay elsewhere`),
        nextStep: 'it Next steps',
        finished: 'it Finished',
        sendInvoice: ({amount}: RequestAmountParams) => `it Send ${amount} invoice`,
        submitAmount: ({amount}: RequestAmountParams) => `it submit ${amount}`,
        submittedAmount: ({formattedAmount, comment}: RequestedAmountMessageParams) => `submitted ${formattedAmount}${comment ? ` for ${comment}` : ''}`,
        automaticallySubmittedAmount: ({formattedAmount}: RequestedAmountMessageParams) =>
            `it automatically submitted ${formattedAmount} via <a href="${CONST.DELAYED_SUBMISSION_HELP_URL}">delayed submission</a>`,
        trackedAmount: ({formattedAmount, comment}: RequestedAmountMessageParams) => `tracking ${formattedAmount}${comment ? ` for ${comment}` : ''}`,
        splitAmount: ({amount}: SplitAmountParams) => `it split ${amount}`,
        didSplitAmount: ({formattedAmount, comment}: DidSplitAmountMessageParams) => `split ${formattedAmount}${comment ? ` for ${comment}` : ''}`,
        yourSplit: ({amount}: UserSplitParams) => `it Your split ${amount}`,
        payerOwesAmount: ({payer, amount, comment}: PayerOwesAmountParams) => `${payer} owes ${amount}${comment ? ` for ${comment}` : ''}`,
        payerOwes: ({payer}: PayerOwesParams) => `it ${payer} owes: `,
        payerPaidAmount: ({payer, amount}: PayerPaidAmountParams) => `it ${payer ? `${payer} ` : ''}paid ${amount}`,
        payerPaid: ({payer}: PayerPaidParams) => `it ${payer} paid: `,
        payerSpentAmount: ({payer, amount}: PayerPaidAmountParams) => `it ${payer} spent ${amount}`,
        payerSpent: ({payer}: PayerPaidParams) => `it ${payer} spent: `,
        managerApproved: ({manager}: ManagerApprovedParams) => `it ${manager} approved:`,
        managerApprovedAmount: ({manager, amount}: ManagerApprovedAmountParams) => `it ${manager} approved ${amount}`,
        payerSettled: ({amount}: PayerSettledParams) => `it paid ${amount}`,
        payerSettledWithMissingBankAccount: ({amount}: PayerSettledParams) => `it paid ${amount}. Add a bank account to receive your payment.`,
        automaticallyApprovedAmount: ({amount}: ApprovedAmountParams) =>
            `it automatically approved ${amount} via <a href="${CONST.CONFIGURE_REIMBURSEMENT_SETTINGS_HELP_URL}">workspace rules</a>`,
        approvedAmount: ({amount}: ApprovedAmountParams) => `it approved ${amount}`,
        unapprovedAmount: ({amount}: UnapprovedParams) => `it unapproved ${amount}`,
        automaticallyForwardedAmount: ({amount}: ForwardedAmountParams) =>
            `it automatically approved ${amount} via <a href="${CONST.CONFIGURE_REIMBURSEMENT_SETTINGS_HELP_URL}">workspace rules</a>`,
        forwardedAmount: ({amount}: ForwardedAmountParams) => `it approved ${amount}`,
        rejectedThisReport: 'it rejected this report',
        waitingOnBankAccount: ({submitterDisplayName}: WaitingOnBankAccountParams) => `it started settling up. Payment is on hold until ${submitterDisplayName} adds a bank account.`,
        adminCanceledRequest: ({manager, amount}: AdminCanceledRequestParams) => `it ${manager ? `${manager}: ` : ''}canceled the ${amount} payment`,
        canceledRequest: ({amount, submitterDisplayName}: CanceledRequestParams) =>
            `it canceled the ${amount} payment, because ${submitterDisplayName} did not enable their Expensify Wallet within 30 days`,
        settledAfterAddedBankAccount: ({submitterDisplayName, amount}: SettledAfterAddedBankAccountParams) =>
            `it ${submitterDisplayName} added a bank account. The ${amount} payment has been made.`,
        paidElsewhereWithAmount: ({payer, amount}: PaidElsewhereWithAmountParams) => `it ${payer ? `${payer} ` : ''}paid ${amount} elsewhere`,
        paidWithExpensifyWithAmount: ({payer, amount}: PaidWithExpensifyWithAmountParams) => `it ${payer ? `${payer} ` : ''}paid ${amount} with Expensify`,
        automaticallyPaidWithExpensify: ({payer, amount}: PaidWithExpensifyWithAmountParams) =>
            `it ${payer ? `${payer} ` : ''}automatically paid ${amount} with Expensify via <a href="${CONST.CONFIGURE_REIMBURSEMENT_SETTINGS_HELP_URL}">workspace rules</a>`,
        noReimbursableExpenses: 'it This report has an invalid amount',
        pendingConversionMessage: "it Total will update when you're back online",
        changedTheExpense: 'it changed the expense',
        setTheRequest: ({valueName, newValueToDisplay}: SetTheRequestParams) => `it the ${valueName} to ${newValueToDisplay}`,
        setTheDistanceMerchant: ({translatedChangedField, newMerchant, newAmountToDisplay}: SetTheDistanceMerchantParams) =>
            `it set the ${translatedChangedField} to ${newMerchant}, which set the amount to ${newAmountToDisplay}`,
        removedTheRequest: ({valueName, oldValueToDisplay}: RemovedTheRequestParams) => `it the ${valueName} (previously ${oldValueToDisplay})`,
        updatedTheRequest: ({valueName, newValueToDisplay, oldValueToDisplay}: UpdatedTheRequestParams) => `it the ${valueName} to ${newValueToDisplay} (previously ${oldValueToDisplay})`,
        updatedTheDistanceMerchant: ({translatedChangedField, newMerchant, oldMerchant, newAmountToDisplay, oldAmountToDisplay}: UpdatedTheDistanceMerchantParams) =>
            `it changed the ${translatedChangedField} to ${newMerchant} (previously ${oldMerchant}), which updated the amount to ${newAmountToDisplay} (previously ${oldAmountToDisplay})`,
        threadExpenseReportName: ({formattedAmount, comment}: ThreadRequestReportNameParams) => `it ${formattedAmount} ${comment ? `for ${comment}` : 'expense'}`,
        threadTrackReportName: ({formattedAmount, comment}: ThreadRequestReportNameParams) => `it Tracking ${formattedAmount} ${comment ? `for ${comment}` : ''}`,
        threadPaySomeoneReportName: ({formattedAmount, comment}: ThreadSentMoneyReportNameParams) => `it ${formattedAmount} sent${comment ? ` for ${comment}` : ''}`,
        movedFromPersonalSpace: ({workspaceName, reportName}: MovedFromPersonalSpaceParams) => `it moved expense from personal space to ${workspaceName ?? `chat with ${reportName}`}`,
        movedToPersonalSpace: 'it moved expense to personal space',
        tagSelection: 'it Select a tag to better organize your spend.',
        categorySelection: 'it Select a category to better organize your spend.',
        error: {
            invalidCategoryLength: 'it The category name exceeds 255 characters. Please shorten it or choose a different category.',
            invalidAmount: 'it Please enter a valid amount before continuing.',
            invalidIntegerAmount: 'it Please enter a whole dollar amount before continuing.',
            invalidTaxAmount: ({amount}: RequestAmountParams) => `it Maximum tax amount is ${amount}`,
            invalidSplit: 'it The sum of splits must equal the total amount.',
            invalidSplitParticipants: 'it Please enter an amount greater than zero for at least two participants.',
            invalidSplitYourself: 'it Please enter a non-zero amount for your split.',
            noParticipantSelected: 'it Please select a participant.',
            other: 'it Unexpected error. Please try again later.',
            genericCreateFailureMessage: 'it Unexpected error submitting this expense. Please try again later.',
            genericCreateInvoiceFailureMessage: 'it Unexpected error sending this invoice. Please try again later.',
            genericHoldExpenseFailureMessage: 'it Unexpected error holding this expense. Please try again later.',
            genericUnholdExpenseFailureMessage: 'it Unexpected error taking this expense off hold. Please try again later.',
            receiptDeleteFailureError: 'it Unexpected error deleting this receipt. Please try again later.',
            receiptFailureMessage: "it The receipt didn't upload. ",
            // eslint-disable-next-line rulesdir/use-periods-for-error-messages
            saveFileMessage: 'it Download the file ',
            loseFileMessage: 'it or dismiss this error and lose it.',
            genericDeleteFailureMessage: 'it Unexpected error deleting this expense. Please try again later.',
            genericEditFailureMessage: 'it Unexpected error editing this expense. Please try again later.',
            genericSmartscanFailureMessage: 'it Transaction is missing fields.',
            duplicateWaypointsErrorMessage: 'it Please remove duplicate waypoints.',
            atLeastTwoDifferentWaypoints: 'it Please enter at least two different addresses.',
            splitExpenseMultipleParticipantsErrorMessage: 'it An expense cannot be split between a workspace and other members. Please update your selection.',
            invalidMerchant: 'it Please enter a correct merchant.',
            atLeastOneAttendee: 'it At least one attendee must be selected',
            invalidQuantity: 'it Please enter a valid quantity.',
            quantityGreaterThanZero: 'it Quantity must be greater than zero.',
            invalidSubrateLength: 'it There must be at least one subrate.',
            invalidRate: 'it Rate not valid for this workspace. Please select an available rate from the workspace.',
        },
        waitingOnEnabledWallet: ({submitterDisplayName}: WaitingOnBankAccountParams) => `it started settling up. Payment is on hold until ${submitterDisplayName} enables their wallet.`,
        enableWallet: 'it Enable wallet',
        hold: 'it Hold',
        unhold: 'it Unhold',
        holdExpense: 'it Hold expense',
        unholdExpense: 'it Unhold expense',
        heldExpense: 'it held this expense',
        unheldExpense: 'it unheld this expense',
        explainHold: "it Explain why you're holding this expense.",
        reason: 'it Reason',
        holdReasonRequired: 'it A reason is required when holding.',
        expenseOnHold: 'it This expense was put on hold. Please review the comments for next steps.',
        expensesOnHold: 'it All expenses were put on hold. Please review the comments for next steps.',
        expenseDuplicate: 'it This expense has the same details as another one. Please review the duplicates to remove the hold.',
        someDuplicatesArePaid: 'it Some of these duplicates have been approved or paid already.',
        reviewDuplicates: 'it Review duplicates',
        keepAll: 'it Keep all',
        confirmApprove: 'it Confirm approval amount',
        confirmApprovalAmount: 'it Approve only compliant expenses, or approve the entire report.',
        confirmApprovalAllHoldAmount: () => ({
            one: 'it This expense is on hold. Do you want to approve anyway?',
            other: 'it These expenses are on hold. Do you want to approve anyway?',
        }),
        confirmPay: 'it Confirm payment amount',
        confirmPayAmount: "it Pay what's not on hold, or pay the entire report.",
        confirmPayAllHoldAmount: () => ({
            one: 'it This expense is on hold. Do you want to pay anyway?',
            other: 'it These expenses are on hold. Do you want to pay anyway?',
        }),
        payOnly: 'it Pay only',
        approveOnly: 'it Approve only',
        holdEducationalTitle: 'it This request is on',
        holdEducationalText: 'it hold',
        whatIsHoldExplain: 'it Hold is like hitting \u201Cpause\u201D on an expense to ask for more details before approval or payment.',
        holdIsLeftBehind: 'it Held expenses are left behind even if you approve an entire report.',
        unholdWhenReady: "it Unhold expenses when you're ready to approve or pay.",
        set: 'it set',
        changed: 'it changed',
        removed: 'it removed',
        transactionPending: 'it Transaction pending.',
        chooseARate: 'it Select a workspace reimbursement rate per mile or kilometer',
        unapprove: 'it Unapprove',
        unapproveReport: 'it Unapprove report',
        headsUp: 'it Heads up!',
        unapproveWithIntegrationWarning: ({accountingIntegration}: UnapproveWithIntegrationWarningParams) =>
            `it This report has already been exported to ${accountingIntegration}. Changes to this report in Expensify may lead to data discrepancies and Expensify Card reconciliation issues. Are you sure you want to unapprove this report?`,
        reimbursable: 'it reimbursable',
        nonReimbursable: 'it non-reimbursable',
        bookingPending: 'it This booking is pending',
        bookingPendingDescription: "it This booking is pending because it hasn't been paid yet.",
        bookingArchived: 'it This booking is archived',
        bookingArchivedDescription: 'it This booking is archived because the trip date has passed. Add an expense for the final amount if needed.',
        attendees: 'it Attendees',
        paymentComplete: 'it Payment complete',
        time: 'it Time',
        startDate: 'it Start date',
        endDate: 'it End date',
        startTime: 'it Start time',
        endTime: 'it End time',
        deleteSubrate: 'it Delete subrate',
        deleteSubrateConfirmation: 'it Are you sure you want to delete this subrate?',
        quantity: 'it Quantity',
        subrateSelection: 'it Select a subrate and enter a quantity.',
        qty: 'it Qty',
        firstDayText: () => ({
            one: `First day: 1 hour`,
            other: (count: number) => `it First day: ${count.toFixed(2)} hours`,
        }),
        lastDayText: () => ({
            one: `Last day: 1 hour`,
            other: (count: number) => `it Last day: ${count.toFixed(2)} hours`,
        }),
        tripLengthText: () => ({
            one: `Trip: 1 full day`,
            other: (count: number) => `it Trip: ${count} full days`,
        }),
        dates: 'it Dates',
        rates: 'it Rates',
        submitsTo: ({name}: SubmitsToParams) => `it Submits to ${name}`,
    },
    notificationPreferencesPage: {
        header: 'it Notification preferences',
        label: 'it Notify me about new messages',
        notificationPreferences: {
            always: 'it Immediately',
            daily: 'it Daily',
            mute: 'it Mute',
            hidden: 'it Hidden',
        },
    },
    loginField: {
        numberHasNotBeenValidated: "it The number hasn't been validated. Click the button to resend the validation link via text.",
        emailHasNotBeenValidated: "it The email hasn't been validated. Click the button to resend the validation link via text.",
    },
    avatarWithImagePicker: {
        uploadPhoto: 'it Upload photo',
        removePhoto: 'it Remove photo',
        editImage: 'it Edit photo',
        viewPhoto: 'it View photo',
        imageUploadFailed: 'it Image upload failed',
        deleteWorkspaceError: 'it Sorry, there was an unexpected problem deleting your workspace avatar',
        sizeExceeded: ({maxUploadSizeInMB}: SizeExceededParams) => `it The selected image exceeds the maximum upload size of ${maxUploadSizeInMB} MB.`,
        resolutionConstraints: ({minHeightInPx, minWidthInPx, maxHeightInPx, maxWidthInPx}: ResolutionConstraintsParams) =>
            `it Please upload an image larger than ${minHeightInPx}x${minWidthInPx} pixels and smaller than ${maxHeightInPx}x${maxWidthInPx} pixels.`,
        notAllowedExtension: ({allowedExtensions}: NotAllowedExtensionParams) => `it Profile picture must be one of the following types: ${allowedExtensions.join(', ')}.`,
    },
    profilePage: {
        profile: 'it Profile',
        preferredPronouns: 'it Preferred pronouns',
        selectYourPronouns: 'it Select your pronouns',
        selfSelectYourPronoun: 'it Self-select your pronoun',
        emailAddress: 'it Email address',
        setMyTimezoneAutomatically: 'it Set my timezone automatically',
        timezone: 'it Timezone',
        invalidFileMessage: 'it Invalid file. Please try a different image.',
        avatarUploadFailureMessage: 'it An error occurred uploading the avatar. Please try again.',
        online: 'it Online',
        offline: 'it Offline',
        syncing: 'it Syncing',
        profileAvatar: 'it Profile avatar',
        publicSection: {
            title: 'it Public',
            subtitle: 'it These details are displayed on your public profile. Anyone can see them.',
        },
        privateSection: {
            title: 'it Private',
            subtitle: "it These details are used for travel and payments. They're never shown on your public profile.",
        },
    },
    securityPage: {
        title: 'it Security options',
        subtitle: 'it Enable two-factor authentication to keep your account safe.',
    },
    shareCodePage: {
        title: 'it Your code',
        subtitle: 'it Invite members to Expensify by sharing your personal QR code or referral link.',
    },
    pronounsPage: {
        pronouns: 'it Pronouns',
        isShownOnProfile: 'it Your pronouns are shown on your profile.',
        placeholderText: 'it Search to see options',
    },
    contacts: {
        contactMethod: 'it Contact method',
        contactMethods: 'it Contact methods',
        featureRequiresValidate: 'it This feature requires you to validate your account.',
        validateAccount: 'it Validate your account',
        helpTextBeforeEmail: 'it Add more ways for people to find you, and forward receipts to ',
        helpTextAfterEmail: 'it  from multiple email addresses.',
        pleaseVerify: 'it Please verify this contact method',
        getInTouch: "it Whenever we need to get in touch with you, we'll use this contact method.",
        enterMagicCode: ({contactMethod}: EnterMagicCodeParams) => `it Please enter the magic code sent to ${contactMethod}. It should arrive within a minute or two.`,
        setAsDefault: 'it Set as default',
        yourDefaultContactMethod:
            "it This is your current default contact method. Before you can delete it, you'll need to choose another contact method and click \u201CSet as default\u201D.",
        removeContactMethod: 'it Remove contact method',
        removeAreYouSure: "it Are you sure you want to remove this contact method? This action can't be undone.",
        failedNewContact: 'it Failed to add this contact method.',
        genericFailureMessages: {
            requestContactMethodValidateCode: 'it Failed to send a new magic code. Please wait a bit and try again.',
            validateSecondaryLogin: 'it Incorrect or invalid magic code. Please try again or request a new code.',
            deleteContactMethod: 'it Failed to delete contact method. Please reach out to Concierge for help.',
            setDefaultContactMethod: 'it Failed to set a new default contact method. Please reach out to Concierge for help.',
            addContactMethod: 'it Failed to add this contact method. Please reach out to Concierge for help.',
            enteredMethodIsAlreadySubmited: 'it This contact method already exists.',
            passwordRequired: 'it password required.',
            contactMethodRequired: 'it Contact method is required.',
            invalidContactMethod: 'it Invalid contact method',
        },
        newContactMethod: 'it New contact method',
        goBackContactMethods: 'it Go back to contact methods',
    },
    pronouns: {
        coCos: 'it Co / Cos',
        eEyEmEir: 'it E / Ey / Em / Eir',
        faeFaer: 'it Fae / Faer',
        heHimHis: 'it He / Him / His',
        heHimHisTheyThemTheirs: 'it He / Him / His / They / Them / Theirs',
        sheHerHers: 'it She / Her / Hers',
        sheHerHersTheyThemTheirs: 'it She / Her / Hers / They / Them / Theirs',
        merMers: 'it Mer / Mers',
        neNirNirs: 'it Ne / Nir / Nirs',
        neeNerNers: 'it Nee / Ner / Ners',
        perPers: 'it Per / Pers',
        theyThemTheirs: 'it They / Them / Theirs',
        thonThons: 'it Thon / Thons',
        veVerVis: 'it Ve / Ver / Vis',
        viVir: 'it Vi / Vir',
        xeXemXyr: 'it Xe / Xem / Xyr',
        zeZieZirHir: 'it Ze / Zie / Zir / Hir',
        zeHirHirs: 'it Ze / Hir',
        callMeByMyName: 'it Call me by my name',
    },
    displayNamePage: {
        headerTitle: 'it Display name',
        isShownOnProfile: 'it Your display name is shown on your profile.',
    },
    timezonePage: {
        timezone: 'it Timezone',
        isShownOnProfile: 'it Your timezone is shown on your profile.',
        getLocationAutomatically: 'it Automatically determine your location',
    },
    updateRequiredView: {
        updateRequired: 'it Update required',
        pleaseInstall: 'it Please update to the latest version of New Expensify',
        pleaseInstallExpensifyClassic: 'it Please install the latest version of Expensify',
        toGetLatestChanges: 'it For mobile or desktop, download and install the latest version. For web, refresh your browser.',
        newAppNotAvailable: 'it The New Expensify app is no longer available.',
    },
    initialSettingsPage: {
        about: 'it About',
        aboutPage: {
            description: 'it The New Expensify App is built by a community of open-source developers from around the world. Help us build the future of Expensify.',
            appDownloadLinks: 'it App download links',
            viewKeyboardShortcuts: 'it View keyboard shortcuts',
            viewTheCode: 'it View the code',
            viewOpenJobs: 'it View open jobs',
            reportABug: 'it Report a bug',
            troubleshoot: 'it Troubleshoot',
        },
        appDownloadLinks: {
            android: {
                label: 'it Android',
            },
            ios: {
                label: 'it iOS',
            },
            desktop: {
                label: 'it macOS',
            },
        },
        troubleshoot: {
            clearCacheAndRestart: 'it Clear cache and restart',
            viewConsole: 'it View debug console',
            debugConsole: 'it Debug console',
            description: 'it Use the tools below to help troubleshoot the Expensify experience. If you encounter any issues, please',
            submitBug: 'it submit a bug',
            confirmResetDescription: 'it All unsent draft messages will be lost, but the rest of your data is safe.',
            resetAndRefresh: 'it Reset and refresh',
            clientSideLogging: 'it Client side logging',
            noLogsToShare: 'it No logs to share',
            useProfiling: 'it Use profiling',
            profileTrace: 'it Profile trace',
            releaseOptions: 'it Release options',
            testingPreferences: 'it Testing preferences',
            useStagingServer: 'it Use Staging Server',
            forceOffline: 'it Force offline',
            simulatePoorConnection: 'it Simulate poor internet connection',
            simulatFailingNetworkRequests: 'it Simulate failing network requests',
            authenticationStatus: 'it Authentication status',
            deviceCredentials: 'it Device credentials',
            invalidate: 'it Invalidate',
            destroy: 'it Destroy',
            maskExportOnyxStateData: 'it Mask fragile member data while exporting Onyx state',
            exportOnyxState: 'it Export Onyx state',
            importOnyxState: 'it Import Onyx state',
            testCrash: 'it Test crash',
            resetToOriginalState: 'it Reset to original state',
            usingImportedState: 'it You are using imported state. Press here to clear it.',
            debugMode: 'it Debug mode',
            invalidFile: 'it Invalid file',
            invalidFileDescription: 'it The file you are trying to import is not valid. Please try again.',
            invalidateWithDelay: 'it Invalidate with delay',
        },
        debugConsole: {
            saveLog: 'it Save log',
            shareLog: 'it Share log',
            enterCommand: 'it Enter command',
            execute: 'it Execute',
            noLogsAvailable: 'it No logs available',
            logSizeTooLarge: ({size}: LogSizeParams) => `it Log size exceeds the limit of ${size} MB. Please use "Save log" to download the log file instead.`,
            logs: 'it Logs',
            viewConsole: 'it View console',
        },
        security: 'it Security',
        signOut: 'it Sign out',
        restoreStashed: 'it Restore stashed login',
        signOutConfirmationText: "it You'll lose any offline changes if you sign out.",
        versionLetter: 'it v',
        readTheTermsAndPrivacy: {
            phrase1: 'it Read the',
            phrase2: 'it Terms of Service',
            phrase3: 'it and',
            phrase4: 'it Privacy',
        },
        help: 'it Help',
        accountSettings: 'it Account settings',
        account: 'it Account',
        general: 'it General',
    },
    closeAccountPage: {
        closeAccount: 'it Close account',
        reasonForLeavingPrompt: 'it We\u2019d hate to see you go! Would you kindly tell us why, so we can improve?',
        enterMessageHere: 'it Enter message here',
        closeAccountWarning: 'it Closing your account cannot be undone.',
        closeAccountPermanentlyDeleteData: 'it Are you sure you want to delete your account? This will permanently delete any outstanding expenses.',
        enterDefaultContactToConfirm: 'it Please enter your default contact method to confirm you wish to close your account. Your default contact method is:',
        enterDefaultContact: 'it Enter your default contact method',
        defaultContact: 'it Default contact method:',
        enterYourDefaultContactMethod: 'it Please enter your default contact method to close your account.',
    },
    passwordPage: {
        changePassword: 'it Change password',
        changingYourPasswordPrompt: 'it Changing your password will update your password for both your Expensify.com and New Expensify accounts.',
        currentPassword: 'it Current password',
        newPassword: 'it New password',
        newPasswordPrompt: 'it Your new password must be different from your old password and contain at least 8 characters, 1 capital letter, 1 lowercase letter, and 1 number.',
    },
    twoFactorAuth: {
        headerTitle: 'it Two-factor authentication',
        twoFactorAuthEnabled: 'it Two-factor authentication enabled',
        whatIsTwoFactorAuth:
            'it Two-factor authentication (2FA) helps keep your account safe. When logging in, you\u2019ll need to enter a code generated by your preferred authenticator app.',
        disableTwoFactorAuth: 'it Disable two-factor authentication',
        explainProcessToRemove: 'it In order to disable two-factor authentication (2FA), please enter a valid code from your authentication app.',
        disabled: 'it Two-factor authentication is now disabled',
        noAuthenticatorApp: 'it You\u2019ll no longer require an authenticator app to log into Expensify.',
        stepCodes: 'it Recovery codes',
        keepCodesSafe: 'it Keep these recovery codes safe!',
        codesLoseAccess:
            "it If you lose access to your authenticator app and don\u2019t have these codes, you'll lose access to your account. \n\nNote: Setting up two-factor authentication will log you out of all other active sessions.",
        errorStepCodes: 'it Please copy or download codes before continuing.',
        stepVerify: 'it Verify',
        scanCode: 'it Scan the QR code using your',
        authenticatorApp: 'it authenticator app',
        addKey: 'it Or add this secret key to your authenticator app:',
        enterCode: 'it Then enter the six-digit code generated from your authenticator app.',
        stepSuccess: 'it Finished',
        enabled: 'it Two-factor authentication enabled',
        congrats: 'it Congrats! Now you\u2019ve got that extra security.',
        copy: 'it Copy',
        disable: 'it Disable',
        enableTwoFactorAuth: 'it Enable two-factor authentication',
        pleaseEnableTwoFactorAuth: 'it Please enable two-factor authentication.',
        twoFactorAuthIsRequiredDescription: 'it For security purposes, Xero requires two-factor authentication to connect the integration.',
        twoFactorAuthIsRequiredForAdminsDescription: 'it Two-factor authentication is required for Xero workspace admins. Please enable two-factor authentication to continue.',
        twoFactorAuthCannotDisable: 'it Cannot disable 2FA',
        twoFactorAuthRequired: 'it Two-factor authentication (2FA) is required for your Xero connection and cannot be disabled.',
    },
    recoveryCodeForm: {
        error: {
            pleaseFillRecoveryCode: 'it Please enter your recovery code.',
            incorrectRecoveryCode: 'it Incorrect recovery code. Please try again.',
        },
        useRecoveryCode: 'it Use recovery code',
        recoveryCode: 'it Recovery code',
        use2fa: 'it Use two-factor authentication code',
    },
    twoFactorAuthForm: {
        error: {
            pleaseFillTwoFactorAuth: 'it Please enter your two-factor authentication code.',
            incorrect2fa: 'it Incorrect two-factor authentication code. Please try again.',
        },
    },
    passwordConfirmationScreen: {
        passwordUpdated: 'it Password updated!',
        allSet: 'it You\u2019re all set. Keep your new password safe.',
    },
    privateNotes: {
        title: 'it Private notes',
        personalNoteMessage: "it Keep notes about this chat here. You're the only person who can add, edit, or view these notes.",
        sharedNoteMessage: 'it Keep notes about this chat here. Expensify employees and other members on the team.expensify.com domain can view these notes.',
        composerLabel: 'it Notes',
        myNote: 'it My note',
        error: {
            genericFailureMessage: "it Private notes couldn't be saved.",
        },
    },
    billingCurrency: {
        error: {
            securityCode: 'it Please enter a valid security code.',
        },
        securityCode: 'it Security code',
        changeBillingCurrency: 'it Change billing currency',
        changePaymentCurrency: 'it Change payment currency',
        paymentCurrency: 'it Payment currency',
        note: 'it Note: Changing your payment currency can impact how much you\u2019ll pay for Expensify. Refer to our',
        noteLink: 'it pricing page',
        noteDetails: 'it for full details.',
    },
    addDebitCardPage: {
        addADebitCard: 'it Add a debit card',
        nameOnCard: 'it Name on card',
        debitCardNumber: 'it Debit card number',
        expiration: 'it Expiration date',
        expirationDate: 'it MMYY',
        cvv: 'it CVV',
        billingAddress: 'it Billing address',
        growlMessageOnSave: 'it Your debit card was successfully added',
        expensifyPassword: 'it Expensify password',
        error: {
            invalidName: 'it Name can only include letters.',
            addressZipCode: 'it Please enter a valid zip code.',
            debitCardNumber: 'it Please enter a valid debit card number.',
            expirationDate: 'it Please select a valid expiration date.',
            securityCode: 'it Please enter a valid security code.',
            addressStreet: "it Please enter a valid billing address that's not a PO box.",
            addressState: 'it Please select a state.',
            addressCity: 'it Please enter a city.',
            genericFailureMessage: 'it An error occurred while adding your card. Please try again.',
            password: 'it Please enter your Expensify password.',
        },
    },
    addPaymentCardPage: {
        addAPaymentCard: 'it Add payment card',
        nameOnCard: 'it Name on card',
        paymentCardNumber: 'it Card number',
        expiration: 'it Expiration date',
        expirationDate: 'it MMYY',
        cvv: 'it CVV',
        billingAddress: 'it Billing address',
        growlMessageOnSave: 'it Your payment card was successfully added',
        expensifyPassword: 'it Expensify password',
        error: {
            invalidName: 'it Name can only include letters.',
            addressZipCode: 'it Please enter a valid zip code.',
            paymentCardNumber: 'it Please enter a valid card number.',
            expirationDate: 'it Please select a valid expiration date.',
            securityCode: 'it Please enter a valid security code.',
            addressStreet: "it Please enter a valid billing address that's not a PO box.",
            addressState: 'it Please select a state.',
            addressCity: 'it Please enter a city.',
            genericFailureMessage: 'it An error occurred while adding your card. Please try again.',
            password: 'it Please enter your Expensify password.',
        },
    },
    walletPage: {
        balance: 'it Balance',
        paymentMethodsTitle: 'it Payment methods',
        setDefaultConfirmation: 'it Make default payment method',
        setDefaultSuccess: 'it Default payment method set!',
        deleteAccount: 'it Delete account',
        deleteConfirmation: 'it Are you sure you want to delete this account?',
        error: {
            notOwnerOfBankAccount: 'it An error occurred while setting this bank account as your default payment method.',
            invalidBankAccount: 'it This bank account is temporarily suspended.',
            notOwnerOfFund: 'it An error occurred while setting this card as your default payment method.',
            setDefaultFailure: 'it Something went wrong. Please chat with Concierge for further assistance.',
        },
        addBankAccountFailure: 'it An unexpected error occurred while trying to add your bank account. Please try again.',
        getPaidFaster: 'it Get paid faster',
        addPaymentMethod: 'it Add a payment method to send and receive payments directly in the app.',
        getPaidBackFaster: 'it Get paid back faster',
        secureAccessToYourMoney: 'it Secure access to your money',
        receiveMoney: 'it Receive money in your local currency',
        expensifyWallet: 'it Expensify Wallet (Beta)',
        sendAndReceiveMoney: 'it Send and receive money with friends. US bank accounts only.',
        enableWallet: 'it Enable wallet',
        addBankAccountToSendAndReceive: 'it Get paid back for expenses you submit to a workspace.',
        addBankAccount: 'it Add bank account',
        assignedCards: 'it Assigned cards',
        assignedCardsDescription: 'it These are cards assigned by a workspace admin to manage company spend.',
        expensifyCard: 'it Expensify Card',
        walletActivationPending: "it We're reviewing your information. Please check back in a few minutes!",
        walletActivationFailed: "it Unfortunately, your wallet can't be enabled at this time. Please chat with Concierge for further assistance.",
        addYourBankAccount: 'it Add your bank account',
        addBankAccountBody: "it Let's connect your bank account to Expensify so it\u2019s easier than ever to send and receive payments directly in the app.",
        chooseYourBankAccount: 'it Choose your bank account',
        chooseAccountBody: 'it Make sure that you select the right one.',
        confirmYourBankAccount: 'it Confirm your bank account',
    },
    cardPage: {
        expensifyCard: 'it Expensify Card',
        availableSpend: 'it Remaining limit',
        smartLimit: {
            name: 'it Smart limit',
            title: ({formattedLimit}: ViolationsOverLimitParams) =>
                `it You can spend up to ${formattedLimit} on this card, and the limit will reset as your submitted expenses are approved.`,
        },
        fixedLimit: {
            name: 'it Fixed limit',
            title: ({formattedLimit}: ViolationsOverLimitParams) => `it You can spend up to ${formattedLimit} on this card, and then it will deactivate.`,
        },
        monthlyLimit: {
            name: 'it Monthly limit',
            title: ({formattedLimit}: ViolationsOverLimitParams) =>
                `it You can spend up to ${formattedLimit} on this card per month. The limit will reset on the 1st day of each calendar month.`,
        },
        virtualCardNumber: 'it Virtual card number',
        physicalCardNumber: 'it Physical card number',
        getPhysicalCard: 'it Get physical card',
        reportFraud: 'it Report virtual card fraud',
        reviewTransaction: 'it Review transaction',
        suspiciousBannerTitle: 'it Suspicious transaction',
        suspiciousBannerDescription: 'it We noticed suspicious transactions on your card. Tap below to review.',
        cardLocked: "it Your card is temporarily locked while our team reviews your company's account.",
        cardDetails: {
            cardNumber: 'it Virtual card number',
            expiration: 'it Expiration',
            cvv: 'it CVV',
            address: 'it Address',
            revealDetails: 'it Reveal details',
            copyCardNumber: 'it Copy card number',
            updateAddress: 'it Update address',
        },
        cardDetailsLoadingFailure: 'it An error occurred while loading the card details. Please check your internet connection and try again.',
        validateCardTitle: "it Let's make sure it's you",
        enterMagicCode: ({contactMethod}: EnterMagicCodeParams) =>
            `it Please enter the magic code sent to ${contactMethod} to view your card details. It should arrive within a minute or two.`,
    },
    workflowsPage: {
        workflowTitle: 'it Spend',
        workflowDescription: 'it Configure a workflow from the moment spend occurs, including approval and payment.',
        delaySubmissionTitle: 'it Delay submissions',
        delaySubmissionDescription: 'it Choose a custom schedule for submitting expenses, or leave this off for realtime updates on spending.',
        submissionFrequency: 'it Submission frequency',
        submissionFrequencyDateOfMonth: 'it Date of month',
        addApprovalsTitle: 'it Add approvals',
        addApprovalButton: 'it Add approval workflow',
        addApprovalTip: 'it This default workflow applies to all members, unless a more specific workflow exists.',
        approver: 'it Approver',
        connectBankAccount: 'it Connect bank account',
        addApprovalsDescription: 'it Require additional approval before authorizing a payment.',
        makeOrTrackPaymentsTitle: 'it Make or track payments',
        makeOrTrackPaymentsDescription: 'it Add an authorized payer for payments made in Expensify, or simply track payments made elsewhere.',
        editor: {
            submissionFrequency: 'it Choose how long Expensify should wait before sharing error-free spend.',
        },
        frequencyDescription: 'it Choose how often you\u2019d like expenses to submit automatically, or make it manual',
        frequencies: {
            instant: 'it Instant',
            weekly: 'it Weekly',
            monthly: 'it Monthly',
            twiceAMonth: 'it Twice a month',
            byTrip: 'it By trip',
            manually: 'it Manually',
            daily: 'it Daily',
            lastDayOfMonth: 'it Last day of the month',
            lastBusinessDayOfMonth: 'it Last business day of the month',
            ordinals: {
                one: 'it st',
                two: 'it nd',
                few: 'it rd',
                other: 'it th',
                /* eslint-disable @typescript-eslint/naming-convention */
                'it 1': 'it First',
                'it 2': 'it Second',
                'it 3': 'it Third',
                'it 4': 'it Fourth',
                'it 5': 'it Fifth',
                'it 6': 'it Sixth',
                'it 7': 'it Seventh',
                'it 8': 'it Eighth',
                'it 9': 'it Ninth',
                'it 10': 'it Tenth',
                /* eslint-enable @typescript-eslint/naming-convention */
            },
        },
        approverInMultipleWorkflows: 'it This member already belongs to another approval workflow. Any updates here will reflect there too.',
        approverCircularReference: ({name1, name2}: ApprovalWorkflowErrorParams) =>
            `it <strong>${name1}</strong> already approves reports to <strong>${name2}</strong>. Please choose a different approver to avoid a circular workflow.`,
        emptyContent: {
            title: 'it No members to display',
            expensesFromSubtitle: 'it All workspace members already belong to an existing approval workflow.',
            approverSubtitle: 'it All approvers belong to an existing workflow.',
        },
    },
    workflowsDelayedSubmissionPage: {
        autoReportingErrorMessage: "it Delayed submission couldn't be changed. Please try again or contact support.",
        autoReportingFrequencyErrorMessage: "it Submission frequency couldn't be changed. Please try again or contact support.",
        monthlyOffsetErrorMessage: "it Monthly frequency couldn't be changed. Please try again or contact support.",
    },
    workflowsCreateApprovalsPage: {
        title: 'it Confirm',
        header: 'it Add more approvers and confirm.',
        additionalApprover: 'it Additional approver',
        submitButton: 'it Add workflow',
    },
    workflowsEditApprovalsPage: {
        title: 'it Edit approval workflow',
        deleteTitle: 'it Delete approval workflow',
        deletePrompt: 'it Are you sure you want to delete this approval workflow? All members will subsequently follow the default workflow.',
    },
    workflowsExpensesFromPage: {
        title: 'it Expenses from',
        header: 'it When the following members submit expenses:',
    },
    workflowsApproverPage: {
        genericErrorMessage: "it The approver couldn't be changed. Please try again or contact support.",
        header: 'it Send to this member for approval:',
    },
    workflowsPayerPage: {
        title: 'it Authorized payer',
        genericErrorMessage: 'it The authorized payer could not be changed. Please try again.',
        admins: 'it Admins',
        payer: 'it Payer',
        paymentAccount: 'it Payment account',
    },
    reportFraudPage: {
        title: 'it Report virtual card fraud',
        description:
            'it If your virtual card details have been stolen or compromised, we\u2019ll permanently deactivate your existing card and provide you with a new virtual card and number.',
        deactivateCard: 'it Deactivate card',
        reportVirtualCardFraud: 'it Report virtual card fraud',
    },
    reportFraudConfirmationPage: {
        title: 'it Card fraud reported',
        description: 'it We\u2019ve permanently deactivated your existing card. When you go back to view your card details, you\u2019ll have a new virtual card available.',
        buttonText: 'it Got it, thanks!',
    },
    activateCardPage: {
        activateCard: 'it Activate card',
        pleaseEnterLastFour: 'it Please enter the last four digits of your card.',
        activatePhysicalCard: 'it Activate physical card',
        error: {
            thatDidntMatch: "it That didn't match the last 4 digits on your card. Please try again.",
            throttled:
                "it You've incorrectly entered the last 4 digits of your Expensify Card too many times. If you're sure the numbers are correct, please reach out to Concierge to resolve. Otherwise, try again later.",
        },
    },
    getPhysicalCard: {
        header: 'it Get physical card',
        nameMessage: 'it Enter your first and last name, as this will be shown on your card.',
        legalName: 'it Legal name',
        legalFirstName: 'it Legal first name',
        legalLastName: 'it Legal last name',
        phoneMessage: 'it Enter your phone number.',
        phoneNumber: 'it Phone number',
        address: 'it Address',
        addressMessage: 'it Enter your shipping address.',
        streetAddress: 'it Street Address',
        city: 'it City',
        state: 'it State',
        zipPostcode: 'it Zip/Postcode',
        country: 'it Country',
        confirmMessage: 'it Please confirm your details below.',
        estimatedDeliveryMessage: 'it Your physical card will arrive in 2-3 business days.',
        next: 'it Next',
        getPhysicalCard: 'it Get physical card',
        shipCard: 'it Ship card',
    },
    transferAmountPage: {
        transfer: ({amount}: TransferParams) => `it Transfer${amount ? ` ${amount}` : ''}`,
        instant: 'it Instant (Debit card)',
        instantSummary: ({rate, minAmount}: InstantSummaryParams) => `it ${rate}% fee (${minAmount} minimum)`,
        ach: 'it 1-3 Business days (Bank account)',
        achSummary: 'it No fee',
        whichAccount: 'it Which account?',
        fee: 'it Fee',
        transferSuccess: 'it Transfer successful!',
        transferDetailBankAccount: 'it Your money should arrive in the next 1-3 business days.',
        transferDetailDebitCard: 'it Your money should arrive immediately.',
        failedTransfer: 'it Your balance isn\u2019t fully settled. Please transfer to a bank account.',
        notHereSubTitle: 'it Please transfer your balance from the wallet page',
        goToWallet: 'it Go to Wallet',
    },
    chooseTransferAccountPage: {
        chooseAccount: 'it Choose account',
    },
    paymentMethodList: {
        addPaymentMethod: 'it Add payment method',
        addNewDebitCard: 'it Add new debit card',
        addNewBankAccount: 'it Add new bank account',
        accountLastFour: 'it Ending in',
        cardLastFour: 'it Card ending in',
        addFirstPaymentMethod: 'it Add a payment method to send and receive payments directly in the app.',
        defaultPaymentMethod: 'it Default',
    },
    preferencesPage: {
        appSection: {
            title: 'it App preferences',
        },
        testSection: {
            title: 'it Test preferences',
            subtitle: 'it Settings to help debug and test the app on staging.',
        },
        receiveRelevantFeatureUpdatesAndExpensifyNews: 'it Receive relevant feature updates and Expensify news',
        muteAllSounds: 'it Mute all sounds from Expensify',
    },
    priorityModePage: {
        priorityMode: 'it Priority mode',
        explainerText: 'it Choose whether to #focus on unread and pinned chats only, or show everything with the most recent and pinned chats at the top.',
        priorityModes: {
            default: {
                label: 'it Most recent',
                description: 'it Show all chats sorted by most recent',
            },
            gsd: {
                label: 'it #focus',
                description: 'it Only show unread sorted alphabetically',
            },
        },
    },
    reportDetailsPage: {
        inWorkspace: ({policyName}: ReportPolicyNameParams) => `it in ${policyName}`,
    },
    reportDescriptionPage: {
        roomDescription: 'it Room description',
        roomDescriptionOptional: 'it Room description (optional)',
        explainerText: 'it Set a custom description for the room.',
    },
    groupChat: {
        lastMemberTitle: 'it Heads up!',
        lastMemberWarning: "it Since you're the last person here, leaving will make this chat inaccessible to all members. Are you sure you want to leave?",
        defaultReportName: ({displayName}: ReportArchiveReasonsClosedParams) => `it ${displayName}'s group chat`,
    },
    languagePage: {
        language: 'it Language',
        languages: {
            en: {
                label: 'it English',
            },
            es: {
                label: 'it Spanish',
            },
        },
    },
    themePage: {
        theme: 'it Theme',
        themes: {
            dark: {
                label: 'it Dark',
            },
            light: {
                label: 'it Light',
            },
            system: {
                label: 'it Use device settings',
            },
        },
        chooseThemeBelowOrSync: 'it Choose a theme below, or sync with your device settings.',
    },
    termsOfUse: {
        phrase1: 'it By logging in, you agree to the',
        phrase2: 'it Terms of Service',
        phrase3: 'it and',
        phrase4: 'it Privacy',
        phrase5: `it Money transmission is provided by ${CONST.WALLET.PROGRAM_ISSUERS.EXPENSIFY_PAYMENTS} (NMLS ID:2017010) pursuant to its`,
        phrase6: 'it licenses',
    },
    validateCodeForm: {
        magicCodeNotReceived: "it Didn't receive a magic code?",
        enterAuthenticatorCode: 'it Please enter your authenticator code',
        enterRecoveryCode: 'it Please enter your recovery code',
        requiredWhen2FAEnabled: 'it Required when 2FA is enabled',
        requestNewCode: 'it Request a new code in ',
        requestNewCodeAfterErrorOccurred: 'it Request a new code',
        error: {
            pleaseFillMagicCode: 'it Please enter your magic code.',
            incorrectMagicCode: 'it Incorrect magic code.',
            pleaseFillTwoFactorAuth: 'it Please enter your two-factor authentication code.',
        },
    },
    passwordForm: {
        pleaseFillOutAllFields: 'it Please fill out all fields',
        pleaseFillPassword: 'it Please enter your password',
        pleaseFillTwoFactorAuth: 'it Please enter your two-factor code',
        enterYourTwoFactorAuthenticationCodeToContinue: 'it Enter your two-factor authentication code to continue',
        forgot: 'it Forgot?',
        requiredWhen2FAEnabled: 'it Required when 2FA is enabled',
        error: {
            incorrectPassword: 'it Incorrect password. Please try again.',
            incorrectLoginOrPassword: 'it Incorrect login or password. Please try again.',
            incorrect2fa: 'it Incorrect two-factor authentication code. Please try again.',
            twoFactorAuthenticationEnabled: 'it You have 2FA enabled on this account. Please sign in using your email or phone number.',
            invalidLoginOrPassword: 'it Invalid login or password. Please try again or reset your password.',
            unableToResetPassword:
                'it We were unable to change your password. This is likely due to an expired password reset link in an old password reset email. We have emailed you a new link so you can try again. Check your Inbox and your Spam folder; it should arrive in just a few minutes.',
            noAccess: 'it You do not have access to this application. Please add your GitHub username for access.',
            accountLocked: 'it Your account has been locked after too many unsuccessful attempts. Please try again after 1 hour.',
            fallback: 'it Something went wrong. Please try again later.',
        },
    },
    loginForm: {
        phoneOrEmail: 'it Phone or email',
        error: {
            invalidFormatEmailLogin: 'it The email entered is invalid. Please fix the format and try again.',
        },
        cannotGetAccountDetails: "it Couldn't retrieve account details. Please try to sign in again.",
        loginForm: 'it Login form',
        notYou: ({user}: NotYouParams) => `it Not ${user}?`,
    },
    onboarding: {
        welcome: 'it Welcome!',
        welcomeSignOffTitle: "it It's great to meet you!",
        explanationModal: {
            title: 'it Welcome to Expensify',
            description: 'it One app to handle your business and personal spend at the speed of chat. Try it out and let us know what you think. Much more to come!',
            secondaryDescription: 'it To switch back to Expensify Classic, just tap your profile picture > Go to Expensify Classic.',
        },
        welcomeVideo: {
            title: 'it Welcome to Expensify',
            description: 'it One app to handle all your business and personal spend in a chat. Built for your business, your team, and your friends.',
        },
        getStarted: 'it Get started',
        whatsYourName: "it What's your name?",
        peopleYouMayKnow: 'it People you may know are already here! Verify your email to join them.',
        workspaceYouMayJoin: ({domain, email}: WorkspaceYouMayJoin) => `it Someone from ${domain} has already created a workspace. Please enter the magic code sent to ${email}.`,
        joinAWorkspace: 'it Join a workspace',
        listOfWorkspaces: "it Here's the list of workspaces you can join. Don't worry, you can always join them later if you prefer.",
        workspaceMemberList: ({employeeCount, policyOwner}: WorkspaceMemberList) => `it ${employeeCount} member${employeeCount > 1 ? 's' : ''} \u2022 ${policyOwner}`,
        whereYouWork: 'it Where do you work?',
        errorSelection: 'it Please make a selection to continue.',
        purpose: {
            title: 'it What do you want to do today?',
            errorContinue: 'it Please press continue to get set up.',
            errorBackButton: 'it Please finish the setup questions to start using the app.',
            [CONST.ONBOARDING_CHOICES.EMPLOYER]: 'it Get paid back by my employer',
            [CONST.ONBOARDING_CHOICES.MANAGE_TEAM]: "it Manage my team's expenses",
            [CONST.ONBOARDING_CHOICES.PERSONAL_SPEND]: 'it Track and budget expenses',
            [CONST.ONBOARDING_CHOICES.CHAT_SPLIT]: 'it Chat and split expenses with friends',
            [CONST.ONBOARDING_CHOICES.LOOKING_AROUND]: 'it Something else',
        },
        employees: {
            title: 'it How many employees do you have?',
            [CONST.ONBOARDING_COMPANY_SIZE.MICRO]: 'it 1-10 employees',
            [CONST.ONBOARDING_COMPANY_SIZE.SMALL]: 'it 11-50 employees',
            [CONST.ONBOARDING_COMPANY_SIZE.MEDIUM_SMALL]: 'it 51-100 employees',
            [CONST.ONBOARDING_COMPANY_SIZE.MEDIUM]: 'it 101-1,000 employees',
            [CONST.ONBOARDING_COMPANY_SIZE.LARGE]: 'it More than 1,000 employees',
        },
        accounting: {
            title: 'it Do you use any accounting software?',
            noneOfAbove: 'it None of the above',
        },
        error: {
            requiredFirstName: 'it Please input your first name to continue.',
        },
    },
    featureTraining: {
        doNotShowAgain: "it Don't show me this again",
    },
    personalDetails: {
        error: {
            containsReservedWord: 'it Name cannot contain the words Expensify or Concierge.',
            hasInvalidCharacter: 'it Name cannot contain a comma or semicolon.',
            requiredFirstName: 'it First name cannot be empty.',
        },
    },
    privatePersonalDetails: {
        enterLegalName: "it What's your legal name?",
        enterDateOfBirth: "it What's your date of birth?",
        enterAddress: "it What's your address?",
        enterPhoneNumber: "it What's your phone number?",
        personalDetails: 'it Personal details',
        privateDataMessage: 'it These details are used for travel and payments. They are never shown on your public profile.',
        legalName: 'it Legal name',
        legalFirstName: 'it Legal first name',
        legalLastName: 'it Legal last name',
        address: 'it Address',
        error: {
            dateShouldBeBefore: ({dateString}: DateShouldBeBeforeParams) => `it Date should be before ${dateString}.`,
            dateShouldBeAfter: ({dateString}: DateShouldBeAfterParams) => `it Date should be after ${dateString}.`,
            hasInvalidCharacter: 'it Name can only include Latin characters.',
            incorrectZipFormat: ({zipFormat}: IncorrectZipFormatParams = {}) => `it Incorrect zip code format.${zipFormat ? ` Acceptable format: ${zipFormat}` : ''}`,
            invalidPhoneNumber: `it Please ensure the phone number is valid (e.g. ${CONST.EXAMPLE_PHONE_NUMBER}).`,
        },
    },
    resendValidationForm: {
        linkHasBeenResent: 'it Link has been re-sent',
        weSentYouMagicSignInLink: ({login, loginType}: WeSentYouMagicSignInLinkParams) => `it I've sent a magic sign-in link to ${login}. Please check your ${loginType} to sign in.`,
        resendLink: 'it Resend link',
    },
    unlinkLoginForm: {
        toValidateLogin: ({primaryLogin, secondaryLogin}: ToValidateLoginParams) =>
            `it To validate ${secondaryLogin}, please resend the magic code from the Account Settings of ${primaryLogin}.`,
        noLongerHaveAccess: ({primaryLogin}: NoLongerHaveAccessParams) => `it If you no longer have access to ${primaryLogin}, please unlink your accounts.`,
        unlink: 'it Unlink',
        linkSent: 'it Link sent!',
        succesfullyUnlinkedLogin: 'it Secondary login successfully unlinked!',
    },
    emailDeliveryFailurePage: {
        ourEmailProvider: ({login}: OurEmailProviderParams) =>
            `it Our email provider has temporarily suspended emails to ${login} due to delivery issues. To unblock your login, please follow these steps:`,
        confirmThat: ({login}: ConfirmThatParams) => `it Confirm that ${login} is spelled correctly and is a real, deliverable email address. `,
        emailAliases: 'it Email aliases such as "expenses@domain.com" must have access to their own email inbox for it to be a valid Expensify login.',
        ensureYourEmailClient: 'it Ensure your email client allows expensify.com emails. ',
        youCanFindDirections: 'it You can find directions on how to complete this step ',
        helpConfigure: 'it  but you may need your IT department to help configure your email settings.',
        onceTheAbove: 'it Once the above steps are completed, please reach out to ',
        toUnblock: 'it  to unblock your login.',
    },
    smsDeliveryFailurePage: {
        smsDeliveryFailureMessage: ({login}: OurEmailProviderParams) =>
            `it We've been unable to deliver SMS messages to ${login}, so we've suspended it for 24 hours. Please try validating your number:`,
        validationFailed: 'it Validation failed because it hasn\u2019t been 24 hours since your last attempt.',
        validationSuccess: 'it Your number has been validated! Click below to send a new magic sign-in code.',
    },
    welcomeSignUpForm: {
        join: 'it Join',
    },
    detailsPage: {
        localTime: 'it Local time',
    },
    newChatPage: {
        startGroup: 'it Start group',
        addToGroup: 'it Add to group',
    },
    yearPickerPage: {
        year: 'it Year',
        selectYear: 'it Please select a year',
    },
    focusModeUpdateModal: {
        title: 'it Welcome to #focus mode!',
        prompt: "it Stay on top of things by only seeing unread chats or chats that need your attention. Don't worry, you can change this at any point in ",
        settings: 'it settings',
    },
    notFound: {
        chatYouLookingForCannotBeFound: 'it The chat you are looking for cannot be found.',
        getMeOutOfHere: 'it Get me out of here',
        iouReportNotFound: 'it The payment details you are looking for cannot be found.',
        notHere: "it Hmm... it's not here",
        pageNotFound: 'it Oops, this page cannot be found',
        noAccess: "it That chat doesn't exist or you don't have access to it. Try using search to find a chat.",
        goBackHome: 'it Go back to home page',
    },
    setPasswordPage: {
        enterPassword: 'it Enter a password',
        setPassword: 'it Set password',
        newPasswordPrompt: 'it Your password must have at least 8 characters, 1 capital letter, 1 lowercase letter, and 1 number.',
        passwordFormTitle: 'it Welcome back to the New Expensify! Please set your password.',
        passwordNotSet: 'it We were unable to set your new password. We have sent you a new password link to try again.',
        setPasswordLinkInvalid: 'it This set password link is invalid or has expired. A new one is waiting for you in your email inbox!',
        validateAccount: 'it Verify account',
    },
    statusPage: {
        status: 'it Status',
        statusExplanation: "it Add an emoji to give your colleagues and friends an easy way to know what's going on. You can optionally add a message too!",
        today: 'it Today',
        clearStatus: 'it Clear status',
        save: 'it Save',
        message: 'it Message',
        timePeriods: {
            never: 'it Never',
            thirtyMinutes: 'it 30 minutes',
            oneHour: 'it 1 hour',
            afterToday: 'it Today',
            afterWeek: 'it A week',
            custom: 'it Custom',
        },
        untilTomorrow: 'it Until tomorrow',
        untilTime: ({time}: UntilTimeParams) => `it Until ${time}`,
        date: 'it Date',
        time: 'it Time',
        clearAfter: 'it Clear after',
        whenClearStatus: 'it When should we clear your status?',
    },
    stepCounter: ({step, total, text}: StepCounterParams) => {
        let result = `it Step ${step}`;
        if (total) {
            result = `it ${result} of ${total}`;
        }
        if (text) {
            result = `it ${result}: ${text}`;
        }
        return result;
    },
    bankAccount: {
        bankInfo: 'it Bank info',
        confirmBankInfo: 'it Confirm bank info',
        manuallyAdd: 'it Manually add your bank account',
        letsDoubleCheck: "it Let's double check that everything looks right.",
        accountEnding: 'it Account ending in',
        thisBankAccount: 'it This bank account will be used for business payments on your workspace',
        accountNumber: 'it Account number',
        routingNumber: 'it Routing number',
        chooseAnAccountBelow: 'it Choose an account below',
        addBankAccount: 'it Add bank account',
        chooseAnAccount: 'it Choose an account',
        connectOnlineWithPlaid: 'it Log into your bank',
        connectManually: 'it Connect manually',
        desktopConnection: 'it Note: To connect with Chase, Wells Fargo, Capital One or Bank of America, please click here to complete this process in a browser.',
        yourDataIsSecure: 'it Your data is secure',
        toGetStarted: 'it Add a bank account to reimburse expenses, issue Expensify Cards, collect invoice payments, and pay bills all from one place.',
        plaidBodyCopy: 'it Give your employees an easier way to pay - and get paid back - for company expenses.',
        checkHelpLine: 'it Your routing number and account number can be found on a check for the account.',
        validateAccountError: {
            phrase1: 'it Hold up! We need you to validate your account first. To do so, ',
            phrase2: 'it sign back in with a magic code ',
            phrase3: 'it or ',
            phrase4: 'it verify your account here',
        },
        hasPhoneLoginError: 'it To add a verified bank account please ensure your primary login is a valid email and try again. You can add your phone number as a secondary login.',
        hasBeenThrottledError: 'it An error occurred while adding your bank account. Please wait a few minutes and try again.',
        hasCurrencyError: 'it Oops! It appears that your workspace currency is set to a different currency than USD. To proceed, please set it to USD and try again.',
        error: {
            youNeedToSelectAnOption: 'it Please select an option to proceed.',
            noBankAccountAvailable: "it Sorry, there's no bank account available.",
            noBankAccountSelected: 'it Please choose an account.',
            taxID: 'it Please enter a valid tax ID number.',
            website: 'it Please enter a valid website.',
            zipCode: `it Please enter a valid ZIP code using the format: ${CONST.COUNTRY_ZIP_REGEX_DATA.US.samples}.`,
            phoneNumber: 'it Please enter a valid phone number.',
            email: 'it Please enter a valid email address.',
            companyName: 'it Please enter a valid business name.',
            addressCity: 'it Please enter a valid city.',
            addressStreet: 'it Please enter a valid street address.',
            addressState: 'it Please select a valid state.',
            incorporationDateFuture: "it Incorporation date can't be in the future.",
            incorporationState: 'it Please select a valid state.',
            industryCode: 'it Please enter a valid industry classification code with six digits.',
            restrictedBusiness: "it Please confirm the business isn't on the list of restricted businesses.",
            routingNumber: 'it Please enter a valid routing number.',
            accountNumber: 'it Please enter a valid account number.',
            routingAndAccountNumberCannotBeSame: "it Routing and account numbers can't match.",
            companyType: 'it Please select a valid company type.',
            tooManyAttempts: 'it Due to a high number of login attempts, this option has been disabled for 24 hours. Please try again later or enter details manually instead.',
            address: 'it Please enter a valid address.',
            dob: 'it Please select a valid date of birth.',
            age: 'it Must be over 18 years old.',
            ssnLast4: 'it Please enter valid last 4 digits of SSN.',
            firstName: 'it Please enter a valid first name.',
            lastName: 'it Please enter a valid last name.',
            noDefaultDepositAccountOrDebitCardAvailable: 'it Please add a default deposit account or debit card.',
            validationAmounts: 'it The validation amounts you entered are incorrect. Please double check your bank statement and try again.',
            fullName: 'it Please enter a valid full name.',
            ownershipPercentage: 'it Please enter a valid percentage number.',
        },
    },
    addPersonalBankAccount: {
        countrySelectionStepHeader: "it Where's your bank account located?",
        accountDetailsStepHeader: 'it What are your account details?',
        accountTypeStepHeader: 'it What type of account is this?',
        bankInformationStepHeader: 'it What are your bank details?',
        accountHolderInformationStepHeader: 'it What are the account holder details?',
        howDoWeProtectYourData: 'it How do we protect your data?',
        currencyHeader: "it What's your bank account's currency?",
        confirmationStepHeader: 'it Check your info.',
        confirmationStepSubHeader: 'it Double check the details below, and check the terms box to confirm.',
    },
    addPersonalBankAccountPage: {
        enterPassword: 'it Enter Expensify password',
        alreadyAdded: 'it This account has already been added.',
        chooseAccountLabel: 'it Account',
        successTitle: 'it Personal bank account added!',
        successMessage: 'it Congrats, your bank account is set up and ready to receive reimbursements.',
    },
    attachmentView: {
        unknownFilename: 'it Unknown filename',
        passwordRequired: 'it Please enter a password',
        passwordIncorrect: 'it Incorrect password. Please try again.',
        failedToLoadPDF: 'it Failed to load PDF file.',
        pdfPasswordForm: {
            title: 'it Password protected PDF',
            infoText: 'it This PDF is password protected.',
            beforeLinkText: 'it Please',
            linkText: 'it enter the password',
            afterLinkText: 'it to view it.',
            formLabel: 'it View PDF',
        },
        attachmentNotFound: 'it Attachment not found',
    },
    messages: {
        errorMessageInvalidPhone: `it Please enter a valid phone number without brackets or dashes. If you're outside the US, please include your country code (e.g. ${CONST.EXAMPLE_PHONE_NUMBER}).`,
        errorMessageInvalidEmail: 'it Invalid email',
        userIsAlreadyMember: ({login, name}: UserIsAlreadyMemberParams) => `it ${login} is already a member of ${name}`,
    },
    onfidoStep: {
        acceptTerms: 'it By continuing with the request to activate your Expensify Wallet, you confirm that you have read, understand, and accept',
        facialScan: 'it Onfido\u2019s Facial Scan Policy and Release',
        tryAgain: 'it Try again',
        verifyIdentity: 'it Verify identity',
        letsVerifyIdentity: "it Let's verify your identity",
        butFirst: `But first, the boring stuff. Read up on the legalese in the next step and click "Accept" when you're ready.`,
        genericError: 'it An error occurred while processing this step. Please try again.',
        cameraPermissionsNotGranted: 'it Enable camera access',
        cameraRequestMessage: 'it We need access to your camera to complete bank account verification. Please enable via Settings > New Expensify.',
        microphonePermissionsNotGranted: 'it Enable microphone access',
        microphoneRequestMessage: 'it We need access to your microphone to complete bank account verification. Please enable via Settings > New Expensify.',
        originalDocumentNeeded: 'it Please upload an original image of your ID rather than a screenshot or scanned image.',
        documentNeedsBetterQuality: 'it Your ID appears to be damaged or has missing security features. Please upload an original image of an undamaged ID that is entirely visible.',
        imageNeedsBetterQuality: "it There's an issue with the image quality of your ID. Please upload a new image where your entire ID can be seen clearly.",
        selfieIssue: "it There's an issue with your selfie/video. Please upload a live selfie/video.",
        selfieNotMatching: "it Your selfie/video doesn't match your ID. Please upload a new selfie/video where your face can be clearly seen.",
        selfieNotLive: "it Your selfie/video doesn't appear to be a live photo/video. Please upload a live selfie/video.",
    },
    additionalDetailsStep: {
        headerTitle: 'it Additional details',
        helpText: 'it We need to confirm the following information before you can send and receive money from your wallet.',
        helpTextIdologyQuestions: 'it We need to ask you just a few more questions to finish validating your identity.',
        helpLink: 'it Learn more about why we need this.',
        legalFirstNameLabel: 'it Legal first name',
        legalMiddleNameLabel: 'it Legal middle name',
        legalLastNameLabel: 'it Legal last name',
        selectAnswer: 'it Please select a response to proceed.',
        ssnFull9Error: 'it Please enter a valid nine-digit SSN.',
        needSSNFull9: "it We're having trouble verifying your SSN. Please enter the full nine digits of your SSN.",
        weCouldNotVerify: "it We couldn't verify",
        pleaseFixIt: 'it Please fix this information before continuing',
        failedKYCTextBefore: "it We weren't able to verify your identity. Please try again later or reach out to ",
        failedKYCTextAfter: 'it  if you have any questions.',
    },
    termsStep: {
        headerTitle: 'it Terms and fees',
        headerTitleRefactor: 'it Fees and terms',
        haveReadAndAgree: 'it I have read and agree to receive ',
        electronicDisclosures: 'it electronic disclosures',
        agreeToThe: 'it I agree to the',
        walletAgreement: 'it Wallet agreement',
        enablePayments: 'it Enable payments',
        monthlyFee: 'it Monthly fee',
        inactivity: 'it Inactivity',
        noOverdraftOrCredit: 'it No overdraft/credit feature.',
        electronicFundsWithdrawal: 'it Electronic funds withdrawal',
        standard: 'it Standard',
        reviewTheFees: 'it Please review the fees below.',
        checkTheBoxes: 'it Please check the boxes below.',
        agreeToTerms: 'it Agree to the terms and you\u2019ll be good to go!',
        shortTermsForm: {
            expensifyPaymentsAccount: ({walletProgram}: WalletProgramParams) => `it The Expensify Wallet is issued by ${walletProgram}.`,
            perPurchase: 'it Per purchase',
            atmWithdrawal: 'it ATM withdrawal',
            cashReload: 'it Cash reload',
            inNetwork: 'it in-network',
            outOfNetwork: 'it out-of-network',
            atmBalanceInquiry: 'it ATM balance inquiry',
            inOrOutOfNetwork: 'it (in-network or out-of-network)',
            customerService: 'it Customer service',
            automatedOrLive: 'it (automated or live agent)',
            afterTwelveMonths: 'it (after 12 months with no transactions)',
            weChargeOneFee: 'it We charge one type of fee.',
            fdicInsurance: 'it Your funds are eligible for FDIC insurance.',
            generalInfo: 'it For general information about prepaid accounts, visit',
            conditionsDetails: 'it For details and conditions for all fees and services, visit',
            conditionsPhone: 'it or calling +1 833-400-0904.',
            instant: 'it (instant)',
            electronicFundsInstantFeeMin: ({amount}: TermsParams) => `it (min ${amount})`,
        },
        longTermsForm: {
            listOfAllFees: 'it A list of all Expensify Wallet fees',
            typeOfFeeHeader: 'it Type of fee',
            feeAmountHeader: 'it Fee amount',
            moreDetailsHeader: 'it More details',
            openingAccountTitle: 'it Opening an account',
            openingAccountDetails: "it There's no fee to open an account.",
            monthlyFeeDetails: "it There's no monthly fee.",
            customerServiceTitle: 'it Customer service',
            customerServiceDetails: 'it There are no customer service fees.',
            inactivityDetails: "it There's no inactivity fee.",
            sendingFundsTitle: 'it Sending funds to another account holder',
            sendingFundsDetails: "it There's no fee to send funds to another account holder using your balance, bank account, or debit card.",
            electronicFundsStandardDetails:
                "it There's no fee to transfer funds from your Expensify Wallet " +
                'it to your bank account using the standard option. This transfer usually completes within 1-3 business' +
                'it  days.',
            electronicFundsInstantDetails: ({percentage, amount}: ElectronicFundsParams) =>
                "it There's a fee to transfer funds from your Expensify Wallet to " +
                'it your linked debit card using the instant transfer option. This transfer usually completes within ' +
                `it several minutes. The fee is ${percentage}% of the transfer amount (with a minimum fee of ${amount}).`,
            fdicInsuranceBancorp: ({amount}: TermsParams) =>
                'it Your funds are eligible for FDIC insurance. Your funds will be held at or ' +
                `it transferred to ${CONST.WALLET.PROGRAM_ISSUERS.BANCORP_BANK}, an FDIC-insured institution. Once there, your funds are insured up ` +
                `it to ${amount} by the FDIC in the event ${CONST.WALLET.PROGRAM_ISSUERS.BANCORP_BANK} fails. See`,
            fdicInsuranceBancorp2: 'it for details.',
            contactExpensifyPayments: `it Contact ${CONST.WALLET.PROGRAM_ISSUERS.EXPENSIFY_PAYMENTS} by calling +1 833-400-0904, by email at`,
            contactExpensifyPayments2: 'it or sign in at',
            generalInformation: 'it For general information about prepaid accounts, visit',
            generalInformation2: 'it If you have a complaint about a prepaid account, call the Consumer Financial Protection Bureau at 1-855-411-2372 or visit',
            printerFriendlyView: 'it View printer-friendly version',
            automated: 'it Automated',
            liveAgent: 'it Live agent',
            instant: 'it Instant',
            electronicFundsInstantFeeMin: ({amount}: TermsParams) => `it Min ${amount}`,
        },
    },
    activateStep: {
        headerTitle: 'it Enable payments',
        activatedTitle: 'it Wallet activated!',
        activatedMessage: 'it Congrats, your wallet is set up and ready to make payments.',
        checkBackLaterTitle: 'it Just a minute...',
        checkBackLaterMessage: "it We're still reviewing your information. Please check back later.",
        continueToPayment: 'it Continue to payment',
        continueToTransfer: 'it Continue to transfer',
    },
    companyStep: {
        headerTitle: 'it Company information',
        subtitle: 'it Almost done! For security purposes, we need to confirm some information:',
        legalBusinessName: 'it Legal business name',
        companyWebsite: 'it Company website',
        taxIDNumber: 'it Tax ID number',
        taxIDNumberPlaceholder: 'it 9 digits',
        companyType: 'it Company type',
        incorporationDate: 'it Incorporation date',
        incorporationState: 'it Incorporation state',
        industryClassificationCode: 'it Industry classification code',
        confirmCompanyIsNot: 'it I confirm that this company is not on the',
        listOfRestrictedBusinesses: 'it list of restricted businesses',
        incorporationDatePlaceholder: 'it Start date (yyyy-mm-dd)',
        incorporationTypes: {
            LLC: 'it LLC',
            CORPORATION: 'it Corp',
            PARTNERSHIP: 'it Partnership',
            COOPERATIVE: 'it Cooperative',
            SOLE_PROPRIETORSHIP: 'it Sole proprietorship',
            OTHER: 'it Other',
        },
    },
    requestorStep: {
        headerTitle: 'it Personal information',
        learnMore: 'it Learn more',
        isMyDataSafe: 'it Is my data safe?',
    },
    personalInfoStep: {
        personalInfo: 'it Personal info',
        enterYourLegalFirstAndLast: "it What's your legal name?",
        legalFirstName: 'it Legal first name',
        legalLastName: 'it Legal last name',
        legalName: 'it Legal name',
        enterYourDateOfBirth: "it What's your date of birth?",
        enterTheLast4: 'it What are the last four digits of your Social Security Number?',
        dontWorry: "it Don't worry, we don't do any personal credit checks!",
        last4SSN: 'it Last 4 of SSN',
        enterYourAddress: "it What's your address?",
        address: 'it Address',
        letsDoubleCheck: "it Let's double check that everything looks right.",
        byAddingThisBankAccount: "it By adding this bank account, you confirm that you've read, understand, and accept",
        whatsYourLegalName: 'it What\u2019s your legal name?',
        whatsYourDOB: 'it What\u2019s your date of birth?',
        whatsYourAddress: 'it What\u2019s your address?',
        whatsYourSSN: 'it What are the last four digits of your Social Security Number?',
        noPersonalChecks: 'it Don\u2019t worry, no personal credit checks here!',
        whatsYourPhoneNumber: 'it What\u2019s your phone number?',
        weNeedThisToVerify: 'it We need this to verify your wallet.',
    },
    businessInfoStep: {
        businessInfo: 'it Company info',
        enterTheNameOfYourBusiness: "it What's the name of your company?",
        businessName: 'it Legal company name',
        enterYourCompanysTaxIdNumber: "it What's your company\u2019s Tax ID number?",
        taxIDNumber: 'it Tax ID number',
        taxIDNumberPlaceholder: 'it 9 digits',
        enterYourCompanysWebsite: "it What's your company\u2019s website?",
        companyWebsite: 'it Company website',
        enterYourCompanysPhoneNumber: "it What's your company\u2019s phone number?",
        enterYourCompanysAddress: "it What's your company\u2019s address?",
        selectYourCompanysType: 'it What type of company is it?',
        companyType: 'it Company type',
        incorporationType: {
            LLC: 'it LLC',
            CORPORATION: 'it Corp',
            PARTNERSHIP: 'it Partnership',
            COOPERATIVE: 'it Cooperative',
            SOLE_PROPRIETORSHIP: 'it Sole proprietorship',
            OTHER: 'it Other',
        },
        selectYourCompanysIncorporationDate: "it What's your company\u2019s incorporation date?",
        incorporationDate: 'it Incorporation date',
        incorporationDatePlaceholder: 'it Start date (yyyy-mm-dd)',
        incorporationState: 'it Incorporation state',
        pleaseSelectTheStateYourCompanyWasIncorporatedIn: 'it Which state was your company incorporated in?',
        letsDoubleCheck: "it Let's double check that everything looks right.",
        companyAddress: 'it Company address',
        listOfRestrictedBusinesses: 'it list of restricted businesses',
        confirmCompanyIsNot: 'it I confirm that this company is not on the',
        businessInfoTitle: 'it Business info',
        legalBusinessName: 'it Legal business name',
        whatsTheBusinessName: "it What's the business name?",
        whatsTheBusinessAddress: "it What's the business address?",
        whatsTheBusinessContactInformation: "it What's the business contact information?",
        whatsTheBusinessRegistrationNumber: "it What's the business registration number?",
        whatsTheBusinessTaxIDEIN: "it What's the business tax ID/EIN/VAT/GST registration number?",
        whatsThisNumber: "it What's this number?",
        whereWasTheBusinessIncorporated: 'it Where was the business incorporated?',
        whatTypeOfBusinessIsIt: 'it What type of business is it?',
        whatsTheBusinessAnnualPayment: "it What's the business's annual payment volume?",
        whatsYourExpectedAverageReimbursements: "it What's your expected average reimbursement amount?",
        registrationNumber: 'it Registration number',
        taxIDEIN: 'it Tax ID/EIN number',
        businessAddress: 'it Business address',
        businessType: 'it Business type',
        incorporation: 'it Incorporation',
        incorporationCountry: 'it Incorporation country',
        incorporationTypeName: 'it Incorporation type',
        businessCategory: 'it Business category',
        annualPaymentVolume: 'it Annual payment volume',
        annualPaymentVolumeInCurrency: ({currencyCode}: CurrencyCodeParams) => `it Annual payment volume in ${currencyCode}`,
        averageReimbursementAmount: 'it Average reimbursement amount',
        averageReimbursementAmountInCurrency: ({currencyCode}: CurrencyCodeParams) => `it Average reimbursement amount in ${currencyCode}`,
        selectIncorporationType: 'it Select incorporation type',
        selectBusinessCategory: 'it Select business category',
        selectAnnualPaymentVolume: 'it Select annual payment volume',
        selectIncorporationCountry: 'it Select incorporation country',
        selectIncorporationState: 'it Select incorporation state',
        selectAverageReimbursement: 'it Select average reimbursement amount',
        findIncorporationType: 'it Find incorporation type',
        findBusinessCategory: 'it Find business category',
        findAnnualPaymentVolume: 'it Find annual payment volume',
        findIncorporationState: 'it Find incorporation state',
        findAverageReimbursement: 'it Find average reimbursement amount',
        error: {
            registrationNumber: 'it Please provide a valid registration number.',
        },
    },
    beneficialOwnerInfoStep: {
        doYouOwn25percent: 'it Do you own 25% or more of',
        doAnyIndividualOwn25percent: 'it Do any individuals own 25% or more of',
        areThereMoreIndividualsWhoOwn25percent: 'it Are there more individuals who own 25% or more of',
        regulationRequiresUsToVerifyTheIdentity: 'it Regulation requires us to verify the identity of any individual who owns more than 25% of the business.',
        companyOwner: 'it Business owner',
        enterLegalFirstAndLastName: "it What's the owner's legal name?",
        legalFirstName: 'it Legal first name',
        legalLastName: 'it Legal last name',
        enterTheDateOfBirthOfTheOwner: "it What's the owner's date of birth?",
        enterTheLast4: 'it What are the last 4 digits of the owner\u2019s Social Security Number?',
        last4SSN: 'it Last 4 of SSN',
        dontWorry: "it Don't worry, we don't do any personal credit checks!",
        enterTheOwnersAddress: "it What's the owner's address?",
        letsDoubleCheck: 'it Let\u2019s double check that everything looks right.',
        legalName: 'it Legal name',
        address: 'it Address',
        byAddingThisBankAccount: "it By adding this bank account, you confirm that you've read, understand, and accept",
        owners: 'it Owners',
    },
    ownershipInfoStep: {
        ownerInfo: 'it Owner info',
        businessOwner: 'it Business owner',
        signerInfo: 'it Signer info',
        doYouOwn: ({companyName}: CompanyNameParams) => `it Do you own 25% or more of ${companyName}`,
        doesAnyoneOwn: ({companyName}: CompanyNameParams) => `it Does any individuals own 25% or more of ${companyName}`,
        regulationsRequire: 'it Regulations require us to verify the identity of any individual who owns more than 25% of the business.',
        legalFirstName: 'it Legal first name',
        legalLastName: 'it Legal last name',
        whatsTheOwnersName: "it What's the owner's legal name?",
        whatsYourName: "it What's your legal name?",
        whatPercentage: 'it What percentage of the business belongs to the owner?',
        whatsYoursPercentage: 'it What percentage of the business do you own?',
        ownership: 'it Ownership',
        whatsTheOwnersDOB: "it What's the owner's date of birth?",
        whatsYourDOB: "it What's your date of birth?",
        whatsTheOwnersAddress: "it What's the owner's address?",
        whatsYourAddress: "it What's your address?",
        whatAreTheLast: "it What are the last 4 digits of the owner's Social Security Number?",
        whatsYourLast: 'it What are the last 4 digits of your Social Security Number?',
        dontWorry: "it Don't worry, we don't do any personal credit checks!",
        last4: 'it Last 4 of SSN',
        whyDoWeAsk: 'it Why do we ask for this?',
        letsDoubleCheck: 'it Let\u2019s double check that everything looks right.',
        legalName: 'it Legal name',
        ownershipPercentage: 'it Ownership percentage',
        areThereOther: ({companyName}: CompanyNameParams) => `it Are there other individuals who own 25% or more of ${companyName}`,
        owners: 'it Owners',
        addCertified: 'it Add a certified org chart that shows the beneficial owners',
        regulationRequiresChart: 'it Regulation requires us to collect a certified copy of the ownership chart that shows every individual or entity who owns 25% or more of the business.',
        uploadEntity: 'it Upload entity ownership chart',
        noteEntity: 'it Note: Entity ownership chart must be signed by your accountant, legal counsel, or notarized.',
        certified: 'it Certified entity ownership chart',
        selectCountry: 'it Select country',
        findCountry: 'it Find country',
        address: 'it Address',
        chooseFile: 'it Choose file',
        uploadDocuments: 'it Upload additional documentation',
        pleaseUpload: 'it Please upload additional documentation below to help us verify your identity as a direct or indirect owner of 25% or more of the business entity.',
        acceptedFiles: 'it Accepted file formats: PDF, PNG, JPEG. Total file size for each section cannot exceed 5 MB.',
        proofOfBeneficialOwner: 'it Proof of beneficial owner',
        proofOfBeneficialOwnerDescription:
            "it Please provide a signed attestation and org chart from a public accountant, notary, or lawyer verifying ownership of 25% or more of the business. It must be dated within the last three months and include the signer's license number.",
        copyOfID: 'it Copy of ID for beneficial owner',
        copyOfIDDescription: "it Examples: Passport, driver's license, etc.",
        proofOfAddress: 'it Address proof for beneficial owner',
        proofOfAddressDescription: 'it Examples: Utility bill, rental agreement, etc.',
        codiceFiscale: 'it Codice fiscale/Tax ID',
        codiceFiscaleDescription:
            'it Please upload a video of a site visit or a recorded call with the signing officer. The officer must provide: full name, date of birth, company name, registered number, fiscal code number, registered address, nature of business and purpose of account.',
    },
    validationStep: {
        headerTitle: 'it Validate bank account',
        buttonText: 'it Finish setup',
        maxAttemptsReached: 'it Validation for this bank account has been disabled due to too many incorrect attempts.',
        description: `Within 1-2 business days, we'll send three (3) small transactions to your bank account from a name like "Expensify, Inc. Validation".`,
        descriptionCTA: 'it Please enter each transaction amount in the fields below. Example: 1.51.',
        reviewingInfo: "it Thanks! We're reviewing your information, and will be in touch shortly. Please check your chat with Concierge ",
        forNextStep: 'it  for next steps to finish setting up your bank account.',
        letsChatCTA: "it Yes, let's chat",
        letsChatText: 'it Almost there! We need your help verifying a few last bits of information over chat. Ready?',
        letsChatTitle: "it Let's chat!",
        enable2FATitle: 'it Prevent fraud, enable two-factor authentication (2FA)',
        enable2FAText: 'it We take your security seriously. Please set up 2FA now to add an extra layer of protection to your account.',
        secureYourAccount: 'it Secure your account',
    },
    beneficialOwnersStep: {
        additionalInformation: 'it Additional information',
        checkAllThatApply: 'it Check all that apply, otherwise leave blank.',
        iOwnMoreThan25Percent: 'it I own more than 25% of ',
        someoneOwnsMoreThan25Percent: 'it Somebody else owns more than 25% of ',
        additionalOwner: 'it Additional beneficial owner',
        removeOwner: 'it Remove this beneficial owner',
        addAnotherIndividual: 'it Add another individual who owns more than 25% of ',
        agreement: 'it Agreement:',
        termsAndConditions: 'it terms and conditions',
        certifyTrueAndAccurate: 'it I certify that the information provided is true and accurate',
        error: {
            certify: 'it Must certify information is true and accurate.',
        },
    },
    completeVerificationStep: {
        completeVerification: 'it Complete verification',
        confirmAgreements: 'it Please confirm the agreements below.',
        certifyTrueAndAccurate: 'it I certify that the information provided is true and accurate',
        certifyTrueAndAccurateError: 'it Please certify that the information is true and accurate',
        isAuthorizedToUseBankAccount: 'it I am authorized to use this business bank account for business spend',
        isAuthorizedToUseBankAccountError: 'it You must be a controlling officer with authorization to operate the business bank account.',
        termsAndConditions: 'it terms and conditions',
    },
    connectBankAccountStep: {
        connectBankAccount: 'it Connect bank account',
        finishButtonText: 'it Finish setup',
        validateYourBankAccount: 'it Validate your bank account',
        validateButtonText: 'it Validate',
        validationInputLabel: 'it Transaction',
        maxAttemptsReached: 'it Validation for this bank account has been disabled due to too many incorrect attempts.',
        description: `Within 1-2 business days, we'll send three (3) small transactions to your bank account from a name like "Expensify, Inc. Validation".`,
        descriptionCTA: 'it Please enter each transaction amount in the fields below. Example: 1.51.',
        reviewingInfo: "it Thanks! We're reviewing your information and will be in touch shortly. Please check your chat with Concierge ",
        forNextSteps: 'it  for next steps to finish setting up your bank account.',
        letsChatCTA: "it Yes, let's chat",
        letsChatText: 'it Almost there! We need your help verifying a few last bits of information over chat. Ready?',
        letsChatTitle: "it Let's chat!",
        enable2FATitle: 'it Prevent fraud, enable two-factor authentication (2FA)',
        enable2FAText: 'it We take your security seriously. Please set up 2FA now to add an extra layer of protection to your account.',
        secureYourAccount: 'it Secure your account',
    },
    countryStep: {
        confirmBusinessBank: 'it Confirm business bank account currency and country',
        confirmCurrency: 'it Confirm currency and country',
        yourBusiness: 'it Your business bank account currency must match your workspace currency.',
        youCanChange: 'it You can change your workspace currency in your',
        findCountry: 'it Find country',
        selectCountry: 'it Select country',
    },
    bankInfoStep: {
        whatAreYour: 'it What are your business bank account details?',
        letsDoubleCheck: 'it Let\u2019s double check that everything looks fine.',
        thisBankAccount: 'it This bank account will be used for business payments on your workspace',
        accountNumber: 'it Account number',
        bankStatement: 'it Bank statement',
        chooseFile: 'it Choose file',
        uploadYourLatest: 'it Upload your latest statement',
        pleaseUpload: ({lastFourDigits}: LastFourDigitsParams) => `it Please upload the most recent monthly statement for your business bank account ending in ${lastFourDigits}.`,
    },
    signerInfoStep: {
        signerInfo: 'it Signer info',
        areYouDirector: ({companyName}: CompanyNameParams) => `it Are you a director or senior officer at ${companyName}?`,
        regulationRequiresUs: 'it Regulation requires us to verify if the signer has the authority to take this action on behalf of the business.',
        whatsYourName: "it What's your legal name",
        fullName: 'it Legal full name',
        whatsYourJobTitle: "it What's your job title?",
        jobTitle: 'it Job title',
        whatsYourDOB: "it What's your date of birth?",
        uploadID: 'it Upload ID and proof of address',
        id: "it ID (driver's license or passport)",
        personalAddress: 'it Proof of personal address (e.g. utility bill)',
        letsDoubleCheck: 'it Let\u2019s double check that everything looks right.',
        legalName: 'it Legal name',
        proofOf: 'it Proof of personal address',
        enterOneEmail: 'it Enter the email of director or senior officer at',
        regulationRequiresOneMoreDirector: 'it Regulation requires one more director or senior officer as a signer.',
        hangTight: 'it Hang tight...',
        enterTwoEmails: 'it Enter the emails of two directors or senior officers at',
        sendReminder: 'it Send a reminder',
        chooseFile: 'it Choose file',
        weAreWaiting: "it We're waiting for others to verify their identities as directors or senior officers of the business.",
    },
    agreementsStep: {
        agreements: 'it Agreements',
        pleaseConfirm: 'it Please confirm the agreements below',
        regulationRequiresUs: 'it Regulation requires us to verify the identity of any individual who owns more than 25% of the business.',
        iAmAuthorized: 'it I am authorized to use the business bank account for business spend.',
        iCertify: 'it I certify that the information provided is true and accurate.',
        termsAndConditions: 'it terms and conditions.',
        accept: 'it Accept and add bank account',
        error: {
            authorized: 'it You must be a controlling officer with authorization to operate the business bank account',
            certify: 'it Please certify that the information is true and accurate',
        },
    },
    finishStep: {
        connect: 'it Connect bank account',
        letsFinish: "it Let's finish in chat!",
        thanksFor:
            "it Thanks for those details. A dedicated support agent will now review your information. We'll circle back if we need anything else from you, but in the meantime, feel free to reach out to us with any questions.",
        iHaveA: 'it I have a question',
        enable2FA: 'it Enable two-factor authentication (2FA) to prevent fraud',
        weTake: 'it We take your security seriously. Please set up 2FA now to add an extra layer of protection to your account.',
        secure: 'it Secure your account',
    },
    reimbursementAccountLoadingAnimation: {
        oneMoment: 'it One moment',
        explanationLine: "it We\u2019re taking a look at your information. You'll be able to continue with next steps shortly.",
    },
    session: {
        offlineMessageRetry: "it Looks like you're offline. Please check your connection and try again.",
    },
    travel: {
        header: 'it Book travel',
        title: 'it Travel smart',
        subtitle: 'it Use Expensify Travel to get the best travel offers and manage all your business expenses in one place.',
        features: {
            saveMoney: 'it Save money on your bookings',
            alerts: 'it Get realtime updates and alerts',
        },
        bookTravel: 'it Book travel',
        bookDemo: 'it Book demo',
        bookADemo: 'it Book a demo',
        toLearnMore: 'it  to learn more.',
        termsAndConditions: {
            header: 'it Before we continue...',
            title: 'it Terms & conditions',
            subtitle: 'it Please agree to the Expensify Travel ',
            termsconditions: 'it terms & conditions',
            travelTermsAndConditions: 'it terms & conditions',
            agree: 'it I agree to the ',
            error: 'it You must agree to the Expensify Travel terms & conditions to continue',
        },
        flight: 'it Flight',
        flightDetails: {
            passenger: 'it Passenger',
            layover: ({layover}: FlightLayoverParams) => `it <muted-text-label>You have a <strong>${layover} layover</strong> before this flight</muted-text-label>`,
            takeOff: 'it Take-off',
            landing: 'it Landing',
            seat: 'it Seat',
            class: 'it Cabin Class',
            recordLocator: 'it Record locator',
        },
        hotel: 'it Hotel',
        hotelDetails: {
            guest: 'it Guest',
            checkIn: 'it Check-in',
            checkOut: 'it Check-out',
            roomType: 'it Room type',
            cancellation: 'it Cancellation policy',
            cancellationUntil: 'it Free cancellation until',
            confirmation: 'it Confirmation number',
            cancellationPolicies: {
                unknown: 'it Unknown',
                nonRefundable: 'it Non-refundable',
                freeCancellationUntil: 'it Free cancellation until',
                partiallyRefundable: 'it Partially refundable',
            },
        },
        car: 'it Car',
        carDetails: {
            rentalCar: 'it Car rental',
            pickUp: 'it Pick-up',
            dropOff: 'it Drop-off',
            driver: 'it Driver',
            carType: 'it Car type',
            cancellation: 'it Cancellation policy',
            cancellationUntil: 'it Free cancellation until',
            freeCancellation: 'it Free cancellation',
            confirmation: 'it Confirmation number',
        },
        train: 'it Rail',
        trainDetails: {
            passenger: 'it Passenger',
            departs: 'it Departs',
            arrives: 'it Arrives',
            coachNumber: 'it Coach number',
            seat: 'it Seat',
            fareDetails: 'it Fare details',
            confirmation: 'it Confirmation number',
        },
        viewTrip: 'it View trip',
        modifyTrip: 'it Modify trip',
        tripSupport: 'it Trip support',
        tripDetails: 'it Trip details',
        viewTripDetails: 'it View trip details',
        trip: 'it Trip',
        trips: 'it Trips',
        tripSummary: 'it Trip summary',
        departs: 'it Departs',
        errorMessage: 'it Something went wrong. Please try again later.',
        phoneError: 'it To book travel, your default contact method must be a valid email',
        domainSelector: {
            title: 'it Domain',
            subtitle: 'it Choose a domain for Expensify Travel setup.',
            recommended: 'it Recommended',
        },
        domainPermissionInfo: {
            title: 'it Domain',
            restrictionPrefix: `You don't have permission to enable Expensify Travel for the domain`,
            restrictionSuffix: `You'll need to ask someone from that domain to enable travel instead.`,
            accountantInvitationPrefix: `If you're an accountant, consider joining the`,
            accountantInvitationLink: `ExpensifyApproved! accountants program`,
            accountantInvitationSuffix: `to enable travel for this domain.`,
        },
        publicDomainError: {
            title: 'it Get started with Expensify Travel',
            message: `You'll need to use your work email (e.g., name@company.com) with Expensify Travel, not your personal email (e.g., name@gmail.com).`,
        },
        maintenance: {
            title: 'it Expensify Travel is getting an upgrade! \uD83D\uDE80',
            message: `It'll be unavailable February 23-24, but back and better than ever after that. If you need help with a current trip, please call +1 866-296-7768. Thanks!`,
        },
    },
    workspace: {
        common: {
            card: 'it Cards',
            expensifyCard: 'it Expensify Card',
            companyCards: 'it Company cards',
            workflows: 'it Workflows',
            workspace: 'it Workspace',
            edit: 'it Edit workspace',
            enabled: 'it Enabled',
            disabled: 'it Disabled',
            everyone: 'it Everyone',
            delete: 'it Delete workspace',
            settings: 'it Settings',
            reimburse: 'it Reimbursements',
            categories: 'it Categories',
            tags: 'it Tags',
            reportFields: 'it Report fields',
            reportField: 'it Report field',
            taxes: 'it Taxes',
            bills: 'it Bills',
            invoices: 'it Invoices',
            travel: 'it Travel',
            members: 'it Members',
            accounting: 'it Accounting',
            rules: 'it Rules',
            displayedAs: 'it Displayed as',
            plan: 'it Plan',
            profile: 'it Overview',
            bankAccount: 'it Bank account',
            connectBankAccount: 'it Connect bank account',
            testTransactions: 'it Test transactions',
            issueAndManageCards: 'it Issue and manage cards',
            reconcileCards: 'it Reconcile cards',
            selected: () => ({
                one: 'it 1 selected',
                other: (count: number) => `it ${count} selected`,
            }),
            settlementFrequency: 'it Settlement frequency',
            setAsDefault: 'it Set as default workspace',
            defaultNote: `it Receipts sent to ${CONST.EMAIL.RECEIPTS} will appear in this workspace.`,
            deleteConfirmation: 'it Are you sure you want to delete this workspace?',
            deleteWithCardsConfirmation: 'it Are you sure you want to delete this workspace? This will remove all card feeds and assigned cards.',
            unavailable: 'it Unavailable workspace',
            memberNotFound: 'it Member not found. To invite a new member to the workspace, please use the invite button above.',
            notAuthorized: `it You don't have access to this page. If you're trying to join this workspace, just ask the workspace owner to add you as a member. Something else? Reach out to ${CONST.EMAIL.CONCIERGE}.`,
            goToRoom: ({roomName}: GoToRoomParams) => `it Go to ${roomName} room`,
            goToWorkspace: 'it Go to workspace',
            goToWorkspaces: 'it Go to workspaces',
            clearFilter: 'it Clear filter',
            workspaceName: 'it Workspace name',
            workspaceOwner: 'it Owner',
            workspaceType: 'it Workspace type',
            workspaceAvatar: 'it Workspace avatar',
            mustBeOnlineToViewMembers: 'it You need to be online in order to view members of this workspace.',
            moreFeatures: 'it More features',
            requested: 'it Requested',
            distanceRates: 'it Distance rates',
            defaultDescription: 'it One place for all your receipts and expenses.',
            welcomeNote: 'it Please use Expensify to submit your receipts for reimbursement, thanks!',
            subscription: 'it Subscription',
            markAsExported: 'it Mark as manually entered',
            exportIntegrationSelected: ({connectionName}: ExportIntegrationSelectedParams) => `it Export to ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName]}`,
            letsDoubleCheck: "it Let's double check that everything looks right.",
            lineItemLevel: 'it Line-item level',
            reportLevel: 'it Report level',
            topLevel: 'it Top level',
            appliedOnExport: 'it Not imported into Expensify, applied on export',
            shareNote: {
                header: 'it Share your workspace with other members',
                content: {
                    firstPart:
                        'it Share this QR code or copy the link below to make it easy for members to request access to your workspace. All requests to join the workspace will show up in the',
                    secondPart: 'it room for your review.',
                },
            },
            createNewConnection: 'it Create new connection',
            reuseExistingConnection: 'it Reuse existing connection',
            existingConnections: 'it Existing connections',
            lastSyncDate: ({connectionName, formattedDate}: LastSyncDateParams) => `it ${connectionName} - Last synced ${formattedDate}`,
            authenticationError: ({connectionName}: AuthenticationErrorParams) => `it Can\u2019t connect to ${connectionName} due to an authentication error.`,
            learnMore: 'it Learn more.',
            memberAlternateText: 'it Members can submit and approve reports.',
            adminAlternateText: 'it Admins have full edit access to all reports and workspace settings.',
            auditorAlternateText: 'it Auditors can view and comment on reports.',
            roleName: ({role}: OptionalParam<RoleNamesParams> = {}) => {
                switch (role) {
                    case CONST.POLICY.ROLE.ADMIN:
                        return 'it Admin';
                    case CONST.POLICY.ROLE.AUDITOR:
                        return 'it Auditor';
                    case CONST.POLICY.ROLE.USER:
                        return 'it Member';
                    default:
                        return 'it Member';
                }
            },
            frequency: {
                manual: 'it Manually',
                instant: 'it Instant',
                immediate: 'it Daily',
                trip: 'it By trip',
                weekly: 'it Weekly',
                semimonthly: 'it Twice a month',
                monthly: 'it Monthly',
            },
            planType: 'it Plan type',
            submitExpense: 'it Submit your expenses below:',
            defaultCategory: 'it Default category',
            viewTransactions: 'it View transactions',
        },
        perDiem: {
            subtitle: 'it Set per diem rates to control daily employee spend. ',
            amount: 'it Amount',
            deleteRates: () => ({
                one: 'it Delete rate',
                other: 'it Delete rates',
            }),
            deletePerDiemRate: 'it Delete per diem rate',
            areYouSureDelete: () => ({
                one: 'it Are you sure you want to delete this rate?',
                other: 'it Are you sure you want to delete these rates?',
            }),
            emptyList: {
                title: 'it Per diem',
                subtitle: 'it Set per diem rates to control daily employee spend. Import rates from a spreadsheet to get started.',
            },
            errors: {
                existingRateError: ({rate}: CustomUnitRateParams) => `it A rate with value ${rate} already exists.`,
            },
            importPerDiemRates: 'it Import per diem rates',
            editPerDiemRate: 'it Edit per diem rate',
            editPerDiemRates: 'it Edit per diem rates',
            editDestinationSubtitle: ({destination}: EditDestinationSubtitleParams) => `it Updating this destination will change it for all ${destination} per diem subrates.`,
            editCurrencySubtitle: ({destination}: EditDestinationSubtitleParams) => `it Updating this currency will change it for all ${destination} per diem subrates.`,
        },
        qbd: {
            exportOutOfPocketExpensesDescription: 'it Set how out-of-pocket expenses export to QuickBooks Desktop.',
            exportOutOfPocketExpensesCheckToogle: 'it Mark checks as \u201Cprint later\u201D',
            exportDescription: 'it Configure how Expensify data exports to QuickBooks Desktop.',
            date: 'it Export date',
            exportInvoices: 'it Export invoices to',
            exportExpensifyCard: 'it Export Expensify Card transactions as',
            account: 'it Account',
            accountDescription: 'it Choose where to post journal entries.',
            accountsPayable: 'it Accounts payable',
            accountsPayableDescription: 'it Choose where to create vendor bills.',
            bankAccount: 'it Bank account',
            notConfigured: 'it Not configured',
            bankAccountDescription: 'it Choose where to send checks from.',
            creditCardAccount: 'it Credit card account',
            exportDate: {
                label: 'it Export date',
                description: 'it Use this date when exporting reports to QuickBooks Desktop.',
                values: {
                    [CONST.QUICKBOOKS_EXPORT_DATE.LAST_EXPENSE]: {
                        label: 'it Date of last expense',
                        description: 'it Date of the most recent expense on the report.',
                    },
                    [CONST.QUICKBOOKS_EXPORT_DATE.REPORT_EXPORTED]: {
                        label: 'it Export date',
                        description: 'it Date the report was exported to QuickBooks Desktop.',
                    },
                    [CONST.QUICKBOOKS_EXPORT_DATE.REPORT_SUBMITTED]: {
                        label: 'it Submitted date',
                        description: 'it Date the report was submitted for approval.',
                    },
                },
            },
            exportCheckDescription: "it We'll create an itemized check for each Expensify report and send it from the bank account below.",
            exportJournalEntryDescription: "it We'll create an itemized journal entry for each Expensify report and post it to the account below.",
            exportVendorBillDescription:
                "it We'll create an itemized vendor bill for each Expensify report and add it to the account below. If this period is closed, we'll post to the 1st of the next open period.",
            deepDiveExpensifyCard: 'it Expensify Card transactions will automatically export to an "Expensify Card Liability Account" created with',
            deepDiveExpensifyCardIntegration: 'it our integration.',
            outOfPocketTaxEnabledDescription:
                "it QuickBooks Desktop doesn't support taxes on journal entry exports. As you have taxes enabled on your workspace, this export option is unavailable.",
            outOfPocketTaxEnabledError: 'it Journal entries are unavailable when taxes are enabled. Please choose a different export option.',
            accounts: {
                [CONST.QUICKBOOKS_DESKTOP_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD]: 'it Credit card',
                [CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL]: 'it Vendor bill',
                [CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.JOURNAL_ENTRY]: 'it Journal entry',
                [CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.CHECK]: 'it Check',
                [`it ${CONST.QUICKBOOKS_DESKTOP_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CHECK}Description`]:
                    "it We'll create an itemized check for each Expensify report and send it from the bank account below.",
                [`it ${CONST.QUICKBOOKS_DESKTOP_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD}Description`]:
                    "it We'll automatically match the merchant name on the credit card transaction to any corresponding vendors in QuickBooks. If no vendors exist, we'll create a 'Credit Card Misc.' vendor for association.",
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}Description`]:
                    "it We'll create an itemized vendor bill for each Expensify report with the date of the last expense, and add it to the account below. If this period is closed, we'll post to the 1st of the next open period.",
                [`it ${CONST.QUICKBOOKS_DESKTOP_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD}AccountDescription`]: 'it Choose where to export credit card transactions.',
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}AccountDescription`]: 'it Choose a vendor to apply to all credit card transactions.',
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.CHECK}AccountDescription`]: 'it Choose where to send checks from.',
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}Error`]:
                    'it Vendor bills are unavailable when locations are enabled. Please choose a different export option.',
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.CHECK}Error`]: 'it Checks are unavailable when locations are enabled. Please choose a different export option.',
                [`it ${CONST.QUICKBOOKS_DESKTOP_REIMBURSABLE_ACCOUNT_TYPE.JOURNAL_ENTRY}Error`]:
                    'it Journal entries are unavailable when taxes are enabled. Please choose a different export option.',
            },
            noAccountsFound: 'it No accounts found',
            noAccountsFoundDescription: 'it Add the account in QuickBooks Desktop and sync the connection again.',
            qbdSetup: 'it QuickBooks Desktop setup',
            requiredSetupDevice: {
                title: "it Can't connect from this device",
                body1: "it You'll need to setup this connection from the computer that hosts your QuickBooks Desktop company file.",
                body2: "it Once you're connected, you'll be able to sync and export from anywhere.",
            },
            setupPage: {
                title: 'it Open this link to connect',
                body: 'it To complete setup, open the following link on the computer where QuickBooks Desktop is running.',
                setupErrorTitle: 'it Something went wrong',
                setupErrorBody1: "it The QuickBooks Desktop connection isn't working at the moment. Please try again later or",
                setupErrorBody2: 'it if the problem persists.',
                setupErrorBodyContactConcierge: 'it reach out to Concierge',
            },
            importDescription: 'it Choose which coding configurations to import from QuickBooks Desktop to Expensify.',
            classes: 'it Classes',
            items: 'it Items',
            customers: 'it Customers/projects',
            exportCompanyCardsDescription: 'it Set how company card purchases export to QuickBooks Desktop.',
            defaultVendorDescription: 'it Set a default vendor that will apply to all credit card transactions upon export.',
            accountsDescription: 'it Your QuickBooks Desktop chart of accounts will import into Expensify as categories.',
            accountsSwitchTitle: 'it Choose to import new accounts as enabled or disabled categories.',
            accountsSwitchDescription: 'it Enabled categories will be available for members to select when creating their expenses.',
            classesDescription: 'it Choose how to handle QuickBooks Desktop classes in Expensify.',
            tagsDisplayedAsDescription: 'it Line item level',
            reportFieldsDisplayedAsDescription: 'it Report level',
            customersDescription: 'it Choose how to handle QuickBooks Desktop customers/projects in Expensify.',
            advancedConfig: {
                autoSyncDescription: 'it Expensify will automatically sync with QuickBooks Desktop every day.',
                createEntities: 'it Auto-create entities',
                createEntitiesDescription: "it Expensify will automatically create vendors in QuickBooks Desktop if they don't exist already.",
            },
            itemsDescription: 'it Choose how to handle QuickBooks Desktop items in Expensify.',
        },
        qbo: {
            connectedTo: 'it Connected to',
            importDescription: 'it Choose which coding configurations to import from QuickBooks Online to Expensify.',
            classes: 'it Classes',
            locations: 'it Locations',
            customers: 'it Customers/projects',
            accountsDescription: 'it Your QuickBooks Online chart of accounts will import into Expensify as categories.',
            accountsSwitchTitle: 'it Choose to import new accounts as enabled or disabled categories.',
            accountsSwitchDescription: 'it Enabled categories will be available for members to select when creating their expenses.',
            classesDescription: 'it Choose how to handle QuickBooks Online classes in Expensify.',
            customersDescription: 'it Choose how to handle QuickBooks Online customers/projects in Expensify.',
            locationsDescription: 'it Choose how to handle QuickBooks Online locations in Expensify.',
            taxesDescription: 'it Choose how to handle QuickBooks Online taxes in Expensify.',
            locationsLineItemsRestrictionDescription:
                "it QuickBooks Online does not support Locations at the line-level for Checks or Vendor Bills. If you'd like to have locations at the line-level, make sure you are using Journal Entries and Credit/Debit Card expenses.",
            taxesJournalEntrySwitchNote: "it QuickBooks Online doesn't support taxes on journal entries. Please change your export option to vendor bill or check.",
            exportDescription: 'it Configure how Expensify data exports to QuickBooks Online.',
            date: 'it Export date',
            exportInvoices: 'it Export invoices to',
            exportExpensifyCard: 'it Export Expensify Card transactions as',
            deepDiveExpensifyCard: 'it Expensify Card transactions will automatically export to an "Expensify Card Liability Account" created with',
            deepDiveExpensifyCardIntegration: 'it our integration.',
            exportDate: {
                label: 'it Export date',
                description: 'it Use this date when exporting reports to QuickBooks Online.',
                values: {
                    [CONST.QUICKBOOKS_EXPORT_DATE.LAST_EXPENSE]: {
                        label: 'it Date of last expense',
                        description: 'it Date of the most recent expense on the report.',
                    },
                    [CONST.QUICKBOOKS_EXPORT_DATE.REPORT_EXPORTED]: {
                        label: 'it Export date',
                        description: 'it Date the report was exported to QuickBooks Online.',
                    },
                    [CONST.QUICKBOOKS_EXPORT_DATE.REPORT_SUBMITTED]: {
                        label: 'it Submitted date',
                        description: 'it Date the report was submitted for approval.',
                    },
                },
            },
            receivable: 'it Accounts receivable', // This is an account name that will come directly from QBO, so I don't know why we need a translation for it. It should take whatever the name of the account is in QBO. Leaving this note for CS.
            archive: 'it Accounts receivable archive', // This is an account name that will come directly from QBO, so I don't know why we need a translation for it. It should take whatever the name of the account is in QBO. Leaving this note for CS.
            exportInvoicesDescription: 'it Use this account when exporting invoices to QuickBooks Online.',
            exportCompanyCardsDescription: 'it Set how company card purchases export to QuickBooks Online.',
            vendor: 'it Vendor',
            defaultVendorDescription: 'it Set a default vendor that will apply to all credit card transactions upon export.',
            exportOutOfPocketExpensesDescription: 'it Set how out-of-pocket expenses export to QuickBooks Online.',
            exportCheckDescription: "it We'll create an itemized check for each Expensify report and send it from the bank account below.",
            exportJournalEntryDescription: "it We'll create an itemized journal entry for each Expensify report and post it to the account below.",
            exportVendorBillDescription:
                "it We'll create an itemized vendor bill for each Expensify report and add it to the account below. If this period is closed, we'll post to the 1st of the next open period.",
            account: 'it Account',
            accountDescription: 'it Choose where to post journal entries.',
            accountsPayable: 'it Accounts payable',
            accountsPayableDescription: 'it Choose where to create vendor bills.',
            bankAccount: 'it Bank account',
            notConfigured: 'it Not configured',
            bankAccountDescription: 'it Choose where to send checks from.',
            creditCardAccount: 'it Credit card account',
            companyCardsLocationEnabledDescription:
                "it QuickBooks Online doesn't support locations on vendor bill exports. As you have locations enabled on your workspace, this export option is unavailable.",
            outOfPocketTaxEnabledDescription:
                "it QuickBooks Online doesn't support taxes on journal entry exports. As you have taxes enabled on your workspace, this export option is unavailable.",
            outOfPocketTaxEnabledError: 'it Journal entries are unavailable when taxes are enabled. Please choose a different export option.',
            advancedConfig: {
                autoSyncDescription: 'it Expensify will automatically sync with QuickBooks Online every day.',
                inviteEmployees: 'it Invite employees',
                inviteEmployeesDescription: 'it Import QuickBooks Online employee records and invite employees to this workspace.',
                createEntities: 'it Auto-create entities',
                createEntitiesDescription:
                    "it Expensify will automatically create vendors in QuickBooks Online if they don't exist already, and auto-create customers when exporting invoices.",
                reimbursedReportsDescription: 'it Any time a report is paid using Expensify ACH, the corresponding bill payment will be created in the QuickBooks Online account below.',
                qboBillPaymentAccount: 'it QuickBooks bill payment account',
                qboInvoiceCollectionAccount: 'it QuickBooks invoice collections account',
                accountSelectDescription: "it Choose where to pay bills from and we'll create the payment in QuickBooks Online.",
                invoiceAccountSelectorDescription: "it Choose where to receive invoice payments and we'll create the payment in QuickBooks Online.",
            },
            accounts: {
                [CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.DEBIT_CARD]: 'it Debit card',
                [CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD]: 'it Credit card',
                [CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL]: 'it Vendor bill',
                [CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.JOURNAL_ENTRY]: 'it Journal entry',
                [CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.CHECK]: 'it Check',
                [`it ${CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.DEBIT_CARD}Description`]:
                    "it We'll automatically match the merchant name on the debit card transaction to any corresponding vendors in QuickBooks. If no vendors exist, we'll create a 'Debit Card Misc.' vendor for association.",
                [`it ${CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD}Description`]:
                    "it We'll automatically match the merchant name on the credit card transaction to any corresponding vendors in QuickBooks. If no vendors exist, we'll create a 'Credit Card Misc.' vendor for association.",
                [`it ${CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}Description`]:
                    "it We'll create an itemized vendor bill for each Expensify report with the date of the last expense, and add it to the account below. If this period is closed, we'll post to the 1st of the next open period.",
                [`it ${CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.DEBIT_CARD}AccountDescription`]: 'it Choose where to export debit card transactions.',
                [`it ${CONST.QUICKBOOKS_NON_REIMBURSABLE_EXPORT_ACCOUNT_TYPE.CREDIT_CARD}AccountDescription`]: 'it Choose where to export credit card transactions.',
                [`it ${CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}AccountDescription`]: 'it Choose a vendor to apply to all credit card transactions.',
                [`it ${CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.VENDOR_BILL}Error`]: 'it Vendor bills are unavailable when locations are enabled. Please choose a different export option.',
                [`it ${CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.CHECK}Error`]: 'it Checks are unavailable when locations are enabled. Please choose a different export option.',
                [`it ${CONST.QUICKBOOKS_REIMBURSABLE_ACCOUNT_TYPE.JOURNAL_ENTRY}Error`]:
                    'it Journal entries are unavailable when taxes are enabled. Please choose a different export option.',
            },
            noAccountsFound: 'it No accounts found',
            noAccountsFoundDescription: 'it Add the account in QuickBooks Online and sync the connection again.',
        },
        workspaceList: {
            joinNow: 'it Join now',
            askToJoin: 'it Ask to join',
        },
        xero: {
            organization: 'it Xero organization',
            organizationDescription: "it Choose the Xero organization that you'd like to import data from.",
            importDescription: 'it Choose which coding configurations to import from Xero to Expensify.',
            accountsDescription: 'it Your Xero chart of accounts will import into Expensify as categories.',
            accountsSwitchTitle: 'it Choose to import new accounts as enabled or disabled categories.',
            accountsSwitchDescription: 'it Enabled categories will be available for members to select when creating their expenses.',
            trackingCategories: 'it Tracking categories',
            trackingCategoriesDescription: 'it Choose how to handle Xero tracking categories in Expensify.',
            mapTrackingCategoryTo: ({categoryName}: CategoryNameParams) => `it Map Xero ${categoryName} to`,
            mapTrackingCategoryToDescription: ({categoryName}: CategoryNameParams) => `it Choose where to map ${categoryName} when exporting to Xero.`,
            customers: 'it Re-bill customers',
            customersDescription: 'it Choose whether to re-bill customers in Expensify. Your Xero customer contacts can be tagged to expenses, and will export to Xero as a sales invoice.',
            taxesDescription: 'it Choose how to handle Xero taxes in Expensify.',
            notImported: 'it Not imported',
            notConfigured: 'it Not configured',
            trackingCategoriesOptions: {
                [CONST.XERO_CONFIG.TRACKING_CATEGORY_OPTIONS.DEFAULT]: 'it Xero contact default',
                [CONST.XERO_CONFIG.TRACKING_CATEGORY_OPTIONS.TAG]: 'it Tags',
                [CONST.XERO_CONFIG.TRACKING_CATEGORY_OPTIONS.REPORT_FIELD]: 'it Report fields',
            },
            exportDescription: 'it Configure how Expensify data exports to Xero.',
            purchaseBill: 'it Purchase bill',
            exportDeepDiveCompanyCard:
                'it Exported expenses will post as bank transactions to the Xero bank account below, and transaction dates will match the dates on your bank statement.',
            bankTransactions: 'it Bank transactions',
            xeroBankAccount: 'it Xero bank account',
            xeroBankAccountDescription: 'it Choose where expenses will post as bank transactions.',
            exportExpensesDescription: 'it Reports will export as a purchase bill with the date and status selected below.',
            purchaseBillDate: 'it Purchase bill date',
            exportInvoices: 'it Export invoices as',
            salesInvoice: 'it Sales invoice',
            exportInvoicesDescription: 'it Sales invoices always display the date on which the invoice was sent.',
            advancedConfig: {
                autoSyncDescription: 'it Expensify will automatically sync with Xero every day.',
                purchaseBillStatusTitle: 'it Purchase bill status',
                reimbursedReportsDescription: 'it Any time a report is paid using Expensify ACH, the corresponding bill payment will be created in the Xero account below.',
                xeroBillPaymentAccount: 'it Xero bill payment account',
                xeroInvoiceCollectionAccount: 'it Xero invoice collections account',
                xeroBillPaymentAccountDescription: "it Choose where to pay bills from and we'll create the payment in Xero.",
                invoiceAccountSelectorDescription: "it Choose where to receive invoice payments and we'll create the payment in Xero.",
            },
            exportDate: {
                label: 'it Purchase bill date',
                description: 'it Use this date when exporting reports to Xero.',
                values: {
                    [CONST.XERO_EXPORT_DATE.LAST_EXPENSE]: {
                        label: 'it Date of last expense',
                        description: 'it Date of the most recent expense on the report.',
                    },
                    [CONST.XERO_EXPORT_DATE.REPORT_EXPORTED]: {
                        label: 'it Export date',
                        description: 'it Date the report was exported to Xero.',
                    },
                    [CONST.XERO_EXPORT_DATE.REPORT_SUBMITTED]: {
                        label: 'it Submitted date',
                        description: 'it Date the report was submitted for approval.',
                    },
                },
            },
            invoiceStatus: {
                label: 'it Purchase bill status',
                description: 'it Use this status when exporting purchase bills to Xero.',
                values: {
                    [CONST.XERO_CONFIG.INVOICE_STATUS.DRAFT]: 'it Draft',
                    [CONST.XERO_CONFIG.INVOICE_STATUS.AWAITING_APPROVAL]: 'it Awaiting approval',
                    [CONST.XERO_CONFIG.INVOICE_STATUS.AWAITING_PAYMENT]: 'it Awaiting payment',
                },
            },
            noAccountsFound: 'it No accounts found',
            noAccountsFoundDescription: 'it Please add the account in Xero and sync the connection again.',
        },
        sageIntacct: {
            preferredExporter: 'it Preferred exporter',
            notConfigured: 'it Not configured',
            exportDate: {
                label: 'it Export date',
                description: 'it Use this date when exporting reports to Sage Intacct.',
                values: {
                    [CONST.SAGE_INTACCT_EXPORT_DATE.LAST_EXPENSE]: {
                        label: 'it Date of last expense',
                        description: 'it Date of the most recent expense on the report.',
                    },
                    [CONST.SAGE_INTACCT_EXPORT_DATE.EXPORTED]: {
                        label: 'it Export date',
                        description: 'it Date the report was exported to Sage Intacct.',
                    },
                    [CONST.SAGE_INTACCT_EXPORT_DATE.SUBMITTED]: {
                        label: 'it Submitted date',
                        description: 'it Date the report was submitted for approval.',
                    },
                },
            },
            reimbursableExpenses: {
                description: 'it Set how out-of-pocket expenses export to Sage Intacct.',
                values: {
                    [CONST.SAGE_INTACCT_REIMBURSABLE_EXPENSE_TYPE.EXPENSE_REPORT]: 'it Expense reports',
                    [CONST.SAGE_INTACCT_REIMBURSABLE_EXPENSE_TYPE.VENDOR_BILL]: 'it Vendor bills',
                },
            },
            nonReimbursableExpenses: {
                description: 'it Set how company card purchases export to Sage Intacct.',
                values: {
                    [CONST.SAGE_INTACCT_NON_REIMBURSABLE_EXPENSE_TYPE.CREDIT_CARD_CHARGE]: 'it Credit cards',
                    [CONST.SAGE_INTACCT_NON_REIMBURSABLE_EXPENSE_TYPE.VENDOR_BILL]: 'it Vendor bills',
                },
            },
            creditCardAccount: 'it Credit card account',
            defaultVendor: 'it Default vendor',
            defaultVendorDescription: ({isReimbursable}: DefaultVendorDescriptionParams) =>
                `it Set a default vendor that will apply to ${isReimbursable ? '' : 'non-'}reimbursable expenses that don't have a matching vendor in Sage Intacct.`,
            exportDescription: 'it Configure how Expensify data exports to Sage Intacct.',
            exportPreferredExporterNote:
                'it The preferred exporter can be any workspace admin, but must also be a Domain Admin if you set different export accounts for individual company cards in Domain Settings.',
            exportPreferredExporterSubNote: 'it Once set, the preferred exporter will see reports for export in their account.',
            noAccountsFound: 'it No accounts found',
            noAccountsFoundDescription: `Please add the account in Sage Intacct and sync the connection again.`,
            autoSync: 'it Auto-sync',
            autoSyncDescription: 'it Expensify will automatically sync with Sage Intacct every day.',
            inviteEmployees: 'it Invite employees',
            inviteEmployeesDescription:
                'it Import Sage Intacct employee records and invite employees to this workspace. Your approval workflow will default to manager approval and can be furthered configured on the Members page.',
            syncReimbursedReports: 'it Sync reimbursed reports',
            syncReimbursedReportsDescription: 'it Any time a report is paid using Expensify ACH, the corresponding bill payment will be created in the Sage Intacct account below.',
            paymentAccount: 'it Sage Intacct payment account',
        },
        netsuite: {
            subsidiary: 'it Subsidiary',
            subsidiarySelectDescription: "it Choose the subsidiary in NetSuite that you'd like to import data from.",
            exportDescription: 'it Configure how Expensify data exports to NetSuite.',
            exportInvoices: 'it Export invoices to',
            journalEntriesTaxPostingAccount: 'it Journal entries tax posting account',
            journalEntriesProvTaxPostingAccount: 'it Journal entries provincial tax posting account',
            foreignCurrencyAmount: 'it Export foreign currency amount',
            exportToNextOpenPeriod: 'it Export to next open period',
            nonReimbursableJournalPostingAccount: 'it Non-reimbursable journal posting account',
            reimbursableJournalPostingAccount: 'it Reimbursable journal posting account',
            journalPostingPreference: {
                label: 'it Journal entries posting preference',
                values: {
                    [CONST.NETSUITE_JOURNAL_POSTING_PREFERENCE.JOURNALS_POSTING_INDIVIDUAL_LINE]: 'it Single, itemized entry for each report',
                    [CONST.NETSUITE_JOURNAL_POSTING_PREFERENCE.JOURNALS_POSTING_TOTAL_LINE]: 'it Single entry for each expense',
                },
            },
            invoiceItem: {
                label: 'it Invoice item',
                values: {
                    [CONST.NETSUITE_INVOICE_ITEM_PREFERENCE.CREATE]: {
                        label: 'it Create one for me',
                        description: 'it We\'ll create an "Expensify invoice line item" for you upon export (if one doesn\u2019t exist already).',
                    },
                    [CONST.NETSUITE_INVOICE_ITEM_PREFERENCE.SELECT]: {
                        label: 'it Select existing',
                        description: "it We'll tie invoices from Expensify to the item selected below.",
                    },
                },
            },
            exportDate: {
                label: 'it Export date',
                description: 'it Use this date when exporting reports to NetSuite.',
                values: {
                    [CONST.NETSUITE_EXPORT_DATE.LAST_EXPENSE]: {
                        label: 'it Date of last expense',
                        description: 'it Date of the most recent expense on the report.',
                    },
                    [CONST.NETSUITE_EXPORT_DATE.EXPORTED]: {
                        label: 'it Export date',
                        description: 'it Date the report was exported to NetSuite.',
                    },
                    [CONST.NETSUITE_EXPORT_DATE.SUBMITTED]: {
                        label: 'it Submitted date',
                        description: 'it Date the report was submitted for approval.',
                    },
                },
            },
            exportDestination: {
                values: {
                    [CONST.NETSUITE_EXPORT_DESTINATION.EXPENSE_REPORT]: {
                        label: 'it Expense reports',
                        reimbursableDescription: 'it Out-of-pocket expenses will export as expense reports to NetSuite.',
                        nonReimbursableDescription: 'it Company card expenses will export as expense reports to NetSuite.',
                    },
                    [CONST.NETSUITE_EXPORT_DESTINATION.VENDOR_BILL]: {
                        label: 'it Vendor bills',
                        reimbursableDescription:
                            'it Out-of-pocket expenses will export as bills payable to the NetSuite vendor specified below.\n' +
                            'it \n' +
                            'it If you\u2019d like to set a specific vendor for each card, go to *Settings > Domains > Company Cards*.',
                        nonReimbursableDescription:
                            'it Company card expenses will export as bills payable to the NetSuite vendor specified below.\n' +
                            'it \n' +
                            'it If you\u2019d like to set a specific vendor for each card, go to *Settings > Domains > Company Cards*.',
                    },
                    [CONST.NETSUITE_EXPORT_DESTINATION.JOURNAL_ENTRY]: {
                        label: 'it Journal entries',
                        reimbursableDescription:
                            'it Out-of-pocket expenses will export as journal entries to the NetSuite account specified below.\n' +
                            'it \n' +
                            'it If you\u2019d like to set a specific vendor for each card, go to *Settings > Domains > Company Cards*.',
                        nonReimbursableDescription:
                            'it Company card expenses will export as journal entries to the NetSuite account specified below.\n' +
                            'it \n' +
                            'it If you\u2019d like to set a specific vendor for each card, go to *Settings > Domains > Company Cards*.',
                    },
                },
            },
            advancedConfig: {
                autoSyncDescription: 'it Expensify will automatically sync with NetSuite every day.',
                reimbursedReportsDescription: 'it Any time a report is paid using Expensify ACH, the corresponding bill payment will be created in the NetSuite account below.',
                reimbursementsAccount: 'it Reimbursements account',
                reimbursementsAccountDescription: "it Choose the bank account you'll use for reimbursements, and we'll create the associated payment in NetSuite.",
                collectionsAccount: 'it Collections account',
                collectionsAccountDescription: 'it Once an invoice is marked as paid in Expensify and exported to NetSuite, it\u2019ll appear against the account below.',
                approvalAccount: 'it A/P approval account',
                approvalAccountDescription:
                    'it Choose the account that transactions will be approved against in NetSuite. If you\u2019re syncing reimbursed reports, this is also the account that bill payments will be created against.',
                defaultApprovalAccount: 'it NetSuite default',
                inviteEmployees: 'it Invite employees and set approvals',
                inviteEmployeesDescription:
                    'it Import NetSuite employee records and invite employees to this workspace. Your approval workflow will default to manager approval and can be further configured on the *Members* page.',
                autoCreateEntities: 'it Auto-create employees/vendors',
                enableCategories: 'it Enable newly imported categories',
                customFormID: 'it Custom form ID',
                customFormIDDescription:
                    'it By default, Expensify will create entries using the preferred transaction form set in NetSuite. Alternatively, you can designate a specific transaction form to be used.',
                customFormIDReimbursable: 'it Out-of-pocket expense',
                customFormIDNonReimbursable: 'it Company card expense',
                exportReportsTo: {
                    label: 'it Expense report approval level',
                    description: 'it Once an expense report is approved in Expensify and exported to NetSuite, you can set an additional level of approval in NetSuite prior to posting.',
                    values: {
                        [CONST.NETSUITE_REPORTS_APPROVAL_LEVEL.REPORTS_APPROVED_NONE]: 'it NetSuite default preference',
                        [CONST.NETSUITE_REPORTS_APPROVAL_LEVEL.REPORTS_SUPERVISOR_APPROVED]: 'it Only supervisor approved',
                        [CONST.NETSUITE_REPORTS_APPROVAL_LEVEL.REPORTS_ACCOUNTING_APPROVED]: 'it Only accounting approved',
                        [CONST.NETSUITE_REPORTS_APPROVAL_LEVEL.REPORTS_APPROVED_BOTH]: 'it Supervisor and accounting approved',
                    },
                },
                accountingMethods: {
                    label: 'it When to Export',
                    description: 'it Choose when to export the expenses:',
                    values: {
                        [COMMON_CONST.INTEGRATIONS.ACCOUNTING_METHOD.ACCRUAL]: 'it Accrual',
                        [COMMON_CONST.INTEGRATIONS.ACCOUNTING_METHOD.CASH]: 'it Cash',
                    },
                    alternateText: {
                        [COMMON_CONST.INTEGRATIONS.ACCOUNTING_METHOD.ACCRUAL]: 'it Out-of-pocket expenses will export when final approved',
                        [COMMON_CONST.INTEGRATIONS.ACCOUNTING_METHOD.CASH]: 'it Out-of-pocket expenses will export when paid',
                    },
                },
                exportVendorBillsTo: {
                    label: 'it Vendor bill approval level',
                    description: 'it Once a vendor bill is approved in Expensify and exported to NetSuite, you can set an additional level of approval in NetSuite prior to posting.',
                    values: {
                        [CONST.NETSUITE_VENDOR_BILLS_APPROVAL_LEVEL.VENDOR_BILLS_APPROVED_NONE]: 'it NetSuite default preference',
                        [CONST.NETSUITE_VENDOR_BILLS_APPROVAL_LEVEL.VENDOR_BILLS_APPROVAL_PENDING]: 'it Pending approval',
                        [CONST.NETSUITE_VENDOR_BILLS_APPROVAL_LEVEL.VENDOR_BILLS_APPROVED]: 'it Approved for posting',
                    },
                },
                exportJournalsTo: {
                    label: 'it Journal entry approval level',
                    description: 'it Once a journal entry is approved in Expensify and exported to NetSuite, you can set an additional level of approval in NetSuite prior to posting.',
                    values: {
                        [CONST.NETSUITE_JOURNALS_APPROVAL_LEVEL.JOURNALS_APPROVED_NONE]: 'it NetSuite default preference',
                        [CONST.NETSUITE_JOURNALS_APPROVAL_LEVEL.JOURNALS_APPROVAL_PENDING]: 'it Pending approval',
                        [CONST.NETSUITE_JOURNALS_APPROVAL_LEVEL.JOURNALS_APPROVED]: 'it Approved for posting',
                    },
                },
                error: {
                    customFormID: 'it Please enter a valid numeric custom form ID.',
                },
            },
            noAccountsFound: 'it No accounts found',
            noAccountsFoundDescription: 'it Please add the account in NetSuite and sync the connection again.',
            noVendorsFound: 'it No vendors found',
            noVendorsFoundDescription: 'it Please add vendors in NetSuite and sync the connection again.',
            noItemsFound: 'it No invoice items found',
            noItemsFoundDescription: 'it Please add invoice items in NetSuite and sync the connection again.',
            noSubsidiariesFound: 'it No subsidiaries found',
            noSubsidiariesFoundDescription: 'it Please add a subsidiary in NetSuite and sync the connection again.',
            tokenInput: {
                title: 'it NetSuite setup',
                formSteps: {
                    installBundle: {
                        title: 'it Install the Expensify bundle',
                        description: 'it In NetSuite, go to *Customization > SuiteBundler > Search & Install Bundles* > search for "Expensify" > install the bundle.',
                    },
                    enableTokenAuthentication: {
                        title: 'it Enable token-based authentication',
                        description: 'it In NetSuite, go to *Setup > Company > Enable Features > SuiteCloud* > enable *token-based authentication*.',
                    },
                    enableSoapServices: {
                        title: 'it Enable SOAP web services',
                        description: 'it In NetSuite, go to *Setup > Company > Enable Features > SuiteCloud* > enable *SOAP Web Services*.',
                    },
                    createAccessToken: {
                        title: 'it Create an access token',
                        description:
                            'it In NetSuite, go to *Setup > Users/Roles > Access Tokens* > create an access token for the "Expensify" app and either the "Expensify Integration" or "Administrator" role.\n\n*Important:* Make sure you save the *Token ID* and *Token Secret* from this step. You\'ll need it for the next step.',
                    },
                    enterCredentials: {
                        title: 'it Enter your NetSuite credentials',
                        formInputs: {
                            netSuiteAccountID: 'it NetSuite Account ID',
                            netSuiteTokenID: 'it Token ID',
                            netSuiteTokenSecret: 'it Token Secret',
                        },
                        netSuiteAccountIDDescription: 'it In NetSuite, go to *Setup > Integration > SOAP Web Services Preferences*.',
                    },
                },
            },
            import: {
                expenseCategories: 'it Expense categories',
                expenseCategoriesDescription: 'it Your NetSuite expense categories will import into Expensify as categories.',
                crossSubsidiaryCustomers: 'it Cross-subsidiary customers/projects',
                importFields: {
                    departments: {
                        title: 'it Departments',
                        subtitle: 'it Choose how to handle the NetSuite *departments* in Expensify.',
                    },
                    classes: {
                        title: 'it Classes',
                        subtitle: 'it Choose how to handle *classes* in Expensify.',
                    },
                    locations: {
                        title: 'it Locations',
                        subtitle: 'it Choose how to handle *locations* in Expensify.',
                    },
                },
                customersOrJobs: {
                    title: 'it Customers/projects',
                    subtitle: 'it Choose how to handle NetSuite *customers* and *projects* in Expensify.',
                    importCustomers: 'it Import customers',
                    importJobs: 'it Import projects',
                    customers: 'it customers',
                    jobs: 'it projects',
                    label: ({importFields, importType}: CustomersOrJobsLabelParams) => `it ${importFields.join(' and ')}, ${importType}`,
                },
                importTaxDescription: 'it Import tax groups from NetSuite.',
                importCustomFields: {
                    chooseOptionBelow: 'it Choose an option below:',
                    label: ({importedTypes}: ImportedTypesParams) => `it Imported as ${importedTypes.join(' and ')}`,
                    requiredFieldError: ({fieldName}: RequiredFieldParams) => `it Please enter the ${fieldName}`,
                    customSegments: {
                        title: 'it Custom segments/records',
                        addText: 'it Add custom segment/record',
                        recordTitle: 'it Custom segment/record',
                        helpLink: CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_SEGMENTS,
                        helpLinkText: 'it View detailed instructions',
                        helpText: 'it  on configuring custom segments/records.',
                        emptyTitle: 'it Add a custom segment or custom record',
                        fields: {
                            segmentName: 'it Name',
                            internalID: 'it Internal ID',
                            scriptID: 'it Script ID',
                            customRecordScriptID: 'it Transaction column ID',
                            mapping: 'it Displayed as',
                        },
                        removeTitle: 'it Remove custom segment/record',
                        removePrompt: 'it Are you sure you want to remove this custom segment/record?',
                        addForm: {
                            customSegmentName: 'it custom segment name',
                            customRecordName: 'it custom record name',
                            segmentTitle: 'it Custom segment',
                            customSegmentAddTitle: 'it Add custom segment',
                            customRecordAddTitle: 'it Add custom record',
                            recordTitle: 'it Custom record',
                            segmentRecordType: 'it Do you want to add a custom segment or a custom record?',
                            customSegmentNameTitle: "it What's the custom segment name?",
                            customRecordNameTitle: "it What's the custom record name?",
                            customSegmentNameFooter: `it You can find custom segment names in NetSuite under *Customizations > Links, Records & Fields > Custom Segments* page.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_SEGMENTS})_.`,
                            customRecordNameFooter: `it You can find custom record names in NetSuite by entering the "Transaction Column Field" in global search.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_SEGMENTS})_.`,
                            customSegmentInternalIDTitle: "it What's the internal ID?",
                            customSegmentInternalIDFooter: `it First, make sure you've enabled internal IDs in NetSuite under *Home > Set Preferences > Show Internal ID.*\n\nYou can find custom segment internal IDs in NetSuite under:\n\n1. *Customization > Lists, Records, & Fields > Custom Segments*.\n2. Click into a custom segment.\n3. Click the hyperlink next to *Custom Record Type*.\n4. Find the internal ID in the table at the bottom.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_LISTS})_.`,
                            customRecordInternalIDFooter: `it You can find custom record internal IDs in NetSuite by following these steps:\n\n1. Enter "Transaction Line Fields" in global search.\n2. Click into a custom record.\n3. Find the internal ID on the left-hand side.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_SEGMENTS})_.`,
                            customSegmentScriptIDTitle: "it What's the script ID?",
                            customSegmentScriptIDFooter: `it You can find custom segment script IDs in NetSuite under: \n\n1. *Customization > Lists, Records, & Fields > Custom Segments*.\n2. Click into a custom segment.\n3. Click the *Application and Sourcing* tab near the bottom, then:\n    a. If you want to display the custom segment as a *tag* (at the line-item level) in Expensify, click the *Transaction Columns* sub-tab and use the *Field ID*.\n    b. If you want to display the custom segment as a *report field* (at the report level) in Expensify, click the *Transactions* sub-tab and use the *Field ID*.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_LISTS})_.`,
                            customRecordScriptIDTitle: "it What's the transaction column ID?",
                            customRecordScriptIDFooter: `it You can find custom record script IDs in NetSuite under:\n\n1. Enter "Transaction Line Fields" in global search.\n2. Click into a custom record.\n3. Find the script ID on the left-hand side.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_SEGMENTS})_.`,
                            customSegmentMappingTitle: 'it How should this custom segment be displayed in Expensify?',
                            customRecordMappingTitle: 'it How should this custom record be displayed in Expensify?',
                        },
                        errors: {
                            uniqueFieldError: ({fieldName}: RequiredFieldParams) => `it A custom segment/record with this ${fieldName?.toLowerCase()} already exists.`,
                        },
                    },
                    customLists: {
                        title: 'it Custom lists',
                        addText: 'it Add custom list',
                        recordTitle: 'it Custom list',
                        helpLink: CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_LISTS,
                        helpLinkText: 'it View detailed instructions',
                        helpText: 'it  on configuring custom lists.',
                        emptyTitle: 'it Add a custom list',
                        fields: {
                            listName: 'it Name',
                            internalID: 'it Internal ID',
                            transactionFieldID: 'it Transaction field ID',
                            mapping: 'it Displayed as',
                        },
                        removeTitle: 'it Remove custom list',
                        removePrompt: 'it Are you sure you want to remove this custom list?',
                        addForm: {
                            listNameTitle: 'it Choose a custom list',
                            transactionFieldIDTitle: "it What's the transaction field ID?",
                            transactionFieldIDFooter: `it You can find transaction field IDs in NetSuite by following these steps:\n\n1. Enter "Transaction Line Fields" in global search.\n2. Click into a custom list.\n3. Find the transaction field ID on the left-hand side.\n\n_For more detailed instructions, [visit our help site](${CONST.NETSUITE_IMPORT.HELP_LINKS.CUSTOM_LISTS})_.`,
                            mappingTitle: 'it How should this custom list be displayed in Expensify?',
                        },
                        errors: {
                            uniqueTransactionFieldIDError: `A custom list with this transaction field ID already exists.`,
                        },
                    },
                },
                importTypes: {
                    [CONST.INTEGRATION_ENTITY_MAP_TYPES.NETSUITE_DEFAULT]: {
                        label: 'it NetSuite employee default',
                        description: 'it Not imported into Expensify, applied on export',
                        footerContent: ({importField}: ImportFieldParams) =>
                            `it If you use ${importField} in NetSuite, we'll apply the default set on the employee record upon export to Expense Report or Journal Entry.`,
                    },
                    [CONST.INTEGRATION_ENTITY_MAP_TYPES.TAG]: {
                        label: 'it Tags',
                        description: 'it Line-item level',
                        footerContent: ({importField}: ImportFieldParams) => `it ${startCase(importField)} will be selectable for each individual expense on an employee's report.`,
                    },
                    [CONST.INTEGRATION_ENTITY_MAP_TYPES.REPORT_FIELD]: {
                        label: 'it Report fields',
                        description: 'it Report level',
                        footerContent: ({importField}: ImportFieldParams) => `it ${startCase(importField)} selection will apply to all expense on an employee's report.`,
                    },
                },
            },
        },
        nsqs: {
            setup: {
                title: 'it NSQS setup',
                description: 'it Enter your NSQS account ID',
                formInputs: {
                    netSuiteAccountID: 'it NSQS Account ID',
                },
            },
            import: {
                expenseCategories: 'it Expense categories',
                expenseCategoriesDescription: 'it NSQS expense categories import into Expensify as categories.',
                importTypes: {
                    [CONST.NSQS_INTEGRATION_ENTITY_MAP_TYPES.TAG]: {
                        label: 'it Tags',
                        description: 'it Line-item level',
                    },
                    [CONST.NSQS_INTEGRATION_ENTITY_MAP_TYPES.REPORT_FIELD]: {
                        label: 'it Report fields',
                        description: 'it Report level',
                    },
                },
                importFields: {
                    customers: {
                        title: 'it Customers',
                        subtitle: 'it Choose how to handle NSQS *customers* in Expensify.',
                    },
                    projects: {
                        title: 'it Projects',
                        subtitle: 'it Choose how to handle NSQS *projects* in Expensify.',
                    },
                },
            },
            export: {
                description: 'it Configure how Expensify data exports to NSQS.',
                exportDate: {
                    label: 'it Export date',
                    description: 'it Use this date when exporting reports to NSQS.',
                    values: {
                        [CONST.NSQS_EXPORT_DATE.LAST_EXPENSE]: {
                            label: 'it Date of last expense',
                            description: 'it Date of the most recent expense on the report.',
                        },
                        [CONST.NSQS_EXPORT_DATE.EXPORTED]: {
                            label: 'it Export date',
                            description: 'it Date the report was exported to NSQS.',
                        },
                        [CONST.NSQS_EXPORT_DATE.SUBMITTED]: {
                            label: 'it Submitted date',
                            description: 'it Date the report was submitted for approval.',
                        },
                    },
                },
                expense: 'it Expense',
                reimbursableExpenses: 'it Export reimbursable expenses as',
                nonReimbursableExpenses: 'it Export non-reimbursable expenses as',
            },
            advanced: {
                autoSyncDescription: 'it Sync NSQS and Expensify automatically, every day. Export finalized report in realtime',
                defaultApprovalAccount: 'it NSQS default',
                approvalAccount: 'it A/P approval account',
                approvalAccountDescription:
                    'it Choose the account that transactions will be approved against in NSQS. If you\u2019re syncing reimbursed reports, this is also the account that bill payments will be created against.',
            },
        },
        intacct: {
            sageIntacctSetup: 'it Sage Intacct setup',
            prerequisitesTitle: 'it Before you connect...',
            downloadExpensifyPackage: 'it Download the Expensify package for Sage Intacct',
            followSteps: 'it Follow the steps in our How-to: Connect to Sage Intacct instructions',
            enterCredentials: 'it Enter your Sage Intacct credentials',
            entity: 'it Entity',
            employeeDefault: 'it Sage Intacct employee default',
            employeeDefaultDescription: "it The employee's default department will be applied to their expenses in Sage Intacct if one exists.",
            displayedAsTagDescription: "it Department will be selectable for each individual expense on an employee's report.",
            displayedAsReportFieldDescription: "it Department selection will apply to all expenses on an employee's report.",
            toggleImportTitleFirstPart: 'it Choose how to handle Sage Intacct ',
            toggleImportTitleSecondPart: 'it  in Expensify.',
            expenseTypes: 'it Expense types',
            expenseTypesDescription: 'it Your Sage Intacct expense types will import into Expensify as categories.',
            importTaxDescription: 'it Import purchase tax rate from Sage Intacct.',
            userDefinedDimensions: 'it User-defined dimensions',
            addUserDefinedDimension: 'it Add user-defined dimension',
            integrationName: 'it Integration name',
            dimensionExists: 'it A dimension with this name already exists.',
            removeDimension: 'it Remove user-defined dimension',
            removeDimensionPrompt: 'it Are you sure you want to remove this user-defined dimension?',
            userDefinedDimension: 'it User-defined dimension',
            addAUserDefinedDimension: 'it Add a user-defined dimension',
            detailedInstructionsLink: 'it View detailed instructions',
            detailedInstructionsRestOfSentence: 'it  on adding user-defined dimensions.',
            userDimensionsAdded: () => ({
                one: 'it 1 UDD added',
                other: (count: number) => `it ${count} UDDs added`,
            }),
            mappingTitle: ({mappingName}: IntacctMappingTitleParams) => {
                switch (mappingName) {
                    case CONST.SAGE_INTACCT_CONFIG.MAPPINGS.DEPARTMENTS:
                        return 'it departments';
                    case CONST.SAGE_INTACCT_CONFIG.MAPPINGS.CLASSES:
                        return 'it classes';
                    case CONST.SAGE_INTACCT_CONFIG.MAPPINGS.LOCATIONS:
                        return 'it locations';
                    case CONST.SAGE_INTACCT_CONFIG.MAPPINGS.CUSTOMERS:
                        return 'it customers';
                    case CONST.SAGE_INTACCT_CONFIG.MAPPINGS.PROJECTS:
                        return 'it projects (jobs)';
                    default:
                        return 'it mappings';
                }
            },
        },
        multiConnectionSelector: {
            title: ({connectionName}: ConnectionNameParams) => `it ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName]} setup`,
            description: ({connectionName}: ConnectionNameParams) => `it Select your ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName]} version to continue.`,
        },
        type: {
            free: 'it Free',
            control: 'it Control',
            collect: 'it Collect',
        },
        companyCards: {
            addCards: 'it Add cards',
            selectCards: 'it Select cards',
            addNewCard: {
                other: 'it Other',
                cardProviders: {
                    gl1025: 'it American Express Corporate Cards',
                    cdf: 'it Mastercard Commercial Cards',
                    vcf: 'it Visa Commercial Cards',
                    stripe: 'it Stripe Cards',
                },
                yourCardProvider: `Who's your card provider?`,
                whoIsYourBankAccount: 'it Who\u2019s your bank?',
                howDoYouWantToConnect: 'it How do you want to connect to your bank?',
                learnMoreAboutOptions: {
                    text: 'it Learn more about these ',
                    linkText: 'it options.',
                },
                commercialFeedDetails: 'it Requires setup with your bank. This is typically used by larger companies and is often the best option if you qualify.',
                directFeedDetails: 'it The simplest approach. Connect right away using your master credentials. This method is most common.',
                enableFeed: {
                    title: ({provider}: GoBackMessageParams) => `it Enable your ${provider} feed`,
                    heading: 'it We have a direct integration with your card issuer and can import your transaction data into Expensify quickly and accurately.\n\nTo get started, simply:',
                    visa: 'it We have global integrations with Visa, though eligibility varies by bank and card program.\n\nTo get started, simply:',
                    mastercard: 'it We have global integrations with Mastercard, though eligibility varies by bank and card program.\n\nTo get started, simply:',
                    vcf: `it 1. Visit [this help article](${CONST.COMPANY_CARDS_HELP}) for detailed instructions on how to set up your Visa Commercial Cards.\n\n2. [Contact your bank](${CONST.COMPANY_CARDS_HELP}) to verify they support a commercial feed for your program, and ask them to enable it.\n\n3. *Once the feed is enabled and you have its details, continue to the next screen.*`,
                    gl1025: `it 1. Visit [this help article](${CONST.COMPANY_CARDS_HELP}) to find out if American Express can enable a commercial feed for your program.\n\n2. Once the feed is enabled, Amex will send you a production letter.\n\n3. *Once you have the feed information, continue to the next screen.*`,
                    cdf: `it 1. Visit [this help article](${CONST.COMPANY_CARDS_HELP}) for detailed instructions on how to set up your Mastercard Commercial Cards.\n\n 2. [Contact your bank](${CONST.COMPANY_CARDS_HELP}) to verify they support a commercial feed for your program, and ask them to enable it.\n\n3. *Once the feed is enabled and you have its details, continue to the next screen.*`,
                    stripe: `it 1. Visit Stripe\u2019s Dashboard, and go to [Settings](${CONST.COMPANY_CARDS_STRIPE_HELP}).\n\n2. Under Product Integrations, click Enable next to Expensify.\n\n3. Once the feed is enabled, click Submit below and we\u2019ll work on adding it.`,
                },
                whatBankIssuesCard: 'it What bank issues these cards?',
                enterNameOfBank: 'it Enter name of bank',
                feedDetails: {
                    vcf: {
                        title: 'it What are the Visa feed details?',
                        processorLabel: 'it Processor ID',
                        bankLabel: 'it Financial institution (bank) ID',
                        companyLabel: 'it Company ID',
                        helpLabel: 'it Where do I find these IDs?',
                    },
                    gl1025: {
                        title: `What's the Amex delivery file name?`,
                        fileNameLabel: 'it Delivery file name',
                        helpLabel: 'it Where do I find the delivery file name?',
                    },
                    cdf: {
                        title: `What's the Mastercard distribution ID?`,
                        distributionLabel: 'it Distribution ID',
                        helpLabel: 'it Where do I find the distribution ID?',
                    },
                },
                amexCorporate: 'it Select this if the front of your cards say \u201CCorporate\u201D',
                amexBusiness: 'it Select this if the front of your cards say \u201CBusiness\u201D',
                amexPersonal: 'it Select this if your cards are personal',
                error: {
                    pleaseSelectProvider: 'it Please select a card provider before continuing.',
                    pleaseSelectBankAccount: 'it Please select a bank account before continuing.',
                    pleaseSelectBank: 'it Please select a bank before continuing.',
                    pleaseSelectFeedType: 'it Please select a feed type before continuing.',
                },
            },
            assignCard: 'it Assign card',
            cardNumber: 'it Card number',
            commercialFeed: 'it Commercial feed',
            feedName: ({feedName}: CompanyCardFeedNameParams) => `it ${feedName} cards`,
            directFeed: 'it Direct feed',
            whoNeedsCardAssigned: 'it Who needs a card assigned?',
            chooseCard: 'it Choose a card',
            chooseCardFor: ({assignee, feed}: AssignCardParams) => `it Choose a card for ${assignee} from the ${feed} cards feed.`,
            noActiveCards: 'it No active cards on this feed',
            somethingMightBeBroken: 'it Or something might be broken. Either way, if you have any questions, just',
            contactConcierge: 'it contact Concierge',
            chooseTransactionStartDate: 'it Choose a transaction start date',
            startDateDescription: "it We'll import all transaction from this date onwards. If no date is specified, we\u2019ll go as far back as your bank allows.",
            fromTheBeginning: 'it From the beginning',
            customStartDate: 'it Custom start date',
            letsDoubleCheck: 'it Let\u2019s double check that everything looks right.',
            confirmationDescription: 'it We\u2019ll begin importing transactions immediately.',
            cardholder: 'it Cardholder',
            card: 'it Card',
            cardName: 'it Card name',
            brokenConnectionErrorFirstPart: `Card feed connection is broken. Please `,
            brokenConnectionErrorLink: 'it log into your bank ',
            brokenConnectionErrorSecondPart: 'it so we can establish the connection again.',
            assignedCard: ({assignee, link}: AssignedCardParams) => `it assigned ${assignee} a ${link}! Imported transactions will appear in this chat.`,
            companyCard: 'it company card',
            chooseCardFeed: 'it Choose card feed',
        },
        expensifyCard: {
            issueAndManageCards: 'it Issue and manage your Expensify Cards',
            getStartedIssuing: 'it Get started by issuing your first virtual or physical card.',
            verificationInProgress: 'it Verification in progress...',
            verifyingTheDetails: "it We're verifying a few details. Concierge will let you know when Expensify Cards are ready to issue.",
            disclaimer:
                'it The Expensify Visa\u00AE Commercial Card is issued by The Bancorp Bank, N.A., Member FDIC, pursuant to a license from Visa U.S.A. Inc. and may not be used at all merchants that accept Visa cards. Apple\u00AE and the Apple logo\u00AE are trademarks of Apple Inc., registered in the U.S. and other countries. App Store is a service mark of Apple Inc. Google Play and the Google Play logo are trademarks of Google LLC.',
            issueCard: 'it Issue card',
            newCard: 'it New card',
            name: 'it Name',
            lastFour: 'it Last 4',
            limit: 'it Limit',
            currentBalance: 'it Current balance',
            currentBalanceDescription: 'it Current balance is the sum of all posted Expensify Card transactions that have occurred since the last settlement date.',
            balanceWillBeSettledOn: ({settlementDate}: SettlementDateParams) => `it Balance will be settled on ${settlementDate}`,
            settleBalance: 'it Settle balance',
            cardLimit: 'it Card limit',
            remainingLimit: 'it Remaining limit',
            requestLimitIncrease: 'it Request limit increase',
            remainingLimitDescription:
                'it We consider a number of factors when calculating your remaining limit: your tenure as a customer, the business-related information you provided during signup, and the available cash in your business bank account. Your remaining limit can fluctuate on a daily basis.',
            earnedCashback: 'it Cash back',
            earnedCashbackDescription: 'it Cash back balance is based on settled monthly Expensify Card spend across your workspace.',
            issueNewCard: 'it Issue new card',
            finishSetup: 'it Finish setup',
            chooseBankAccount: 'it Choose bank account',
            chooseExistingBank: 'it Choose an existing business bank account to pay your Expensify Card balance, or add a new bank account',
            accountEndingIn: 'it Account ending in',
            addNewBankAccount: 'it Add a new bank account',
            settlementAccount: 'it Settlement account',
            settlementAccountDescription: 'it Choose an account to pay your Expensify Card balance.',
            settlementAccountInfoPt1: 'it Make sure this account matches your',
            settlementAccountInfoPt2: 'it so Continuous Reconciliation works properly.',
            reconciliationAccount: 'it Reconciliation account',
            settlementFrequency: 'it Settlement frequency',
            settlementFrequencyDescription: 'it Choose how often you\u2019ll pay your Expensify Card balance.',
            settlementFrequencyInfo:
                'it If you\u2019d like to switch to monthly settlement, you\u2019ll need to connect your bank account via Plaid and have a positive 90-day balance history.',
            frequency: {
                daily: 'it Daily',
                monthly: 'it Monthly',
            },
            cardDetails: 'it Card details',
            virtual: 'it Virtual',
            physical: 'it Physical',
            deactivate: 'it Deactivate card',
            changeCardLimit: 'it Change card limit',
            changeLimit: 'it Change limit',
            smartLimitWarning: ({limit}: CharacterLimitParams) =>
                `it If you change this card\u2019s limit to ${limit}, new transactions will be declined until you approve more expenses on the card.`,
            monthlyLimitWarning: ({limit}: CharacterLimitParams) => `it If you change this card\u2019s limit to ${limit}, new transactions will be declined until next month.`,
            fixedLimitWarning: ({limit}: CharacterLimitParams) => `it If you change this card\u2019s limit to ${limit}, new transactions will be declined.`,
            changeCardLimitType: 'it Change card limit type',
            changeLimitType: 'it Change limit type',
            changeCardSmartLimitTypeWarning: ({limit}: CharacterLimitParams) =>
                `it If you change this card's limit type to Smart Limit, new transactions will be declined because the ${limit} unapproved limit has already been reached.`,
            changeCardMonthlyLimitTypeWarning: ({limit}: CharacterLimitParams) =>
                `it If you change this card's limit type to Monthly, new transactions will be declined because the ${limit} monthly limit has already been reached.`,
            addShippingDetails: 'it Add shipping details',
            issuedCard: ({assignee}: AssigneeParams) => `it issued ${assignee} an Expensify Card! The card will arrive in 2-3 business days.`,
            issuedCardNoShippingDetails: ({assignee}: AssigneeParams) => `it issued ${assignee} an Expensify Card! The card will be shipped once shipping details are added.`,
            issuedCardVirtual: ({assignee, link}: IssueVirtualCardParams) => `it issued ${assignee} a virtual ${link}! The card can be used right away.`,
            addedShippingDetails: ({assignee}: AssigneeParams) => `it ${assignee} added shipping details. Expensify Card will arrive in 2-3 business days.`,
            verifyingHeader: 'it Verifying',
            bankAccountVerifiedHeader: 'it Bank account verified',
            verifyingBankAccount: 'it Verifying bank account...',
            verifyingBankAccountDescription: 'it Please wait while we confirm that this account can be used to issue Expensify Cards.',
            bankAccountVerified: 'it Bank account verified!',
            bankAccountVerifiedDescription: 'it You can now issue Expensify Cards to your workspace members.',
            oneMoreStep: 'it One more step...',
            oneMoreStepDescription: 'it Looks like we need to manually verify your bank account. Please head on over to Concierge where your instructions are waiting for you.',
            gotIt: 'it Got it',
            goToConcierge: 'it Go to Concierge',
        },
        categories: {
            deleteCategories: 'it Delete categories',
            deleteCategoriesPrompt: 'it Are you sure you want to delete these categories?',
            deleteCategory: 'it Delete category',
            deleteCategoryPrompt: 'it Are you sure you want to delete this category?',
            disableCategories: 'it Disable categories',
            disableCategory: 'it Disable category',
            enableCategories: 'it Enable categories',
            enableCategory: 'it Enable category',
            defaultSpendCategories: 'it Default spend categories',
            spendCategoriesDescription: 'it Customize how merchant spend is categorized for credit card transactions and scanned receipts.',
            deleteFailureMessage: 'it An error occurred while deleting the category, please try again.',
            categoryName: 'it Category name',
            requiresCategory: 'it Members must categorize all expenses',
            needCategoryForExportToIntegration: ({connectionName}: NeedCategoryForExportToIntegrationParams) =>
                `it All expenses must be categorized in order to export to ${connectionName}.`,
            subtitle: 'it Get a better overview of where money is being spent. Use our default categories or add your own.',
            emptyCategories: {
                title: "it You haven't created any categories",
                subtitle: 'it Add a category to organize your spend.',
            },
            updateFailureMessage: 'it An error occurred while updating the category, please try again.',
            createFailureMessage: 'it An error occurred while creating the category, please try again.',
            addCategory: 'it Add category',
            editCategory: 'it Edit category',
            editCategories: 'it Edit categories',
            categoryRequiredError: 'it Category name is required.',
            existingCategoryError: 'it A category with this name already exists.',
            invalidCategoryName: 'it Invalid category name.',
            importedFromAccountingSoftware: 'it The categories below are imported from your',
            payrollCode: 'it Payroll code',
            updatePayrollCodeFailureMessage: 'it An error occurred while updating the payroll code, please try again.',
            glCode: 'it GL code',
            updateGLCodeFailureMessage: 'it An error occurred while updating the GL code, please try again.',
            importCategories: 'it Import categories',
        },
        moreFeatures: {
            subtitle: 'it Use the toggles below to enable more features as you grow. Each feature will appear in the navigation menu for further customization.',
            spendSection: {
                title: 'it Spend',
                subtitle: 'it Enable functionality that helps you scale your team.',
            },
            manageSection: {
                title: 'it Manage',
                subtitle: 'it Add controls that help keep spend within budget.',
            },
            earnSection: {
                title: 'it Earn',
                subtitle: 'it Streamline your revenue and get paid faster.',
            },
            organizeSection: {
                title: 'it Organize',
                subtitle: 'it Group and analyze spend, record every tax paid.',
            },
            integrateSection: {
                title: 'it Integrate',
                subtitle: 'it Connect Expensify to popular financial products.',
            },
            distanceRates: {
                title: 'it Distance rates',
                subtitle: 'it Add, update, and enforce rates.',
            },
            perDiem: {
                title: 'it Per diem',
                subtitle: 'it Set Per diem rates to control daily employee spend.',
            },
            expensifyCard: {
                title: 'it Expensify Card',
                subtitle: 'it Gain insights and control over spend.',
                disableCardTitle: 'it Disable Expensify Card',
                disableCardPrompt: 'it You can\u2019t disable the Expensify Card because it\u2019s already in use. Reach out to Concierge for next steps.',
                disableCardButton: 'it Chat with Concierge',
                feed: {
                    title: 'it Get the Expensify Card',
                    subTitle: 'it Streamline your business expenses and save up to 50% on your Expensify bill, plus:',
                    features: {
                        cashBack: 'it Cash back on every US purchase',
                        unlimited: 'it Unlimited virtual cards',
                        spend: 'it Spend controls and custom limits',
                    },
                    ctaTitle: 'it Issue new card',
                },
            },
            companyCards: {
                title: 'it Company cards',
                subtitle: 'it Import spend from existing company cards.',
                feed: {
                    title: 'it Import company cards',
                    features: {
                        support: 'it Support for all major card providers',
                        assignCards: 'it Assign cards to the entire team',
                        automaticImport: 'it Automatic transaction import',
                    },
                },
                disableCardTitle: 'it Disable company cards',
                disableCardPrompt: 'it You can\u2019t disable company cards because this feature is in use. Reach out to the Concierge for next steps.',
                disableCardButton: 'it Chat with Concierge',
                cardDetails: 'it Card details',
                cardNumber: 'it Card number',
                cardholder: 'it Cardholder',
                cardName: 'it Card name',
                integrationExport: ({integration, type}: IntegrationExportParams) => (integration && type ? `it ${integration} ${type.toLowerCase()} export` : `it ${integration} export`),
                integrationExportTitleFirstPart: ({integration}: IntegrationExportParams) => `it Choose the ${integration} account where transactions should be exported.`,
                integrationExportTitlePart: 'it Select a different',
                integrationExportTitleLinkPart: 'it export option',
                integrationExportTitleSecondPart: 'it to change the available accounts.',
                lastUpdated: 'it Last updated',
                transactionStartDate: 'it Transaction start date',
                updateCard: 'it Update card',
                unassignCard: 'it Unassign card',
                unassign: 'it Unassign',
                unassignCardDescription: 'it Unassign this card will remove all transactions on draft reports from the cardholder\u2019s account.',
                assignCard: 'it Assign card',
                cardFeedName: 'it Card feed name',
                cardFeedNameDescription: 'it Give the card feed a unique name so you can tell it apart from the others.',
                cardFeedTransaction: 'it Delete transactions',
                cardFeedTransactionDescription: 'it Choose whether cardholders can delete card transactions. New transactions will follow these rules.',
                cardFeedRestrictDeletingTransaction: 'it Restrict deleting transactions',
                cardFeedAllowDeletingTransaction: 'it Allow deleting transactions',
                removeCardFeed: 'it Remove card feed',
                removeCardFeedTitle: ({feedName}: CompanyCardFeedNameParams) => `it Remove ${feedName} feed`,
                removeCardFeedDescription: 'it Are you sure you want to remove this card feed? This will unassign all cards.',
                error: {
                    feedNameRequired: 'it Card feed name is required.',
                },
                corporate: 'it Restrict deleting transactions',
                personal: 'it Allow deleting transactions',
                setFeedNameDescription: 'it Give the card feed a unique name so you can tell it apart from the others.',
                setTransactionLiabilityDescription: 'it When enabled, cardholders can delete card transactions. New transactions will follow this rule.',
                emptyAddedFeedTitle: 'it Assign company cards',
                emptyAddedFeedDescription: 'it Get started by assigning your first card to a member.',
                pendingFeedTitle: `We're reviewing your request...`,
                pendingFeedDescription: `We're currently reviewing your feed details. Once that's done, we'll reach out to you via`,
                pendingBankTitle: 'it Check your browser window',
                pendingBankDescription: ({bankName}: CompanyCardBankName) => `it Please connect to ${bankName} via your browser window that just opened. If one didn\u2019t open, `,
                pendingBankLink: 'it please click here.',
                giveItNameInstruction: 'it Give the card a name that sets it apart from others.',
                updating: 'it Updating...',
                noAccountsFound: 'it No accounts found',
                defaultCard: 'it Default card',
                noAccountsFoundDescription: ({connection}: ConnectionParams) => `it Please add the account in ${connection} and sync the connection again.`,
                expensifyCardBannerTitle: 'it Get the Expensify Card',
                expensifyCardBannerSubtitle: 'it Enjoy cash back on every US purchase, up to 50% off your Expensify bill, unlimited virtual cards, and so much more.',
                expensifyCardBannerLearnMoreButton: 'it Learn more',
            },
            workflows: {
                title: 'it Workflows',
                subtitle: 'it Configure how spend is approved and paid.',
            },
            invoices: {
                title: 'it Invoices',
                subtitle: 'it Send and receive invoices.',
            },
            categories: {
                title: 'it Categories',
                subtitle: 'it Track and organize spend.',
            },
            tags: {
                title: 'it Tags',
                subtitle: 'it Classify costs and track billable expenses.',
            },
            taxes: {
                title: 'it Taxes',
                subtitle: 'it Document and reclaim eligible taxes.',
            },
            reportFields: {
                title: 'it Report fields',
                subtitle: 'it Set up custom fields for spend.',
            },
            connections: {
                title: 'it Accounting',
                subtitle: 'it Sync your chart of accounts and more.',
            },
            connectionsWarningModal: {
                featureEnabledTitle: 'it Not so fast...',
                featureEnabledText: "it To enable or disable this feature, you'll need to change your accounting import settings.",
                disconnectText: "it To disable accounting, you'll need to disconnect your accounting connection from your workspace.",
                manageSettings: 'it Manage settings',
            },
            rules: {
                title: 'it Rules',
                subtitle: 'it Require receipts, flag high spend, and more.',
            },
        },
        reportFields: {
            addField: 'it Add field',
            delete: 'it Delete field',
            deleteFields: 'it Delete fields',
            deleteConfirmation: 'it Are you sure you want to delete this report field?',
            deleteFieldsConfirmation: 'it Are you sure you want to delete these report fields?',
            emptyReportFields: {
                title: "it You haven't created any report fields",
                subtitle: 'it Add a custom field (text, date, or dropdown) that appears on reports.',
            },
            subtitle: "it Report fields apply to all spend and can be helpful when you'd like to prompt for extra information.",
            disableReportFields: 'it Disable report fields',
            disableReportFieldsConfirmation: 'it Are you sure? Text and date fields will be deleted, and lists will be disabled.',
            importedFromAccountingSoftware: 'it The report fields below are imported from your',
            textType: 'it Text',
            dateType: 'it Date',
            dropdownType: 'it List',
            textAlternateText: 'it Add a field for free text input.',
            dateAlternateText: 'it Add a calendar for date selection.',
            dropdownAlternateText: 'it Add a list of options to choose from.',
            nameInputSubtitle: 'it Choose a name for the report field.',
            typeInputSubtitle: 'it Choose what type of report field to use.',
            initialValueInputSubtitle: 'it Enter a starting value to show in the report field.',
            listValuesInputSubtitle: 'it These values will appear in your report field dropdown. Enabled values can be selected by members.',
            listInputSubtitle: 'it These values will appear in your report field list. Enabled values can be selected by members.',
            deleteValue: 'it Delete value',
            deleteValues: 'it Delete values',
            disableValue: 'it Disable value',
            disableValues: 'it Disable values',
            enableValue: 'it Enable value',
            enableValues: 'it Enable values',
            emptyReportFieldsValues: {
                title: "it You haven't created any list values",
                subtitle: 'it Add custom values to appear on reports.',
            },
            deleteValuePrompt: 'it Are you sure you want to delete this list value?',
            deleteValuesPrompt: 'it Are you sure you want to delete these list values?',
            listValueRequiredError: 'it Please enter a list value name',
            existingListValueError: 'it A list value with this name already exists',
            editValue: 'it Edit value',
            listValues: 'it List values',
            addValue: 'it Add value',
            existingReportFieldNameError: 'it A report field with this name already exists',
            reportFieldNameRequiredError: 'it Please enter a report field name',
            reportFieldTypeRequiredError: 'it Please choose a report field type',
            reportFieldInitialValueRequiredError: 'it Please choose a report field initial value',
            genericFailureMessage: 'it An error occurred while updating the report field. Please try again.',
        },
        tags: {
            tagName: 'it Tag name',
            requiresTag: 'it Members must tag all expenses',
            trackBillable: 'it Track billable expenses',
            customTagName: 'it Custom tag name',
            enableTag: 'it Enable tag',
            enableTags: 'it Enable tags',
            disableTag: 'it Disable tag',
            disableTags: 'it Disable tags',
            addTag: 'it Add tag',
            editTag: 'it Edit tag',
            editTags: 'it Edit tags',
            subtitle: 'it Tags add more detailed ways to classify costs.',
            emptyTags: {
                title: "it You haven't created any tags",
                subtitle: 'it Add a tag to track projects, locations, departments, and more.',
            },
            deleteTag: 'it Delete tag',
            deleteTags: 'it Delete tags',
            deleteTagConfirmation: 'it Are you sure that you want to delete this tag?',
            deleteTagsConfirmation: 'it Are you sure that you want to delete these tags?',
            deleteFailureMessage: 'it An error occurred while deleting the tag, please try again.',
            tagRequiredError: 'it Tag name is required.',
            existingTagError: 'it A tag with this name already exists.',
            invalidTagNameError: 'it Tag name cannot be 0. Please choose a different value.',
            genericFailureMessage: 'it An error occurred while updating the tag, please try again.',
            importedFromAccountingSoftware: 'it The tags below are imported from your',
            glCode: 'it GL code',
            updateGLCodeFailureMessage: 'it An error occurred while updating the GL code, please try again.',
            tagRules: 'it Tag rules',
            approverDescription: 'it Approver',
            importTags: 'it Import tags',
            importedTagsMessage: ({columnCounts}: ImportedTagsMessageParams) =>
                `it We found *${columnCounts} columns* in your spreadsheet. Select *Name* next to the column that contains tags names. You can also select *Enabled* next to the column that sets tags status.`,
        },
        taxes: {
            subtitle: 'it Add tax names, rates, and set defaults.',
            addRate: 'it Add rate',
            workspaceDefault: 'it Workspace currency default',
            foreignDefault: 'it Foreign currency default',
            customTaxName: 'it Custom tax name',
            value: 'it Value',
            taxReclaimableOn: 'it Tax reclaimable on',
            taxRate: 'it Tax rate',
            error: {
                taxRateAlreadyExists: 'it This tax name is already in use.',
                taxCodeAlreadyExists: 'it This tax code is already in use.',
                valuePercentageRange: 'it Please enter a valid percentage between 0 and 100.',
                customNameRequired: 'it Custom tax name is required.',
                deleteFailureMessage: 'it An error occurred while deleting the tax rate. Please try again or ask Concierge for help.',
                updateFailureMessage: 'it An error occurred while updating the tax rate. Please try again or ask Concierge for help.',
                createFailureMessage: 'it An error occurred while creating the tax rate. Please try again or ask Concierge for help.',
                updateTaxClaimableFailureMessage: 'it The reclaimable portion must be less than the distance rate amount.',
            },
            deleteTaxConfirmation: 'it Are you sure you want to delete this tax?',
            deleteMultipleTaxConfirmation: ({taxAmount}: TaxAmountParams) => `it Are you sure you want to delete ${taxAmount} taxes?`,
            actions: {
                delete: 'it Delete rate',
                deleteMultiple: 'it Delete rates',
                enable: 'it Enable rate',
                disable: 'it Disable rate',
                enableTaxRates: () => ({
                    one: 'it Enable rate',
                    other: 'it Enable rates',
                }),
                disableTaxRates: () => ({
                    one: 'it Disable rate',
                    other: 'it Disable rates',
                }),
            },
            importedFromAccountingSoftware: 'it The taxes below are imported from your',
            taxCode: 'it Tax code',
            updateTaxCodeFailureMessage: 'it An error occurred while updating the tax code, please try again.',
        },
        emptyWorkspace: {
            title: 'it Create a workspace',
            subtitle: 'it Create a workspace to track receipts, reimburse expenses, manage travel, send invoices, and more \u2014 all at the speed of chat.',
            createAWorkspaceCTA: 'it Get Started',
            features: {
                trackAndCollect: 'it Track and collect receipts',
                reimbursements: 'it Reimburse employees',
                companyCards: 'it Manage company cards',
            },
            notFound: 'it No workspace found',
            description: 'it Rooms are a great place to discuss and work with multiple people. To begin collaborating, create or join a workspace',
        },
        switcher: {
            headerTitle: 'it Filter by workspace',
            everythingSection: 'it Everything',
            placeholder: 'it Find a workspace',
        },
        new: {
            newWorkspace: 'it New workspace',
            getTheExpensifyCardAndMore: 'it Get the Expensify Card and more',
            confirmWorkspace: 'it Confirm Workspace',
        },
        people: {
            genericFailureMessage: 'it An error occurred removing a member from the workspace, please try again.',
            removeMembersPrompt: ({memberName}: {memberName: string}) => ({
                one: `it Are you sure you want to remove ${memberName}?`,
                other: 'it Are you sure you want to remove these members?',
            }),
            removeMembersWarningPrompt: ({memberName, ownerName}: RemoveMembersWarningPrompt) =>
                `it ${memberName} is an approver in this workspace. When you unshare this workspace with them, we\u2019ll replace them in the approval workflow with the workspace owner, ${ownerName}`,
            removeMembersTitle: () => ({
                one: 'it Remove member',
                other: 'it Remove members',
            }),
            removeWorkspaceMemberButtonTitle: 'it Remove from workspace',
            removeGroupMemberButtonTitle: 'it Remove from group',
            removeRoomMemberButtonTitle: 'it Remove from chat',
            removeMemberPrompt: ({memberName}: RemoveMemberPromptParams) => `it Are you sure you want to remove ${memberName}?`,
            removeMemberTitle: 'it Remove member',
            transferOwner: 'it Transfer owner',
            makeMember: 'it Make member',
            makeAdmin: 'it Make admin',
            makeAuditor: 'it Make auditor',
            selectAll: 'it Select all',
            error: {
                genericAdd: 'it There was a problem adding this workspace member.',
                cannotRemove: "it You can't remove yourself or the workspace owner.",
                genericRemove: 'it There was a problem removing that workspace member.',
            },
            addedWithPrimary: 'it Some members were added with their primary logins.',
            invitedBySecondaryLogin: ({secondaryLogin}: SecondaryLoginParams) => `it Added by secondary login ${secondaryLogin}.`,
            membersListTitle: 'it Directory of all workspace members.',
            importMembers: 'it Import members',
        },
        card: {
            getStartedIssuing: 'it Get started by issuing your first virtual or physical card.',
            issueCard: 'it Issue card',
            issueNewCard: {
                whoNeedsCard: 'it Who needs a card?',
                findMember: 'it Find member',
                chooseCardType: 'it Choose a card type',
                physicalCard: 'it Physical card',
                physicalCardDescription: 'it Great for the frequent spender',
                virtualCard: 'it Virtual card',
                virtualCardDescription: 'it Instant and flexible',
                chooseLimitType: 'it Choose a limit type',
                smartLimit: 'it Smart Limit',
                smartLimitDescription: 'it Spend up to a certain amount before requiring approval',
                monthly: 'it Monthly',
                monthlyDescription: 'it Spend up to a certain amount per month',
                fixedAmount: 'it Fixed amount',
                fixedAmountDescription: 'it Spend up to a certain amount once',
                setLimit: 'it Set a limit',
                cardLimitError: 'it Please enter an amount less than $21,474,836',
                giveItName: 'it Give it a name',
                giveItNameInstruction: 'it Make it unique enough to tell apart from other cards. Specific use cases are even better!',
                cardName: 'it Card name',
                letsDoubleCheck: 'it Let\u2019s double check that everything looks right.',
                willBeReady: 'it This card will be ready to use immediately.',
                cardholder: 'it Cardholder',
                cardType: 'it Card type',
                limit: 'it Limit',
                limitType: 'it Limit type',
                name: 'it Name',
            },
            deactivateCardModal: {
                deactivate: 'it Deactivate',
                deactivateCard: 'it Deactivate card',
                deactivateConfirmation: 'it Deactivating this card will decline all future transactions and can\u2019t be undone.',
            },
        },
        accounting: {
            settings: 'it settings',
            title: 'it Connections',
            subtitle: 'it Connect to your accounting system to code transactions with your chart of accounts, auto-match payments, and keep your finances in sync.',
            qbo: 'it QuickBooks Online',
            qbd: 'it QuickBooks Desktop',
            xero: 'it Xero',
            netsuite: 'it NetSuite',
            nsqs: 'it NSQS',
            intacct: 'it Sage Intacct',
            talkYourOnboardingSpecialist: 'it Chat with your setup specialist.',
            talkYourAccountManager: 'it Chat with your account manager.',
            talkToConcierge: 'it Chat with Concierge.',
            needAnotherAccounting: 'it Need another accounting software? ',
            connectionName: ({connectionName}: ConnectionNameParams) => {
                switch (connectionName) {
                    case CONST.POLICY.CONNECTIONS.NAME.QBO:
                        return 'it QuickBooks Online';
                    case CONST.POLICY.CONNECTIONS.NAME.XERO:
                        return 'it Xero';
                    case CONST.POLICY.CONNECTIONS.NAME.NETSUITE:
                        return 'it NetSuite';
                    case CONST.POLICY.CONNECTIONS.NAME.NSQS:
                        return 'it NSQS';
                    case CONST.POLICY.CONNECTIONS.NAME.SAGE_INTACCT:
                        return 'it Sage Intacct';
                    default: {
                        return 'it ';
                    }
                }
            },
            errorODIntegration: "it There's an error with a connection that's been set up in Expensify Classic. ",
            goToODToFix: 'it Go to Expensify Classic to fix this issue.',
            goToODToSettings: 'it Go to Expensify Classic to manage your settings.',
            setup: 'it Connect',
            lastSync: ({relativeDate}: LastSyncAccountingParams) => `it Last synced ${relativeDate}`,
            import: 'it Import',
            export: 'it Export',
            advanced: 'it Advanced',
            other: 'it Other integrations',
            syncNow: 'it Sync now',
            disconnect: 'it Disconnect',
            reinstall: 'it Reinstall connector',
            disconnectTitle: ({connectionName}: OptionalParam<ConnectionNameParams> = {}) => {
                const integrationName =
                    connectionName && CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] ? CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] : 'it integration';
                return `it Disconnect ${integrationName}`;
            },
            connectTitle: ({connectionName}: ConnectionNameParams) => `it Connect ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] ?? 'accounting integration'}`,
            syncError: ({connectionName}: ConnectionNameParams) => {
                switch (connectionName) {
                    case CONST.POLICY.CONNECTIONS.NAME.QBO:
                        return "it Can't connect to QuickBooks Online.";
                    case CONST.POLICY.CONNECTIONS.NAME.XERO:
                        return "it Can't connect to Xero.";
                    case CONST.POLICY.CONNECTIONS.NAME.NETSUITE:
                        return "it Can't connect to NetSuite.";
                    case CONST.POLICY.CONNECTIONS.NAME.NSQS:
                        return "it Can't connect to NSQS.";
                    case CONST.POLICY.CONNECTIONS.NAME.QBD:
                        return "it Can't connect to QuickBooks Desktop.";
                    default: {
                        return "it Can't connect to integration.";
                    }
                }
            },
            accounts: 'it Chart of accounts',
            taxes: 'it Taxes',
            imported: 'it Imported',
            notImported: 'it Not imported',
            importAsCategory: 'it Imported as categories',
            importTypes: {
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.IMPORTED]: 'it Imported',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.TAG]: 'it Imported as tags',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.DEFAULT]: 'it Imported',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.NOT_IMPORTED]: 'it Not imported',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.NONE]: 'it Not imported',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.REPORT_FIELD]: 'it Imported as report fields',
                [CONST.INTEGRATION_ENTITY_MAP_TYPES.NETSUITE_DEFAULT]: 'it NetSuite employee default',
            },
            disconnectPrompt: ({connectionName}: OptionalParam<ConnectionNameParams> = {}) => {
                const integrationName =
                    connectionName && CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] ? CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] : 'it this integration';
                return `it Are you sure you want to disconnect ${integrationName}?`;
            },
            connectPrompt: ({connectionName}: ConnectionNameParams) =>
                `it Are you sure you want to connect ${
                    CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName] ?? 'this accounting integration'
                }? This will remove any existing acounting connections.`,
            enterCredentials: 'it Enter your credentials',
            connections: {
                syncStageName: ({stage}: SyncStageNameConnectionsParams) => {
                    switch (stage) {
                        case 'quickbooksOnlineImportCustomers':
                        case 'quickbooksDesktopImportCustomers':
                            return 'it Importing customers';
                        case 'quickbooksOnlineImportEmployees':
                        case 'netSuiteSyncImportEmployees':
                        case 'intacctImportEmployees':
                        case 'quickbooksDesktopImportEmployees':
                            return 'it Importing employees';
                        case 'quickbooksOnlineImportAccounts':
                        case 'quickbooksDesktopImportAccounts':
                            return 'it Importing accounts';
                        case 'quickbooksOnlineImportClasses':
                        case 'quickbooksDesktopImportClasses':
                            return 'it Importing classes';
                        case 'quickbooksOnlineImportLocations':
                            return 'it Importing locations';
                        case 'quickbooksOnlineImportProcessing':
                            return 'it Processing imported data';
                        case 'quickbooksOnlineSyncBillPayments':
                        case 'intacctImportSyncBillPayments':
                            return 'it Syncing reimbursed reports and bill payments';
                        case 'quickbooksOnlineSyncTaxCodes':
                            return 'it Importing tax codes';
                        case 'quickbooksOnlineCheckConnection':
                            return 'it Checking QuickBooks Online connection';
                        case 'quickbooksOnlineImportMain':
                            return 'it Importing QuickBooks Online data';
                        case 'startingImportXero':
                            return 'it Importing Xero data';
                        case 'startingImportQBO':
                            return 'it Importing QuickBooks Online data';
                        case 'startingImportQBD':
                        case 'quickbooksDesktopImportMore':
                            return 'it Importing QuickBooks Desktop data';
                        case 'quickbooksDesktopImportTitle':
                            return 'it Importing title';
                        case 'quickbooksDesktopImportApproveCertificate':
                            return 'it Importing approve ceritificate';
                        case 'quickbooksDesktopImportDimensions':
                            return 'it Importing dimensions';
                        case 'quickbooksDesktopImportSavePolicy':
                            return 'it Importing save policy';
                        case 'quickbooksDesktopWebConnectorReminder':
                            return 'it Still syncing data with QuickBooks... Please make sure the Web Connector is running';
                        case 'quickbooksOnlineSyncTitle':
                            return 'it Syncing QuickBooks Online data';
                        case 'quickbooksOnlineSyncLoadData':
                        case 'xeroSyncStep':
                        case 'intacctImportData':
                            return 'it Loading data';
                        case 'quickbooksOnlineSyncApplyCategories':
                            return 'it Updating categories';
                        case 'quickbooksOnlineSyncApplyCustomers':
                            return 'it Updating customers/projects';
                        case 'quickbooksOnlineSyncApplyEmployees':
                            return 'it Updating people list';
                        case 'quickbooksOnlineSyncApplyClassesLocations':
                            return 'it Updating report fields';
                        case 'jobDone':
                            return 'it Waiting for imported data to load';
                        case 'xeroSyncImportChartOfAccounts':
                            return 'it Syncing chart of accounts';
                        case 'xeroSyncImportCategories':
                            return 'it Syncing categories';
                        case 'xeroSyncImportCustomers':
                            return 'it Syncing customers';
                        case 'xeroSyncXeroReimbursedReports':
                            return 'it Marking Expensify reports as reimbursed';
                        case 'xeroSyncExpensifyReimbursedReports':
                            return 'it Marking Xero bills and invoices as paid';
                        case 'xeroSyncImportTrackingCategories':
                            return 'it Syncing tracking categories';
                        case 'xeroSyncImportBankAccounts':
                            return 'it Syncing bank accounts';
                        case 'xeroSyncImportTaxRates':
                            return 'it Syncing tax rates';
                        case 'xeroCheckConnection':
                            return 'it Checking Xero connection';
                        case 'xeroSyncTitle':
                            return 'it Syncing Xero data';
                        case 'netSuiteSyncConnection':
                            return 'it Initializing connection to NetSuite';
                        case 'netSuiteSyncCustomers':
                            return 'it Importing customers';
                        case 'netSuiteSyncInitData':
                            return 'it Retrieving data from NetSuite';
                        case 'netSuiteSyncImportTaxes':
                            return 'it Importing taxes';
                        case 'netSuiteSyncImportItems':
                            return 'it Importing items';
                        case 'netSuiteSyncData':
                            return 'it Importing data into Expensify';
                        case 'netSuiteSyncAccounts':
                        case 'nsqsSyncAccounts':
                            return 'it Syncing accounts';
                        case 'netSuiteSyncCurrencies':
                            return 'it Syncing currencies';
                        case 'netSuiteSyncCategories':
                            return 'it Syncing categories';
                        case 'netSuiteSyncReportFields':
                            return 'it Importing data as Expensify report fields';
                        case 'netSuiteSyncTags':
                            return 'it Importing data as Expensify tags';
                        case 'netSuiteSyncUpdateConnectionData':
                            return 'it Updating connection info';
                        case 'netSuiteSyncNetSuiteReimbursedReports':
                            return 'it Marking Expensify reports as reimbursed';
                        case 'netSuiteSyncExpensifyReimbursedReports':
                            return 'it Marking NetSuite bills and invoices as paid';
                        case 'netSuiteImportVendorsTitle':
                            return 'it Importing vendors';
                        case 'netSuiteImportCustomListsTitle':
                            return 'it Importing custom lists';
                        case 'netSuiteSyncImportCustomLists':
                            return 'it Importing custom lists';
                        case 'netSuiteSyncImportSubsidiaries':
                            return 'it Importing subsidiaries';
                        case 'netSuiteSyncImportVendors':
                        case 'quickbooksDesktopImportVendors':
                            return 'it Importing vendors';
                        case 'nsqsSyncConnection':
                            return 'it Initializing connection to NSQS';
                        case 'nsqsSyncEmployees':
                            return 'it Syncing employees';
                        case 'nsqsSyncCustomers':
                            return 'it Syncing customers';
                        case 'nsqsSyncProjects':
                            return 'it Syncing projects';
                        case 'nsqsSyncCurrency':
                            return 'it Syncing currency';
                        case 'intacctCheckConnection':
                            return 'it Checking Sage Intacct connection';
                        case 'intacctImportDimensions':
                            return 'it Importing Sage Intacct dimensions';
                        case 'intacctImportTitle':
                            return 'it Importing Sage Intacct data';
                        default: {
                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                            return `it Translation missing for stage: ${stage}`;
                        }
                    }
                },
            },
            preferredExporter: 'it Preferred exporter',
            exportPreferredExporterNote:
                'it The preferred exporter can be any workspace admin, but must also be a Domain Admin if you set different export accounts for individual company cards in Domain Settings.',
            exportPreferredExporterSubNote: 'it Once set, the preferred exporter will see reports for export in their account.',
            exportAs: 'it Export as',
            exportOutOfPocket: 'it Export out-of-pocket expenses as',
            exportCompanyCard: 'it Export company card expenses as',
            exportDate: 'it Export date',
            defaultVendor: 'it Default vendor',
            autoSync: 'it Auto-sync',
            autoSyncDescription: 'it Sync NetSuite and Expensify automatically, every day. Export finalized report in realtime',
            reimbursedReports: 'it Sync reimbursed reports',
            cardReconciliation: 'it Card reconciliation',
            reconciliationAccount: 'it Reconciliation account',
            continuousReconciliation: 'it Continuous Reconciliation',
            saveHoursOnReconciliation:
                'it Save hours on reconciliation each accounting period by having Expensify continuously reconcile Expensify Card statements and settlements on your behalf.',
            enableContinuousReconciliation: 'it In order to enable Continuous Reconciliation, please enable ',
            chooseReconciliationAccount: {
                chooseBankAccount: 'it Choose the bank account that your Expensify Card payments will be reconciled against.',
                accountMatches: 'it Make sure this account matches your ',
                settlementAccount: 'it Expensify Card settlement account ',
                reconciliationWorks: ({lastFourPAN}: ReconciliationWorksParams) => `it (ending in ${lastFourPAN}) so Continuous Reconciliation works properly.`,
            },
        },
        export: {
            notReadyHeading: 'it Not ready to export',
            notReadyDescription: 'it Draft or pending expense reports cannot be exported to the accounting system. Please approve or pay these expenses before exporting them.',
        },
        invoices: {
            sendInvoice: 'it Send invoice',
            sendFrom: 'it Send from',
            invoicingDetails: 'it Invoicing details',
            invoicingDetailsDescription: 'it This info will appear on your invoices.',
            companyName: 'it Company name',
            companyWebsite: 'it Company website',
            paymentMethods: {
                personal: 'it Personal',
                business: 'it Business',
                chooseInvoiceMethod: 'it Choose a payment method below:',
                addBankAccount: 'it Add bank account',
                payingAsIndividual: 'it Paying as an individual',
                payingAsBusiness: 'it Paying as a business',
            },
            invoiceBalance: 'it Invoice balance',
            invoiceBalanceSubtitle: "it This is your current balance from collecting invoice payments. It'll transfer to your bank account automatically if you've added one.",
            bankAccountsSubtitle: 'it Add a bank account to make and receive invoice payments.',
        },
        invite: {
            member: 'it Invite member',
            members: 'it Invite members',
            invitePeople: 'it Invite new members',
            genericFailureMessage: 'it An error occurred while inviting the member to the workspace. Please try again.',
            pleaseEnterValidLogin: `it Please ensure the email or phone number is valid (e.g. ${CONST.EXAMPLE_PHONE_NUMBER}).`,
            user: 'it user',
            users: 'it users',
            invited: 'it invited',
            removed: 'it removed',
            to: 'it to',
            from: 'it from',
        },
        inviteMessage: {
            confirmDetails: 'it Confirm details',
            inviteMessagePrompt: 'it Make your invitation extra special by adding a message below!',
            personalMessagePrompt: 'it Message',
            genericFailureMessage: 'it An error occurred while inviting the member to the workspace. Please try again.',
            inviteNoMembersError: 'it Please select at least one member to invite.',
        },
        distanceRates: {
            oopsNotSoFast: 'it Oops! Not so fast...',
            workspaceNeeds: 'it A workspace needs at least one enabled distance rate.',
            distance: 'it Distance',
            centrallyManage: 'it Centrally manage rates, track in miles or kilometers, and set a default category.',
            rate: 'it Rate',
            addRate: 'it Add rate',
            trackTax: 'it Track tax',
            deleteRates: () => ({
                one: 'it Delete rate',
                other: 'it Delete rates',
            }),
            enableRates: () => ({
                one: 'it Enable rate',
                other: 'it Enable rates',
            }),
            disableRates: () => ({
                one: 'it Disable rate',
                other: 'it Disable rates',
            }),
            enableRate: 'it Enable rate',
            status: 'it Status',
            unit: 'it Unit',
            taxFeatureNotEnabledMessage: 'it Taxes must be enabled on the workspace to use this feature. Head over to ',
            changePromptMessage: 'it  to make that change.',
            deleteDistanceRate: 'it Delete distance rate',
            areYouSureDelete: () => ({
                one: 'it Are you sure you want to delete this rate?',
                other: 'it Are you sure you want to delete these rates?',
            }),
        },
        editor: {
            descriptionInputLabel: 'it Description',
            nameInputLabel: 'it Name',
            typeInputLabel: 'it Type',
            initialValueInputLabel: 'it Initial value',
            nameInputHelpText: "it This is the name you'll see on your workspace.",
            nameIsRequiredError: "it You'll need to give your workspace a name.",
            currencyInputLabel: 'it Default currency',
            currencyInputHelpText: 'it All expenses on this workspace will be converted to this currency.',
            currencyInputDisabledText: "it The default currency can't be changed because this workspace is linked to a USD bank account.",
            save: 'it Save',
            genericFailureMessage: 'it An error occurred while updating the workspace. Please try again.',
            avatarUploadFailureMessage: 'it An error occurred uploading the avatar. Please try again.',
            addressContext: 'it A Workspace Address is required to enable Expensify Travel. Please enter an address associated with your business.',
        },
        bankAccount: {
            continueWithSetup: 'it Continue setup',
            youreAlmostDone: "it You're almost done setting up your bank account, which will let you issue corporate cards, reimburse expenses, collect invoices, and pay bills.",
            streamlinePayments: 'it Streamline payments',
            connectBankAccountNote: "it Note: Personal bank accounts can't be used for payments on workspaces.",
            oneMoreThing: 'it One more thing!',
            allSet: "it You're all set!",
            accountDescriptionWithCards: 'it This bank account will be used to issue corporate cards, reimburse expenses, collect invoices, and pay bills.',
            letsFinishInChat: "it Let's finish in chat!",
            almostDone: 'it Almost done!',
            disconnectBankAccount: 'it Disconnect bank account',
            noLetsStartOver: "it No, let's start over",
            startOver: 'it Start over',
            yesDisconnectMyBankAccount: 'it Yes, disconnect my bank account',
            yesStartOver: 'it Yes, start over',
            disconnectYour: 'it Disconnect your ',
            bankAccountAnyTransactions: 'it  bank account. Any outstanding transactions for this account will still complete.',
            clearProgress: "it Starting over will clear the progress you've made so far.",
            areYouSure: 'it Are you sure?',
            workspaceCurrency: 'it Workspace currency',
            updateCurrencyPrompt: 'it It looks like your workspace is currently set to a different currency than USD. Please click the button below to update your currency to USD now.',
            updateToUSD: 'it Update to USD',
        },
        changeOwner: {
            changeOwnerPageTitle: 'it Transfer owner',
            addPaymentCardTitle: 'it Enter your payment card to transfer ownership',
            addPaymentCardButtonText: 'it Accept terms & add payment card',
            addPaymentCardReadAndAcceptTextPart1: 'it Read and accept',
            addPaymentCardReadAndAcceptTextPart2: 'it policy to add your card',
            addPaymentCardTerms: 'it terms',
            addPaymentCardPrivacy: 'it privacy',
            addPaymentCardAnd: 'it &',
            addPaymentCardPciCompliant: 'it PCI-DSS compliant',
            addPaymentCardBankLevelEncrypt: 'it Bank level encryption',
            addPaymentCardRedundant: 'it Redundant infrastructure',
            addPaymentCardLearnMore: 'it Learn more about our',
            addPaymentCardSecurity: 'it security',
            amountOwedTitle: 'it Outstanding balance',
            amountOwedButtonText: 'it OK',
            amountOwedText: 'it This account has an outstanding balance from a previous month.\n\nDo you want to clear the balance and take over billing of this workspace?',
            ownerOwesAmountTitle: 'it Outstanding balance',
            ownerOwesAmountButtonText: 'it Transfer balance',
            ownerOwesAmountText: ({email, amount}: OwnerOwesAmountParams) =>
                `it The account owning this workspace (${email}) has an outstanding balance from a previous month.\n\nDo you want to transfer this amount (${amount}) in order to take over billing for this workspace? Your payment card will be charged immediately.`,
            subscriptionTitle: 'it Take over annual subscription',
            subscriptionButtonText: 'it Transfer subscription',
            subscriptionText: ({usersCount, finalCount}: ChangeOwnerSubscriptionParams) =>
                `it Taking over this workspace will merge its annual subscription with your current subscription. This will increase your subscription size by ${usersCount} members making your new subscription size ${finalCount}. Would you like to continue?`,
            duplicateSubscriptionTitle: 'it Duplicate subscription alert',
            duplicateSubscriptionButtonText: 'it Continue',
            duplicateSubscriptionText: ({email, workspaceName}: ChangeOwnerDuplicateSubscriptionParams) =>
                `it It looks like you may be trying to take over billing for ${email}'s workspaces, but to do that, you need to be an admin on all their workspaces first.\n\nClick "Continue" if you only want to take over billing for the workspace ${workspaceName}.\n\nIf you want to take over billing for their entire subscription, please have them add you as an admin to all their workspaces first before taking over billing.`,
            hasFailedSettlementsTitle: 'it Cannot transfer ownership',
            hasFailedSettlementsButtonText: 'it Got it',
            hasFailedSettlementsText: ({email}: ChangeOwnerHasFailedSettlementsParams) =>
                `it You can't take over billing because ${email} has an overdue expensify Expensify Card settlement. Please ask them to reach out to concierge@expensify.com to resolve the issue. Then, you can take over billing for this workspace.`,
            failedToClearBalanceTitle: 'it Failed to clear balance',
            failedToClearBalanceButtonText: 'it OK',
            failedToClearBalanceText: 'it We were unable to clear the balance. Please try again later.',
            successTitle: 'it Woohoo! All set.',
            successDescription: "it You're now the owner of this workspace.",
            errorTitle: 'it Oops! Not so fast...',
            errorDescriptionPartOne: 'it There was a problem transferring ownership of this workspace. Try again, or',
            errorDescriptionPartTwo: 'it reach out to Concierge',
            errorDescriptionPartThree: 'it for help.',
        },
        exportAgainModal: {
            title: 'it Careful!',
            description: ({reportName, connectionName}: ExportAgainModalDescriptionParams) =>
                `it The following reports have already been exported to ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName]}:\n\n${reportName}\n\nAre you sure you want to export them again?`,
            confirmText: 'it Yes, export again',
            cancelText: 'it Cancel',
        },
        upgrade: {
            reportFields: {
                title: 'it Report fields',
                description: `Report fields let you specify header-level details, distinct from tags that pertain to expenses on individual line items. These details can encompass specific project names, business trip information, locations, and more.`,
                onlyAvailableOnPlan: 'it Report fields are only available on the Control plan, starting at ',
            },
            [CONST.POLICY.CONNECTIONS.NAME.NETSUITE]: {
                title: 'it NetSuite',
                description: `Enjoy automated syncing and reduce manual entries with the Expensify + NetSuite integration. Gain in-depth, realtime financial insights with native and custom segment support, including project and customer mapping.`,
                onlyAvailableOnPlan: 'it Our NetSuite integration is only available on the Control plan, starting at ',
            },
            [CONST.POLICY.CONNECTIONS.NAME.SAGE_INTACCT]: {
                title: 'it Sage Intacct',
                description: `Enjoy automated syncing and reduce manual entries with the Expensify + Sage Intacct integration. Gain in-depth, real-time financial insights with user-defined dimensions, as well as expense coding by department, class, location, customer, and project (job).`,
                onlyAvailableOnPlan: 'it Our Sage Intacct integration is only available on the Control plan, starting at ',
            },
            [CONST.POLICY.CONNECTIONS.NAME.QBD]: {
                title: 'it QuickBooks Desktop',
                description: `Enjoy automated syncing and reduce manual entries with the Expensify + QuickBooks Desktop integration. Gain ultimate efficiency with a realtime, two-way connection and expense coding by class, item, customer, and project.`,
                onlyAvailableOnPlan: 'it Our QuickBooks Desktop integration is only available on the Control plan, starting at ',
            },
            [CONST.UPGRADE_FEATURE_INTRO_MAPPING.approvals.id]: {
                title: 'it Advanced Approvals',
                description: `If you want to add more layers of approval to the mix – or just make sure the largest expenses get another set of eyes – we’ve got you covered. Advanced approvals help you put the right checks in place at every level so you keep your team’s spend under control.`,
                onlyAvailableOnPlan: 'it Advanced approvals are only available on the Control plan, which starts at ',
            },
            categories: {
                title: 'it Categories',
                description: `Categories help you better organize expenses to keep track of where you're spending your money. Use our suggested categories list or create your own.`,
                onlyAvailableOnPlan: 'it Categories are available on the Collect plan, starting at ',
            },
            glCodes: {
                title: 'it GL codes',
                description: `Add GL codes to your categories and tags for easy export of expenses to your accounting and payroll systems.`,
                onlyAvailableOnPlan: 'it GL codes are only available on the Control plan, starting at ',
            },
            glAndPayrollCodes: {
                title: 'it GL & Payroll codes',
                description: `Add GL & Payroll codes to your categories for easy export of expenses to your accounting and payroll systems.`,
                onlyAvailableOnPlan: 'it GL & Payroll codes are only available on the Control plan, starting at ',
            },
            taxCodes: {
                title: 'it Tax codes',
                description: `Add tax codes to your taxes for easy export of expenses to your accounting and payroll systems.`,
                onlyAvailableOnPlan: 'it Tax codes are only available on the Control plan, starting at ',
            },
            companyCards: {
                title: 'it Company cards',
                description: `Connect your existing corporate cards to Expensify, assign them to employees, and automatically import transactions.`,
                onlyAvailableOnPlan: 'it Company cards are only available on the Control plan, starting at ',
            },
            rules: {
                title: 'it Rules',
                description: `Rules run in the background and keep your spend under control so you don't have to sweat the small stuff.\n\nRequire expense details like receipts and descriptions, set limits and defaults, and automate approvals and payments – all in one place.`,
                onlyAvailableOnPlan: 'it Rules are only available on the Control plan, starting at ',
            },
            perDiem: {
                title: 'it Per diem',
                description:
                    'it Per diem is a great way to keep your daily costs compliant and predictable whenever your employees travel. Enjoy features like custom rates, default categories, and more granular details like destinations and subrates.',
                onlyAvailableOnPlan: 'it Per diem are only available on the Control plan, starting at ',
            },
            travel: {
                title: 'it Travel',
                description: 'it Expensify Travel is a new corporate travel booking and management platform that allows members to book accommodations, flights, transportation, and more.',
                onlyAvailableOnPlan: 'it Travel is available on the Collect plan, starting at ',
            },
            pricing: {
                perActiveMember: 'it per active member per month.',
            },
            note: {
                upgradeWorkspace: 'it Upgrade your workspace to access this feature, or',
                learnMore: 'it learn more',
                aboutOurPlans: 'it about our plans and pricing.',
            },
            upgradeToUnlock: 'it Unlock this feature',
            completed: {
                headline: `You've upgraded your workspace!`,
                successMessage: ({policyName}: ReportPolicyNameParams) => `it You've successfully upgraded ${policyName} to the Control plan!`,
                categorizeMessage: `You've successfully upgraded to a workspace on the Collect plan. Now you can categorize your expenses!`,
                travelMessage: `You've successfully upgraded to a workspace on the Collect plan. Now you can start booking and managing travel!`,
                viewSubscription: 'it View your subscription',
                moreDetails: 'it for more details.',
                gotIt: 'it Got it, thanks',
            },
            commonFeatures: {
                title: 'it Upgrade to the Control plan',
                note: 'it Unlock our most powerful features, including:',
                benefits: {
                    startsAt: 'it The Control plan starts at ',
                    perMember: 'it per active member per month.',
                    learnMore: 'it Learn more',
                    pricing: 'it about our plans and pricing.',
                    benefit1: 'it Advanced accounting connections (NetSuite, Sage Intacct, and more)',
                    benefit2: 'it Smart expense rules',
                    benefit3: 'it Multi-level approval workflows',
                    benefit4: 'it Enhanced security controls',
                    toUpgrade: 'it To upgrade, click',
                    selectWorkspace: 'it select a workspace, and change the plan type to',
                },
            },
        },
        downgrade: {
            commonFeatures: {
                title: 'it Downgrade to the Collect plan',
                note: 'it If you downgrade, you\u2019ll lose access to these features and more:',
                benefits: {
                    note: 'it For a full comparison of our plans, check out our',
                    pricingPage: 'it pricing page',
                    confirm: 'it Are you sure you want to downgrade and remove your configurations?',
                    warning: 'it This cannot be undone.',
                    benefit1: 'it Accounting connections (except QuickBooks Online and Xero)',
                    benefit2: 'it Smart expense rules',
                    benefit3: 'it Multi-level approval workflows',
                    benefit4: 'it Enhanced security controls',
                    headsUp: 'it Heads up!',
                    multiWorkspaceNote: 'it You\u2019ll need to downgrade all your workspaces before your first monthly payment to begin a subscription at the Collect rate. Click',
                    selectStep: 'it > select each workspace > change the plan type to',
                },
            },
            completed: {
                headline: 'it Your workspace has been downgraded',
                description: 'it You have other workspaces on the Control plan. To be billed at the Collect rate, you must downgrade all workspaces.',
                gotIt: 'it Got it, thanks',
            },
        },
        restrictedAction: {
            restricted: 'it Restricted',
            actionsAreCurrentlyRestricted: ({workspaceName}: ActionsAreCurrentlyRestricted) => `it Actions on the ${workspaceName} workspace are currently restricted`,
            workspaceOwnerWillNeedToAddOrUpdatePaymentCard: ({workspaceOwnerName}: WorkspaceOwnerWillNeedToAddOrUpdatePaymentCardParams) =>
                `it Workspace owner, ${workspaceOwnerName} will need to add or update the payment card on file to unlock new workspace activity.`,
            youWillNeedToAddOrUpdatePaymentCard: "it You'll need to add or update the payment card on file to unlock new workspace activity.",
            addPaymentCardToUnlock: 'it Add a payment card to unlock!',
            addPaymentCardToContinueUsingWorkspace: 'it Add a payment card to continue using this workspace',
            pleaseReachOutToYourWorkspaceAdmin: 'it Please reach out to your workspace admin for any questions.',
            chatWithYourAdmin: 'it Chat with your admin',
            chatInAdmins: 'it Chat in #admins',
            addPaymentCard: 'it Add payment card',
        },
        rules: {
            individualExpenseRules: {
                title: 'it Expenses',
                subtitle: 'it Set spend controls and defaults for individual expenses. You can also create rules for',
                receiptRequiredAmount: 'it Receipt required amount',
                receiptRequiredAmountDescription: 'it Require receipts when spend exceeds this amount, unless overridden by a category rule.',
                maxExpenseAmount: 'it Max expense amount',
                maxExpenseAmountDescription: 'it Flag spend that exceeds this amount, unless overridden by a category rule.',
                maxAge: 'it Max age',
                maxExpenseAge: 'it Max expense age',
                maxExpenseAgeDescription: 'it Flag spend older than a specific number of days.',
                maxExpenseAgeDays: () => ({
                    one: 'it 1 day',
                    other: (count: number) => `it ${count} days`,
                }),
                billableDefault: 'it Billable default',
                billableDefaultDescription: 'it Choose whether cash and credit card expenses should be billable by default. Billable expenses are enabled or disabled in',
                billable: 'it Billable',
                billableDescription: 'it Expenses are most often re-billed to clients',
                nonBillable: 'it Non-billable',
                nonBillableDescription: 'it Expenses are occasionally re-billed to clients',
                eReceipts: 'it eReceipts',
                eReceiptsHint: 'it eReceipts are auto-created',
                eReceiptsHintLink: 'it for most USD credit transactions',
            },
            expenseReportRules: {
                examples: 'it Examples:',
                title: 'it Expense reports',
                subtitle: 'it Automate expense report compliance, approvals, and payment.',
                customReportNamesTitle: 'it Custom report names',
                customReportNamesSubtitle: 'it Create custom names using our extensive formulas.',
                customNameTitle: 'it Custom name',
                customNameDescription: 'it Choose a custom name for expense reports using our ',
                customNameDescriptionLink: 'it extensive formulas',
                customNameInputLabel: 'it Name',
                customNameEmailPhoneExample: 'it Member\u2019s email or phone: {report:submit:from}',
                customNameStartDateExample: 'it Report start date: {report:startdate}',
                customNameWorkspaceNameExample: 'it Workspace name: {report:policyname}',
                customNameReportIDExample: 'it Report ID: {report:id}',
                customNameTotalExample: 'it Total: {report:total}.',
                preventMembersFromChangingCustomNamesTitle: 'it Prevent members from changing custom report names',
                preventSelfApprovalsTitle: 'it Prevent self-approvals',
                preventSelfApprovalsSubtitle: 'it Prevent workspace members from approving their own expense reports.',
                autoApproveCompliantReportsTitle: 'it Auto-approve compliant reports',
                autoApproveCompliantReportsSubtitle: 'it Configure which expense reports are eligible for auto-approval.',
                autoApproveReportsUnderTitle: 'it Auto-approve reports under',
                autoApproveReportsUnderDescription: 'it Fully compliant expense reports under this amount will be automatically approved.',
                randomReportAuditTitle: 'it Random report audit',
                randomReportAuditDescription: 'it Require that some reports be manually approved, even if eligible for auto-approval.',
                autoPayApprovedReportsTitle: 'it Auto-pay approved reports',
                autoPayApprovedReportsSubtitle: 'it Configure which expense reports are eligible for auto-pay.',
                autoPayApprovedReportsLimitError: ({currency}: AutoPayApprovedReportsLimitErrorParams = {}) => `it Please enter an amount less than ${currency ?? ''}20,000`,
                autoPayApprovedReportsLockedSubtitle: 'it Go to more features and enable workflows, then add payments to unlock this feature.',
                autoPayReportsUnderTitle: 'it Auto-pay reports under',
                autoPayReportsUnderDescription: 'it Fully compliant expense reports under this amount will be automatically paid. ',
                unlockFeatureGoToSubtitle: 'it Go to',
                unlockFeatureEnableWorkflowsSubtitle: ({featureName}: FeatureNameParams) => `it and enable workflows, then add ${featureName} to unlock this feature.`,
                enableFeatureSubtitle: ({featureName}: FeatureNameParams) => `it and enable ${featureName} to unlock this feature.`,
                preventSelfApprovalsModalText: ({managerEmail}: {managerEmail: string}) =>
                    `it Any members currently approving their own expenses will be removed and replaced with the default approver for this workspace (${managerEmail}).`,
                preventSelfApprovalsConfirmButton: 'it Prevent self-approvals',
                preventSelfApprovalsModalTitle: 'it Prevent self-approvals?',
                preventSelfApprovalsDisabledSubtitle: "it Self approvals can't be enabled until this workspace has at least two members.",
            },
            categoryRules: {
                title: 'it Category rules',
                approver: 'it Approver',
                requireDescription: 'it Require description',
                descriptionHint: 'it Description hint',
                descriptionHintDescription: ({categoryName}: CategoryNameParams) =>
                    `it Remind employees to provide additional information for \u201C${categoryName}\u201D spend. This hint appears in the description field on expenses.`,
                descriptionHintLabel: 'it Hint',
                descriptionHintSubtitle: 'it Pro-tip: The shorter the better!',
                maxAmount: 'it Max amount',
                flagAmountsOver: 'it Flag amounts over',
                flagAmountsOverDescription: ({categoryName}: CategoryNameParams) => `it Applies to the category \u201C${categoryName}\u201D.`,
                flagAmountsOverSubtitle: 'it This overrides the max amount for all expenses.',
                expenseLimitTypes: {
                    expense: 'it Individual expense',
                    expenseSubtitle: 'it Flag expense amounts by category. This rule overrides the general workspace rule for max expense amount.',
                    daily: 'it Category total',
                    dailySubtitle: 'it Flag total category spend per expense report.',
                },
                requireReceiptsOver: 'it Require receipts over',
                requireReceiptsOverList: {
                    default: ({defaultAmount}: DefaultAmountParams) => `it ${defaultAmount} ${CONST.DOT_SEPARATOR} Default`,
                    never: 'it Never require receipts',
                    always: 'it Always require receipts',
                },
                defaultTaxRate: 'it Default tax rate',
                goTo: 'it Go to',
                andEnableWorkflows: 'it and enable workflows, then add approvals to unlock this feature.',
            },
            customRules: {
                title: 'it Custom rules',
                subtitle: 'it Description',
                description: 'it Input custom rules for expense reports',
            },
        },
        planTypePage: {
            planTypes: {
                team: {
                    label: 'it Collect',
                    description: 'it For teams looking to automate their processes.',
                },
                corporate: {
                    label: 'it Control',
                    description: 'it For organizations with advanced requirements.',
                },
            },
            description: "it Choose a plan that's right for you. For a detailed list of features and pricing, check out our",
            subscriptionLink: 'it plan types and pricing help page',
            lockedPlanDescription: ({count, annualSubscriptionEndDate}: WorkspaceLockedPlanTypeParams) => ({
                one: `it You've committed to 1 active member on the Control plan until your annual subscription ends on ${annualSubscriptionEndDate}. You can switch to pay-per-use subscription and downgrade to the Collect plan starting ${annualSubscriptionEndDate} by disabling auto-renew in`,
                other: `it You've committed to ${count} active members on the Control plan until your annual subscription ends on ${annualSubscriptionEndDate}. You can switch to pay-per-use subscription and downgrade to the Collect plan starting ${annualSubscriptionEndDate} by disabling auto-renew in`,
            }),
            subscriptions: 'it Subscriptions',
        },
    },
    getAssistancePage: {
        title: 'it Get assistance',
        subtitle: "it We're here to clear your path to greatness!",
        description: 'it Choose from the support options below:',
        chatWithConcierge: 'it Chat with Concierge',
        scheduleSetupCall: 'it Schedule a setup call',
        scheduleADemo: 'it Schedule demo',
        questionMarkButtonTooltip: 'it Get assistance from our team',
        exploreHelpDocs: 'it Explore help docs',
    },
    emojiPicker: {
        skinTonePickerLabel: 'it Change default skin tone',
        headers: {
            frequentlyUsed: 'it Frequently Used',
            smileysAndEmotion: 'it Smileys & Emotion',
            peopleAndBody: 'it People & Body',
            animalsAndNature: 'it Animals & Nature',
            foodAndDrink: 'it Food & Drinks',
            travelAndPlaces: 'it Travel & Places',
            activities: 'it Activities',
            objects: 'it Objects',
            symbols: 'it Symbols',
            flags: 'it Flags',
        },
    },
    newRoomPage: {
        newRoom: 'it New room',
        groupName: 'it Group name',
        roomName: 'it Room name',
        visibility: 'it Visibility',
        restrictedDescription: 'it People in your workspace can find this room',
        privateDescription: 'it People invited to this room can find it',
        publicDescription: 'it Anyone can find this room',
        // eslint-disable-next-line @typescript-eslint/naming-convention
        public_announceDescription: 'it Anyone can find this room',
        createRoom: 'it Create room',
        roomAlreadyExistsError: 'it A room with this name already exists.',
        roomNameReservedError: ({reservedName}: RoomNameReservedErrorParams) => `it ${reservedName} is a default room on all workspaces. Please choose another name.`,
        roomNameInvalidError: 'it Room names can only include lowercase letters, numbers, and hyphens.',
        pleaseEnterRoomName: 'it Please enter a room name.',
        pleaseSelectWorkspace: 'it Please select a workspace.',
        renamedRoomAction: ({oldName, newName}: RenamedRoomActionParams) => `it renamed this room to "${newName}" (previously "${oldName}")`,
        roomRenamedTo: ({newName}: RoomRenamedToParams) => `it Room renamed to ${newName}`,
        social: 'it social',
        selectAWorkspace: 'it Select a workspace',
        growlMessageOnRenameError: 'it Unable to rename workspace room. Please check your connection and try again.',
        visibilityOptions: {
            restricted: 'it Workspace', // the translation for "restricted" visibility is actually workspace. This is so we can display restricted visibility rooms as "workspace" without having to change what's stored.
            private: 'it Private',
            public: 'it Public',
            // eslint-disable-next-line @typescript-eslint/naming-convention
            public_announce: 'it Public Announce',
        },
    },
    workspaceApprovalModes: {
        submitAndClose: 'it Submit and Close',
        submitAndApprove: 'it Submit and Approve',
        advanced: 'it ADVANCED',
        dynamictExternal: 'it DYNAMIC_EXTERNAL',
        smartReport: 'it SMARTREPORT',
        billcom: 'it BILLCOM',
    },
    workspaceActions: {
        addCategory: ({categoryName}: UpdatedPolicyCategoryParams) => `it added the category "${categoryName}"`,
        deleteCategory: ({categoryName}: UpdatedPolicyCategoryParams) => `it removed the category "${categoryName}"`,
        updateCategory: ({oldValue, categoryName}: UpdatedPolicyCategoryParams) => `it ${oldValue ? 'disabled' : 'enabled'} the category "${categoryName}"`,
        setCategoryName: ({oldName, newName}: UpdatedPolicyCategoryNameParams) => `it renamed the category "${oldName}" to "${newName}"`,
        addTag: ({tagListName, tagName}: UpdatedPolicyTagParams) => `it added the tag "${tagName}" to the list "${tagListName}"`,
        updateTagName: ({tagListName, newName, oldName}: UpdatedPolicyTagNameParams) => `it updated the tag list "${tagListName}" by changing the tag "${oldName}" to "${newName}`,
        updateTagEnabled: ({tagListName, tagName, enabled}: UpdatedPolicyTagParams) => `it ${enabled ? 'enabled' : 'disabled'} the tag "${tagName}" on the list "${tagListName}"`,
        deleteTag: ({tagListName, tagName}: UpdatedPolicyTagParams) => `it removed the tag "${tagName}" from the list "${tagListName}"`,
        updateTag: ({tagListName, newValue, tagName, updatedField, oldValue}: UpdatedPolicyTagFieldParams) => {
            if (oldValue) {
                return `it updated the tag "${tagName}" on the list "${tagListName}" by changing the ${updatedField} to "${newValue}" (previously "${oldValue}")`;
            }
            return `it updated the tag "${tagName}" on the list "${tagListName}" by adding a ${updatedField} of "${newValue}"`;
        },
        addCustomUnitRate: ({customUnitName, rateName}: AddedPolicyCustomUnitRateParams) => `it added a new "${customUnitName}" rate "${rateName}"`,
        addedReportField: ({fieldType, fieldName}: AddedOrDeletedPolicyReportFieldParams) => `it added ${fieldType} Report Field "${fieldName}"`,
        updateReportFieldDefaultValue: ({defaultValue, fieldName}: UpdatedPolicyReportFieldDefaultValueParams) =>
            `it set the default value of report field "${fieldName}" to "${defaultValue}"`,
        deleteReportField: ({fieldType, fieldName}: AddedOrDeletedPolicyReportFieldParams) => `it removed ${fieldType} Report Field "${fieldName}"`,
        preventSelfApproval: ({oldValue, newValue}: UpdatedPolicyPreventSelfApprovalParams) =>
            `it updated "Prevent self-approval" to "${newValue === 'true' ? 'Enabled' : 'Disabled'}" (previously "${oldValue === 'true' ? 'Enabled' : 'Disabled'}")`,
        updateMaxExpenseAmountNoReceipt: ({oldValue, newValue}: UpdatedPolicyFieldWithNewAndOldValueParams) =>
            `it changed the maximum receipt required expense amount to ${newValue} (previously ${oldValue})`,
        updateMaxExpenseAmount: ({oldValue, newValue}: UpdatedPolicyFieldWithNewAndOldValueParams) =>
            `it changed the maximum expense amount for violations to ${newValue} (previously ${oldValue})`,
        updateMaxExpenseAge: ({oldValue, newValue}: UpdatedPolicyFieldWithNewAndOldValueParams) =>
            `it updated "Max expense age (days)" to "${newValue}" (previously "${oldValue === 'false' ? CONST.POLICY.DEFAULT_MAX_EXPENSE_AGE : oldValue}")`,
        updateDefaultBillable: ({oldValue, newValue}: UpdatedPolicyFieldWithNewAndOldValueParams) => `it updated "Re-bill expenses to clients" to "${newValue}" (previously "${oldValue}")`,
        updateDefaultTitleEnforced: ({value}: UpdatedPolicyFieldWithValueParam) => `it turned "Enforce default report titles" ${value ? 'on' : 'off'}`,
        renamedWorkspaceNameAction: ({oldName, newName}: RenamedRoomActionParams) => `it updated the name of this workspace to "${newName}" (previously "${oldName}")`,
        updateWorkspaceDescription: ({newDescription, oldDescription}: UpdatedPolicyDescriptionParams) =>
            !oldDescription
                ? `it set the description of this workspace to "${newDescription}"`
                : `it updated the description of this workspace to "${newDescription}" (previously "${oldDescription}")`,
        removedFromApprovalWorkflow: ({submittersNames}: RemovedFromApprovalWorkflowParams) => {
            let joinedNames = 'it ';
            if (submittersNames.length === 1) {
                joinedNames = submittersNames.at(0) ?? 'it ';
            } else if (submittersNames.length === 2) {
                joinedNames = submittersNames.join('it  and ');
            } else if (submittersNames.length > 2) {
                joinedNames = `it ${submittersNames.slice(0, submittersNames.length - 1).join(', ')} and ${submittersNames.at(-1)}`;
            }
            return {
                one: `it removed you from ${joinedNames}'s approval workflow and workspace chat. Previously submitted reports will remain available for approval in your Inbox.`,
                other: `it removed you from ${joinedNames}'s approval workflows and workspace chats. Previously submitted reports will remain available for approval in your Inbox.`,
            };
        },
        demotedFromWorkspace: ({policyName, oldRole}: DemotedFromWorkspaceParams) =>
            `it updated your role in ${policyName} from ${oldRole} to user. You have been removed from all submitter workspace chats except for you own.`,
        updatedWorkspaceCurrencyAction: ({oldCurrency, newCurrency}: UpdatedPolicyCurrencyParams) => `it updated the default currency to ${newCurrency} (previously ${oldCurrency})`,
        updatedWorkspaceFrequencyAction: ({oldFrequency, newFrequency}: UpdatedPolicyFrequencyParams) =>
            `it updated the auto-reporting frequency to "${newFrequency}" (previously "${oldFrequency}")`,
        updateApprovalMode: ({newValue, oldValue}: ChangeFieldParams) => `it updated the approval mode to "${newValue}" (previously "${oldValue}")`,
        upgradedWorkspace: 'it upgraded this workspace to the Control plan',
        downgradedWorkspace: 'it downgraded this workspace to the Collect plan',
    },
    roomMembersPage: {
        memberNotFound: 'it Member not found.',
        useInviteButton: 'it To invite a new member to the chat, please use the invite button above.',
        notAuthorized: `it You don't have access to this page. If you're trying to join this room, just ask a room member to add you. Something else? Reach out to ${CONST.EMAIL.CONCIERGE}`,
        removeMembersPrompt: ({memberName}: {memberName: string}) => ({
            one: `it Are you sure you want to remove ${memberName} from the room?`,
            other: 'it Are you sure you want to remove the selected members from the room?',
        }),
        error: {
            genericAdd: 'it There was a problem adding this room member.',
        },
    },
    newTaskPage: {
        assignTask: 'it Assign task',
        assignMe: 'it Assign to me',
        confirmTask: 'it Confirm task',
        confirmError: 'it Please enter a title and select a share destination.',
        descriptionOptional: 'it Description (optional)',
        pleaseEnterTaskName: 'it Please enter a title',
        pleaseEnterTaskDestination: 'it Please select where you want to share this task.',
    },
    task: {
        task: 'it Task',
        title: 'it Title',
        description: 'it Description',
        assignee: 'it Assignee',
        completed: 'it Completed',
        messages: {
            created: ({title}: TaskCreatedActionParams) => `it task for ${title}`,
            completed: 'it marked as complete',
            canceled: 'it deleted task',
            reopened: 'it marked as incomplete',
            error: "it You don't have permission to take the requested action.",
        },
        markAsComplete: 'it Mark as complete',
        markAsIncomplete: 'it Mark as incomplete',
        assigneeError: 'it An error occurred while assigning this task. Please try another assignee.',
        genericCreateTaskFailureMessage: 'it There was an error creating this task. Please try again later.',
        deleteTask: 'it Delete task',
        deleteConfirmation: 'it Are you sure you want to delete this task?',
    },
    statementPage: {
        title: ({year, monthName}: StatementTitleParams) => `it ${monthName} ${year} statement`,
    },
    keyboardShortcutsPage: {
        title: 'it Keyboard shortcuts',
        subtitle: 'it Save time with these handy keyboard shortcuts:',
        shortcuts: {
            openShortcutDialog: 'it Opens the keyboard shortcuts dialog',
            escape: 'it Escape dialogs',
            search: 'it Open search dialog',
            newChat: 'it New chat screen',
            copy: 'it Copy comment',
            openDebug: 'it Open testing preferences dialog',
        },
    },
    guides: {
        screenShare: 'it Screen share',
        screenShareRequest: 'it Expensify is inviting you to a screen share',
    },
    search: {
        resultsAreLimited: 'it Search results are limited.',
        viewResults: 'it View results',
        resetFilters: 'it Reset filters',
        searchResults: {
            emptyResults: {
                title: 'it Nothing to show',
                subtitle: 'it Try adjusting your search criteria or creating something with the green + button.',
            },
            emptyExpenseResults: {
                title: "it You haven't created any expenses yet",
                subtitle: 'it Use the green button below to create an expense or take a tour of Expensify to learn more.',
            },
            emptyInvoiceResults: {
                title: "it You haven't created any \ninvoices yet",
                subtitle: 'it Use the green button below to send an invoice or take a tour of Expensify to learn more.',
            },
            emptyTripResults: {
                title: 'it No trips to display',
                subtitle: 'it Get started by booking your first trip below.',
                buttonText: 'it Book a trip',
            },
        },
        saveSearch: 'it Save search',
        deleteSavedSearch: 'it Delete saved search',
        deleteSavedSearchConfirm: 'it Are you sure you want to delete this search?',
        searchName: 'it Search name',
        savedSearchesMenuItemTitle: 'it Saved',
        groupedExpenses: 'it grouped expenses',
        bulkActions: {
            approve: 'it Approve',
            pay: 'it Pay',
            delete: 'it Delete',
            hold: 'it Hold',
            unhold: 'it Unhold',
            noOptionsAvailable: 'it No options available for the selected group of expenses.',
        },
        filtersHeader: 'it Filters',
        filters: {
            date: {
                before: ({date}: OptionalParam<DateParams> = {}) => `it Before ${date ?? ''}`,
                after: ({date}: OptionalParam<DateParams> = {}) => `it After ${date ?? ''}`,
            },
            status: 'it Status',
            keyword: 'it Keyword',
            hasKeywords: 'it Has keywords',
            currency: 'it Currency',
            link: 'it Link',
            pinned: 'it Pinned',
            unread: 'it Unread',
            amount: {
                lessThan: ({amount}: OptionalParam<RequestAmountParams> = {}) => `it Less than ${amount ?? ''}`,
                greaterThan: ({amount}: OptionalParam<RequestAmountParams> = {}) => `it Greater than ${amount ?? ''}`,
                between: ({greaterThan, lessThan}: FiltersAmountBetweenParams) => `it Between ${greaterThan} and ${lessThan}`,
            },
            card: {
                expensify: 'it Expensify',
                individualCards: 'it Individual cards',
                cardFeeds: 'it Card feeds',
                cardFeedName: ({cardFeedBankName, cardFeedLabel}: {cardFeedBankName: string; cardFeedLabel?: string}) =>
                    `All ${cardFeedBankName}${cardFeedLabel ? ` - ${cardFeedLabel}` : ''}`,
            },
            current: 'it Current',
            past: 'it Past',
            submitted: 'it Submitted',
            approved: 'it Approved',
            paid: 'it Paid',
            exported: 'it Exported',
            posted: 'it Posted',
        },
        noCategory: 'it No category',
        noTag: 'it No tag',
        expenseType: 'it Expense type',
        recentSearches: 'it Recent searches',
        recentChats: 'it Recent chats',
        searchIn: 'it Search in',
        searchPlaceholder: 'it Search for something',
        suggestions: 'it Suggestions',
    },
    genericErrorPage: {
        title: 'it Uh-oh, something went wrong!',
        body: {
            helpTextMobile: 'it Please close and reopen the app, or switch to',
            helpTextWeb: 'it web.',
            helpTextConcierge: 'it If the problem persists, reach out to',
        },
        refresh: 'it Refresh',
    },
    fileDownload: {
        success: {
            title: 'it Downloaded!',
            message: 'it Attachment successfully downloaded!',
            qrMessage: 'it Check your photos or downloads folder for a copy of your QR code. Protip: Add it to a presentation for your audience to scan and connect with you directly.',
        },
        generalError: {
            title: 'it Attachment error',
            message: "it Attachment can't be downloaded.",
        },
        permissionError: {
            title: 'it Storage access',
            message: "it Expensify can't save attachments without storage access. Tap settings to update permissions.",
        },
    },
    desktopApplicationMenu: {
        mainMenu: 'it New Expensify',
        about: 'it About New Expensify',
        update: 'it Update New Expensify',
        checkForUpdates: 'it Check for updates',
        toggleDevTools: 'it Toggle Developer Tools',
        viewShortcuts: 'it View keyboard shortcuts',
        services: 'it Services',
        hide: 'it Hide New Expensify',
        hideOthers: 'it Hide Others',
        showAll: 'it Show All',
        quit: 'it Quit New Expensify',
        fileMenu: 'it File',
        closeWindow: 'it Close Window',
        editMenu: 'it Edit',
        undo: 'it Undo',
        redo: 'it Redo',
        cut: 'it Cut',
        copy: 'it Copy',
        paste: 'it Paste',
        pasteAndMatchStyle: 'it Paste and Match Style',
        pasteAsPlainText: 'it Paste as Plain Text',
        delete: 'it Delete',
        selectAll: 'it Select All',
        speechSubmenu: 'it Speech',
        startSpeaking: 'it Start Speaking',
        stopSpeaking: 'it Stop Speaking',
        viewMenu: 'it View',
        reload: 'it Reload',
        forceReload: 'it Force Reload',
        resetZoom: 'it Actual Size',
        zoomIn: 'it Zoom In',
        zoomOut: 'it Zoom Out',
        togglefullscreen: 'it Toggle Full Screen',
        historyMenu: 'it History',
        back: 'it Back',
        forward: 'it Forward',
        windowMenu: 'it Window',
        minimize: 'it Minimize',
        zoom: 'it Zoom',
        front: 'it Bring All to Front',
        helpMenu: 'it Help',
        learnMore: 'it Learn more',
        documentation: 'it Documentation',
        communityDiscussions: 'it Community Discussions',
        searchIssues: 'it Search Issues',
    },
    historyMenu: {
        forward: 'it Forward',
        back: 'it Back',
    },
    checkForUpdatesModal: {
        available: {
            title: 'it Update available',
            message: ({isSilentUpdating}: {isSilentUpdating: boolean}) =>
                `it The new version will be available shortly.${!isSilentUpdating ? " We'll notify you when we're ready to update." : ''}`,
            soundsGood: 'it Sounds good',
        },
        notAvailable: {
            title: 'it Update unavailable',
            message: "it There's no update available right now. Please check back later!",
            okay: 'it Okay',
        },
        error: {
            title: 'it Update check failed.',
            message: "it We couldn't check for an update. Please try again in a bit.",
        },
    },
    report: {
        genericCreateReportFailureMessage: 'it Unexpected error creating this chat. Please try again later.',
        genericAddCommentFailureMessage: 'it Unexpected error posting the comment. Please try again later.',
        genericUpdateReportFieldFailureMessage: 'it Unexpected error updating the field. Please try again later.',
        genericUpdateReporNameEditFailureMessage: 'it Unexpected error renaming the report. Please try again later.',
        noActivityYet: 'it No activity yet',
        actions: {
            type: {
                changeField: ({oldValue, newValue, fieldName}: ChangeFieldParams) => `it changed ${fieldName} from ${oldValue} to ${newValue}`,
                changeFieldEmpty: ({newValue, fieldName}: ChangeFieldParams) => `it changed ${fieldName} to ${newValue}`,
                changePolicy: ({fromPolicy, toPolicy}: ChangePolicyParams) => `it changed workspace from ${fromPolicy} to ${toPolicy}`,
                changeType: ({oldType, newType}: ChangeTypeParams) => `it changed type from ${oldType} to ${newType}`,
                delegateSubmit: ({delegateUser, originalManager}: DelegateSubmitParams) => `it sent this report to ${delegateUser} since ${originalManager} is on vacation`,
                exportedToCSV: `exported this report to CSV`,
                exportedToIntegration: {
                    automatic: ({label}: ExportedToIntegrationParams) => `it exported this report to ${label}.`,
                    manual: ({label}: ExportedToIntegrationParams) => `it marked this report as manually exported to ${label}.`,
                    reimburseableLink: 'it View out-of-pocket expenses.',
                    nonReimbursableLink: 'it View company card expenses.',
                    pending: ({label}: ExportedToIntegrationParams) => `it started exporting this report to ${label}...`,
                },
                integrationsMessage: ({errorMessage, label, linkText, linkURL}: IntegrationSyncFailedParams) =>
                    `it failed to export this report to ${label} ("${errorMessage} ${linkText ? `<a href="${linkURL}">${linkText}</a>` : ''}")`,
                managerAttachReceipt: `added a receipt`,
                managerDetachReceipt: `removed a receipt`,
                markedReimbursed: ({amount, currency}: MarkedReimbursedParams) => `paid ${currency}${amount} elsewhere`,
                markedReimbursedFromIntegration: ({amount, currency}: MarkReimbursedFromIntegrationParams) => `paid ${currency}${amount} via integration`,
                outdatedBankAccount: `couldn’t process the payment due to a problem with the payer’s bank account`,
                reimbursementACHBounce: `couldn’t process the payment, as the payer doesn’t have sufficient funds`,
                reimbursementACHCancelled: `canceled the payment`,
                reimbursementAccountChanged: `couldn’t process the payment, as the payer changed bank accounts`,
                reimbursementDelayed: `processed the payment but it’s delayed by 1-2 more business days`,
                selectedForRandomAudit: `randomly selected for review`,
                selectedForRandomAuditMarkdown: `[randomly selected](https://help.expensify.com/articles/expensify-classic/reports/Set-a-random-report-audit-schedule) for review`,
                share: ({to}: ShareParams) => `it invited member ${to}`,
                unshare: ({to}: UnshareParams) => `it removed member ${to}`,
                stripePaid: ({amount, currency}: StripePaidParams) => `paid ${currency}${amount}`,
                takeControl: `took control`,
                integrationSyncFailed: ({label, errorMessage}: IntegrationSyncFailedParams) => `failed to sync with ${label}${errorMessage ? ` ("${errorMessage}")` : ''}`,
                addEmployee: ({email, role}: AddEmployeeParams) => `it added ${email} as ${role === 'member' ? 'a' : 'an'} ${role}`,
                updateRole: ({email, currentRole, newRole}: UpdateRoleParams) => `it updated the role of ${email} to ${newRole} (previously ${currentRole})`,
                leftWorkspace: ({nameOrEmail}: LeftWorkspaceParams) => `it ${nameOrEmail} left the workspace`,
                removeMember: ({email, role}: AddEmployeeParams) => `it removed ${role} ${email}`,
                removedConnection: ({connectionName}: ConnectionNameParams) => `it removed connection to ${CONST.POLICY.CONNECTIONS.NAME_USER_FRIENDLY[connectionName]}`,
            },
        },
    },
    chronos: {
        oooEventSummaryFullDay: ({summary, dayCount, date}: OOOEventSummaryFullDayParams) => `it ${summary} for ${dayCount} ${dayCount === 1 ? 'day' : 'days'} until ${date}`,
        oooEventSummaryPartialDay: ({summary, timePeriod, date}: OOOEventSummaryPartialDayParams) => `it ${summary} from ${timePeriod} on ${date}`,
    },
    footer: {
        features: 'it Features',
        expenseManagement: 'it Expense Management',
        spendManagement: 'it Spend Management',
        expenseReports: 'it Expense Reports',
        companyCreditCard: 'it Company Credit Card',
        receiptScanningApp: 'it Receipt Scanning App',
        billPay: 'it Bill Pay',
        invoicing: 'it Invoicing',
        CPACard: 'it CPA Card',
        payroll: 'it Payroll',
        travel: 'it Travel',
        resources: 'it Resources',
        expensifyApproved: 'it ExpensifyApproved!',
        pressKit: 'it Press Kit',
        support: 'it Support',
        expensifyHelp: 'it ExpensifyHelp',
        terms: 'it Terms of Service',
        privacy: 'it Privacy',
        learnMore: 'it Learn More',
        aboutExpensify: 'it About Expensify',
        blog: 'it Blog',
        jobs: 'it Jobs',
        expensifyOrg: 'it Expensify.org',
        investorRelations: 'it Investor Relations',
        getStarted: 'it Get Started',
        createAccount: 'it Create A New Account',
        logIn: 'it Log In',
    },
    allStates: COMMON_CONST.STATES as States,
    allCountries: CONST.ALL_COUNTRIES as AllCountries,
    accessibilityHints: {
        navigateToChatsList: 'it Navigate back to chats list',
        chatWelcomeMessage: 'it Chat welcome message',
        navigatesToChat: 'it Navigates to a chat',
        newMessageLineIndicator: 'it New message line indicator',
        chatMessage: 'it Chat message',
        lastChatMessagePreview: 'it Last chat message preview',
        workspaceName: 'it Workspace name',
        chatUserDisplayNames: 'it Chat member display names',
        scrollToNewestMessages: 'it Scroll to newest messages',
        prestyledText: 'it Prestyled text',
        viewAttachment: 'it View attachment',
    },
    parentReportAction: {
        deletedReport: 'it Deleted report',
        deletedMessage: 'it Deleted message',
        deletedExpense: 'it Deleted expense',
        reversedTransaction: 'it Reversed transaction',
        deletedTask: 'it Deleted task',
        hiddenMessage: 'it Hidden message',
    },
    threads: {
        thread: 'it Thread',
        replies: 'it Replies',
        reply: 'it Reply',
        from: 'it From',
        in: 'it in',
        parentNavigationSummary: ({reportName, workspaceName}: ParentNavigationSummaryParams) => `From ${reportName}${workspaceName ? ` in ${workspaceName}` : ''}`,
    },
    qrCodes: {
        copy: 'it Copy URL',
        copied: 'it Copied!',
    },
    moderation: {
        flagDescription: 'it All flagged messages will be sent to a moderator for review.',
        chooseAReason: 'it Choose a reason for flagging below:',
        spam: 'it Spam',
        spamDescription: 'it Unsolicited off-topic promotion',
        inconsiderate: 'it Inconsiderate',
        inconsiderateDescription: 'it Insulting or disrespectful phrasing, with questionable intentions',
        intimidation: 'it Intimidation',
        intimidationDescription: 'it Aggressively pursuing an agenda over valid objections',
        bullying: 'it Bullying',
        bullyingDescription: 'it Targeting an individual to obtain obedience',
        harassment: 'it Harassment',
        harassmentDescription: 'it Racist, misogynistic, or other broadly discriminatory behavior',
        assault: 'it Assault',
        assaultDescription: 'it Specifically targeted emotional attack with the intention of harm',
        flaggedContent: 'it This message has been flagged as violating our community rules and the content has been hidden.',
        hideMessage: 'it Hide message',
        revealMessage: 'it Reveal message',
        levelOneResult: 'it Sends anonymous warning and message is reported for review.',
        levelTwoResult: 'it Message hidden from channel, plus anonymous warning and message is reported for review.',
        levelThreeResult: 'it Message removed from channel plus anonymous warning and message is reported for review.',
    },
    actionableMentionWhisperOptions: {
        invite: 'it Invite them',
        nothing: 'it Do nothing',
    },
    actionableMentionJoinWorkspaceOptions: {
        accept: 'it Accept',
        decline: 'it Decline',
    },
    actionableMentionTrackExpense: {
        submit: 'it Submit it to someone',
        categorize: 'it Categorize it',
        share: 'it Share it with my accountant',
        nothing: 'it Nothing for now',
    },
    teachersUnitePage: {
        teachersUnite: 'it Teachers Unite',
        joinExpensifyOrg:
            'it Join Expensify.org in eliminating injustice around the world. The current "Teachers Unite" campaign supports educators everywhere by splitting the costs of essential school supplies.',
        iKnowATeacher: 'it I know a teacher',
        iAmATeacher: 'it I am a teacher',
        getInTouch: 'it Excellent! Please share their information so we can get in touch with them.',
        introSchoolPrincipal: 'it Intro to your school principal',
        schoolPrincipalVerfiyExpense:
            'it Expensify.org splits the cost of essential school supplies so that students from low-income households can have a better learning experience. Your principal will be asked to verify your expenses.',
        principalFirstName: 'it Principal first name',
        principalLastName: 'it Principal last name',
        principalWorkEmail: 'it Principal work email',
        updateYourEmail: 'it Update your email address',
        updateEmail: 'it Update email address',
        contactMethods: 'it Contact methods.',
        schoolMailAsDefault: 'it Before you move forward, please make sure to set your school email as your default contact method. You can do so in Settings > Profile > ',
        error: {
            enterPhoneEmail: 'it Enter a valid email or phone number.',
            enterEmail: 'it Enter an email.',
            enterValidEmail: 'it Enter a valid email.',
            tryDifferentEmail: 'it Please try a different email.',
        },
    },
    cardTransactions: {
        notActivated: 'it Not activated',
        outOfPocket: 'it Out-of-pocket spend',
        companySpend: 'it Company spend',
    },
    distance: {
        addStop: 'it Add stop',
        deleteWaypoint: 'it Delete waypoint',
        deleteWaypointConfirmation: 'it Are you sure you want to delete this waypoint?',
        address: 'it Address',
        waypointDescription: {
            start: 'it Start',
            stop: 'it Stop',
        },
        mapPending: {
            title: 'it Map pending',
            subtitle: 'it The map will be generated when you go back online',
            onlineSubtitle: 'it One moment while we set up the map',
            errorTitle: 'it Map error',
            errorSubtitle: 'it There was an error loading the map. Please try again.',
        },
        error: {
            selectSuggestedAddress: 'it Please select a suggested address or use current location.',
        },
    },
    reportCardLostOrDamaged: {
        report: 'it Report physical card loss / damage',
        screenTitle: 'it Report card lost or damaged',
        nextButtonLabel: 'it Next',
        reasonTitle: 'it Why do you need a new card?',
        cardDamaged: 'it My card was damaged',
        cardLostOrStolen: 'it My card was lost or stolen',
        confirmAddressTitle: 'it Please confirm the mailing address for your new card.',
        cardDamagedInfo: 'it Your new card will arrive in 2-3 business days. Your current card will continue to work until you activate your new one.',
        cardLostOrStolenInfo: 'it Your current card will be permanently deactivated as soon as your order is placed. Most cards arrive in a few business days.',
        address: 'it Address',
        deactivateCardButton: 'it Deactivate card',
        shipNewCardButton: 'it Ship new card',
        addressError: 'it Address is required',
        reasonError: 'it Reason is required',
    },
    eReceipt: {
        guaranteed: 'it Guaranteed eReceipt',
        transactionDate: 'it Transaction date',
    },
    referralProgram: {
        [CONST.REFERRAL_PROGRAM.CONTENT_TYPES.START_CHAT]: {
            buttonText1: 'it Start a chat, ',
            buttonText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}.`,
            header: `it Start a chat, get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            body: `it Get paid to talk to your friends! Start a chat with a new Expensify account and get $${CONST.REFERRAL_PROGRAM.REVENUE} when they become a customer.`,
        },
        [CONST.REFERRAL_PROGRAM.CONTENT_TYPES.SUBMIT_EXPENSE]: {
            buttonText1: 'it Submit an expense, ',
            buttonText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}.`,
            header: `it Submit an expense, get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            body: `it It pays to get paid! Submit an expense to a new Expensify account and get $${CONST.REFERRAL_PROGRAM.REVENUE} when they become a customer.`,
        },
        [CONST.REFERRAL_PROGRAM.CONTENT_TYPES.PAY_SOMEONE]: {
            buttonText1: 'it Pay someone, ',
            buttonText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}.`,
            header: `it Pay someone, get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            body: `it You gotta spend money to make money! Pay someone with Expensify and get $${CONST.REFERRAL_PROGRAM.REVENUE} when they become a customer.`,
        },
        [CONST.REFERRAL_PROGRAM.CONTENT_TYPES.REFER_FRIEND]: {
            buttonText1: 'it Invite a friend, ',
            buttonText2: `it get $${CONST.REFERRAL_PROGRAM.REVENUE}.`,
            header: `it Get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            body: `it Chat, pay, submit, or split an expense with a friend and get $${CONST.REFERRAL_PROGRAM.REVENUE} when they become a customer. Otherwise, just share your invite link!`,
        },
        [CONST.REFERRAL_PROGRAM.CONTENT_TYPES.SHARE_CODE]: {
            buttonText1: `it Get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            header: `it Get $${CONST.REFERRAL_PROGRAM.REVENUE}`,
            body: `it Chat, pay, submit, or split an expense with a friend and get $${CONST.REFERRAL_PROGRAM.REVENUE} when they become a customer. Otherwise, just share your invite link!`,
        },
        copyReferralLink: 'it Copy invite link',
    },
    systemChatFooterMessage: {
        [CONST.INTRO_CHOICES.MANAGE_TEAM]: {
            phrase1: 'it Chat with your setup specialist in ',
            phrase2: 'it  for help',
        },
        default: {
            phrase1: 'it Message ',
            phrase2: 'it  for help with setup',
        },
    },
    violations: {
        allTagLevelsRequired: 'it All tags required',
        autoReportedRejectedExpense: ({rejectReason, rejectedBy}: ViolationsAutoReportedRejectedExpenseParams) => `it ${rejectedBy} rejected this expense with the comment "${rejectReason}"`,
        billableExpense: 'it Billable no longer valid',
        cashExpenseWithNoReceipt: ({formattedLimit}: ViolationsCashExpenseWithNoReceiptParams = {}) => `it Receipt required${formattedLimit ? ` over ${formattedLimit}` : ''}`,
        categoryOutOfPolicy: 'it Category no longer valid',
        conversionSurcharge: ({surcharge}: ViolationsConversionSurchargeParams) => `it Applied ${surcharge}% conversion surcharge`,
        customUnitOutOfPolicy: 'it Rate not valid for this workspace',
        duplicatedTransaction: 'it Duplicate',
        fieldRequired: 'it Report fields are required',
        futureDate: 'it Future date not allowed',
        invoiceMarkup: ({invoiceMarkup}: ViolationsInvoiceMarkupParams) => `it Marked up by ${invoiceMarkup}%`,
        maxAge: ({maxAge}: ViolationsMaxAgeParams) => `it Date older than ${maxAge} days`,
        missingCategory: 'it Missing category',
        missingComment: 'it Description required for selected category',
        missingTag: ({tagName}: ViolationsMissingTagParams = {}) => `it Missing ${tagName ?? 'tag'}`,
        modifiedAmount: ({type, displayPercentVariance}: ViolationsModifiedAmountParams) => {
            switch (type) {
                case 'distance':
                    return 'it Amount differs from calculated distance';
                case 'card':
                    return 'it Amount greater than card transaction';
                default:
                    if (displayPercentVariance) {
                        return `it Amount ${displayPercentVariance}% greater than scanned receipt`;
                    }
                    return 'it Amount greater than scanned receipt';
            }
        },
        modifiedDate: 'it Date differs from scanned receipt',
        nonExpensiworksExpense: 'it Non-Expensiworks expense',
        overAutoApprovalLimit: ({formattedLimit}: ViolationsOverLimitParams) => `it Expense exceeds auto-approval limit of ${formattedLimit}`,
        overCategoryLimit: ({formattedLimit}: ViolationsOverCategoryLimitParams) => `it Amount over ${formattedLimit}/person category limit`,
        overLimit: ({formattedLimit}: ViolationsOverLimitParams) => `it Amount over ${formattedLimit}/person limit`,
        overLimitAttendee: ({formattedLimit}: ViolationsOverLimitParams) => `it Amount over ${formattedLimit}/person limit`,
        perDayLimit: ({formattedLimit}: ViolationsPerDayLimitParams) => `it Amount over daily ${formattedLimit}/person category limit`,
        receiptNotSmartScanned: 'it Receipt scan incomplete. Please verify details manually.',
        receiptRequired: ({formattedLimit, category}: ViolationsReceiptRequiredParams) => {
            let message = 'it Receipt required';
            if (formattedLimit ?? category) {
                message += 'it  over';
                if (formattedLimit) {
                    message += `it  ${formattedLimit}`;
                }
                if (category) {
                    message += 'it  category limit';
                }
            }
            return message;
        },
        customRules: ({message}: ViolationsCustomRulesParams) => message,
        reviewRequired: 'it Review required',
        rter: ({brokenBankConnection, email, isAdmin, isTransactionOlderThan7Days, member, rterType}: ViolationsRterParams) => {
            if (rterType === CONST.RTER_VIOLATION_TYPES.BROKEN_CARD_CONNECTION_530 || rterType === CONST.RTER_VIOLATION_TYPES.BROKEN_CARD_CONNECTION) {
                return 'it ';
            }
            if (brokenBankConnection) {
                return isAdmin
                    ? `it Can't auto-match receipt due to broken bank connection which ${email} needs to fix`
                    : "it Can't auto-match receipt due to broken bank connection which you need to fix";
            }
            if (!isTransactionOlderThan7Days) {
                return isAdmin ? `it Ask ${member} to mark as a cash or wait 7 days and try again` : 'it Awaiting merge with card transaction.';
            }
            return 'it ';
        },
        brokenConnection530Error: 'it Receipt pending due to broken bank connection.',
        adminBrokenConnectionError: 'it Receipt pending due to broken bank connection. Please resolve in ',
        memberBrokenConnectionError: 'it Receipt pending due to broken bank connection. Please ask a workspace admin to resolve.',
        markAsCashToIgnore: 'it Mark as cash to ignore and request payment.',
        smartscanFailed: 'it Receipt scanning failed. Enter details manually.',
        someTagLevelsRequired: ({tagName}: ViolationsTagOutOfPolicyParams = {}) => `it Missing ${tagName ?? 'Tag'}`,
        tagOutOfPolicy: ({tagName}: ViolationsTagOutOfPolicyParams = {}) => `it ${tagName ?? 'Tag'} no longer valid`,
        taxAmountChanged: 'it Tax amount was modified',
        taxOutOfPolicy: ({taxName}: ViolationsTaxOutOfPolicyParams = {}) => `it ${taxName ?? 'Tax'} no longer valid`,
        taxRateChanged: 'it Tax rate was modified',
        taxRequired: 'it Missing tax rate',
        none: 'it None',
        taxCodeToKeep: 'it Choose which tax code to keep',
        tagToKeep: 'it Choose which tag to keep',
        isTransactionReimbursable: 'it Choose if transaction is reimbursable',
        merchantToKeep: 'it Choose which merchant to keep',
        descriptionToKeep: 'it Choose which description to keep',
        categoryToKeep: 'it Choose which category to keep',
        isTransactionBillable: 'it Choose if transaction is billable',
        keepThisOne: 'it Keep this one',
        confirmDetails: `Confirm the details you're keeping`,
        confirmDuplicatesInfo: `The duplicate requests you don't keep will be held for the member to delete`,
        hold: 'it Hold',
    },
    reportViolations: {
        [CONST.REPORT_VIOLATIONS.FIELD_REQUIRED]: ({fieldName}: RequiredFieldParams) => `it ${fieldName} is required`,
    },
    violationDismissal: {
        rter: {
            manual: 'it marked this receipt as cash',
        },
        duplicatedTransaction: {
            manual: 'it resolved the duplicate',
        },
    },
    videoPlayer: {
        play: 'it Play',
        pause: 'it Pause',
        fullscreen: 'it Fullscreen',
        playbackSpeed: 'it Playback speed',
        expand: 'it Expand',
        mute: 'it Mute',
        unmute: 'it Unmute',
        normal: 'it Normal',
    },
    exitSurvey: {
        header: 'it Before you go',
        reasonPage: {
            title: "it Please tell us why you're leaving",
            subtitle: 'it Before you go, please tell us why you\u2019d like to switch to Expensify Classic.',
        },
        reasons: {
            [CONST.EXIT_SURVEY.REASONS.FEATURE_NOT_AVAILABLE]: "it I need a feature that's only available in Expensify Classic.",
            [CONST.EXIT_SURVEY.REASONS.DONT_UNDERSTAND]: "it I don't understand how to use New Expensify.",
            [CONST.EXIT_SURVEY.REASONS.PREFER_CLASSIC]: 'it I understand how to use New Expensify, but I prefer Expensify Classic.',
        },
        prompts: {
            [CONST.EXIT_SURVEY.REASONS.FEATURE_NOT_AVAILABLE]: "it What feature do you need that isn't available in New Expensify?",
            [CONST.EXIT_SURVEY.REASONS.DONT_UNDERSTAND]: 'it What are you trying to do?',
            [CONST.EXIT_SURVEY.REASONS.PREFER_CLASSIC]: 'it Why do you prefer Expensify Classic?',
        },
        responsePlaceholder: 'it Your response',
        thankYou: 'it Thanks for the feedback!',
        thankYouSubtitle: 'it Your responses will help us build a better product to get stuff done. Thank you so much!',
        goToExpensifyClassic: 'it Switch to Expensify Classic',
        offlineTitle: "it Looks like you're stuck here...",
        offline:
            "it You appear to be offline. Unfortunately, Expensify Classic doesn't work offline, but New Expensify does. If you prefer to use Expensify Classic, try again when you have an internet connection.",
        quickTip: 'it Quick tip...',
        quickTipSubTitle: 'it You can go straight to Expensify Classic by visiting expensify.com. Bookmark it for an easy shortcut!',
        bookACall: 'it Book a call',
        noThanks: 'it No thanks',
        bookACallTitle: 'it Would you like to speak to a product manager?',
        benefits: {
            [CONST.EXIT_SURVEY.BENEFIT.CHATTING_DIRECTLY]: 'it Chatting directly on expenses and reports',
            [CONST.EXIT_SURVEY.BENEFIT.EVERYTHING_MOBILE]: 'it Ability to do everything on mobile',
            [CONST.EXIT_SURVEY.BENEFIT.TRAVEL_EXPENSE]: 'it Travel and expense at the speed of chat',
        },
        bookACallTextTop: 'it By switching to Expensify Classic, you will miss out on:',
        bookACallTextBottom: 'it We\u2019d be excited to get on a call with you to understand why. You can book a call with one of our senior product managers to discuss your needs.',
        takeMeToExpensifyClassic: 'it Take me to Expensify Classic',
    },
    listBoundary: {
        errorMessage: 'it An error occurred while loading more messages.',
        tryAgain: 'it Try again',
    },
    systemMessage: {
        mergedWithCashTransaction: 'it matched a receipt to this transaction',
    },
    subscription: {
        authenticatePaymentCard: 'it Authenticate payment card',
        mobileReducedFunctionalityMessage: 'it You can\u2019t make changes to your subscription in the mobile app.',
        badge: {
            freeTrial: ({numOfDays}: BadgeFreeTrialParams) => `it Free trial: ${numOfDays} ${numOfDays === 1 ? 'day' : 'days'} left`,
        },
        billingBanner: {
            policyOwnerAmountOwed: {
                title: 'it Your payment info is outdated',
                subtitle: ({date}: BillingBannerSubtitleWithDateParams) => `it Update your payment card by ${date} to continue using all of your favorite features.`,
            },
            policyOwnerAmountOwedOverdue: {
                title: 'it Your payment info is outdated',
                subtitle: 'it Please update your payment information.',
            },
            policyOwnerUnderInvoicing: {
                title: 'it Your payment info is outdated',
                subtitle: ({date}: BillingBannerSubtitleWithDateParams) => `it Your payment is past due. Please pay your invoice by ${date} to avoid service interruption.`,
            },
            policyOwnerUnderInvoicingOverdue: {
                title: 'it Your payment info is outdated',
                subtitle: 'it Your payment is past due. Please pay your invoice.',
            },
            billingDisputePending: {
                title: 'it Your card couldn\u2019t be charged',
                subtitle: ({amountOwed, cardEnding}: BillingBannerDisputePendingParams) =>
                    `it You disputed the ${amountOwed} charge on the card ending in ${cardEnding}. Your account will be locked until the dispute is resolved with your bank.`,
            },
            cardAuthenticationRequired: {
                title: 'it Your card couldn\u2019t be charged',
                subtitle: ({cardEnding}: BillingBannerCardAuthenticationRequiredParams) =>
                    `it Your payment card hasn\u2019t been fully authenticated. Please complete the authentication process to activate your payment card ending in ${cardEnding}.`,
            },
            insufficientFunds: {
                title: 'it Your card couldn\u2019t be charged',
                subtitle: ({amountOwed}: BillingBannerInsufficientFundsParams) =>
                    `it Your payment card was declined due to insufficient funds. Please retry or add a new payment card to clear your ${amountOwed} outstanding balance.`,
            },
            cardExpired: {
                title: 'it Your card couldn\u2019t be charged',
                subtitle: ({amountOwed}: BillingBannerCardExpiredParams) => `it Your payment card expired. Please add a new payment card to clear your ${amountOwed} outstanding balance.`,
            },
            cardExpireSoon: {
                title: 'it Your card is expiring soon',
                subtitle: 'it Your payment card will expire at the end of this month. Click the three-dot menu below to update it and continue using all your favorite features.',
            },
            retryBillingSuccess: {
                title: 'it Success!',
                subtitle: 'it Your card has been billed successfully.',
            },
            retryBillingError: {
                title: 'it Your card couldn\u2019t be charged',
                subtitle: 'it Before retrying, please call your bank directly to authorize Expensify charges and remove any holds. Otherwise, try adding a different payment card.',
            },
            cardOnDispute: ({amountOwed, cardEnding}: BillingBannerCardOnDisputeParams) =>
                `it You disputed the ${amountOwed} charge on the card ending in ${cardEnding}. Your account will be locked until the dispute is resolved with your bank.`,
            preTrial: {
                title: 'it Start a free trial',
                subtitleStart: 'it As a next step, ',
                subtitleLink: 'it complete your setup checklist ',
                subtitleEnd: 'it so your team can start expensing.',
            },
            trialStarted: {
                title: ({numOfDays}: TrialStartedTitleParams) => `it Trial: ${numOfDays} ${numOfDays === 1 ? 'day' : 'days'} left!`,
                subtitle: 'it Add a payment card to continue using all of your favorite features.',
            },
            trialEnded: {
                title: 'it Your free trial has ended',
                subtitle: 'it Add a payment card to continue using all of your favorite features.',
            },
            earlyDiscount: {
                claimOffer: 'it Claim offer',
                noThanks: 'it No thanks',
                subscriptionPageTitle: {
                    phrase1: ({discountType}: EarlyDiscountTitleParams) => `it ${discountType}% off your first year!`,
                    phrase2: `Just add a payment card and start an annual subscription.`,
                },
                onboardingChatTitle: {
                    phrase1: 'it Limited-time offer:',
                    phrase2: ({discountType}: EarlyDiscountTitleParams) => `it ${discountType}% off your first year!`,
                },
                subtitle: ({days, hours, minutes, seconds}: EarlyDiscountSubtitleParams) => `Claim within ${days > 0 ? `${days}d : ` : ''}${hours}h : ${minutes}m : ${seconds}s`,
            },
        },
        cardSection: {
            title: 'it Payment',
            subtitle: 'it Add a card to pay for your Expensify subscription.',
            addCardButton: 'it Add payment card',
            cardNextPayment: ({nextPaymentDate}: CardNextPaymentParams) => `it Your next payment date is ${nextPaymentDate}.`,
            cardEnding: ({cardNumber}: CardEndingParams) => `it Card ending in ${cardNumber}`,
            cardInfo: ({name, expiration, currency}: CardInfoParams) => `it Name: ${name}, Expiration: ${expiration}, Currency: ${currency}`,
            changeCard: 'it Change payment card',
            changeCurrency: 'it Change payment currency',
            cardNotFound: 'it No payment card added',
            retryPaymentButton: 'it Retry payment',
            authenticatePayment: 'it Authenticate payment',
            requestRefund: 'it Request refund',
            requestRefundModal: {
                phrase1: 'it Getting a refund is easy, just downgrade your account before your next billing date and you\u2019ll receive a refund.',
                phrase2:
                    'it Heads up: Downgrading your account means your workspace(s) will be deleted. This action can\u2019t be undone, but you can always create a new workspace if you change your mind.',
                confirm: 'it Delete workspace(s) and downgrade',
            },
            viewPaymentHistory: 'it View payment history',
        },
        yourPlan: {
            title: 'it Your plan',
            collect: {
                title: 'it Collect',
                priceAnnual: ({lower, upper}: YourPlanPriceParams) => `it From ${lower}/active member with the Expensify Card, ${upper}/active member without the Expensify Card.`,
                pricePayPerUse: ({lower, upper}: YourPlanPriceParams) => `it From ${lower}/active member with the Expensify Card, ${upper}/active member without the Expensify Card.`,
                benefit1: 'it Unlimited SmartScans and distance tracking',
                benefit2: 'it Expensify Cards with Smart Limits',
                benefit3: 'it Bill pay and invoicing',
                benefit4: 'it Expense approvals',
                benefit5: 'it ACH reimbursement',
                benefit6: 'it QuickBooks and Xero integrations',
                benefit7: 'it Custom insights and reporting',
            },
            control: {
                title: 'it Control',
                priceAnnual: ({lower, upper}: YourPlanPriceParams) => `it From ${lower}/active member with the Expensify Card, ${upper}/active member without the Expensify Card.`,
                pricePayPerUse: ({lower, upper}: YourPlanPriceParams) => `it From ${lower}/active member with the Expensify Card, ${upper}/active member without the Expensify Card.`,
                benefit1: 'it Everything in Collect, plus:',
                benefit2: 'it NetSuite and Sage Intacct integrations',
                benefit3: 'it Certinia and Workday sync',
                benefit4: 'it Multiple expense approvers',
                benefit5: 'it SAML/SSO',
                benefit6: 'it Budgeting',
            },
            saveWithExpensifyTitle: 'it Save with the Expensify Card',
            saveWithExpensifyDescription: 'it Use our savings calculator to see how cash back from the Expensify Card can reduce your Expensify bill.',
            saveWithExpensifyButton: 'it Learn more',
        },
        details: {
            title: 'it Subscription details',
            annual: 'it Annual subscription',
            taxExempt: 'it Request tax exempt status',
            taxExemptEnabled: 'it Tax exempt',
            payPerUse: 'it Pay-per-use',
            subscriptionSize: 'it Subscription size',
            headsUp:
                "it Heads up: If you don\u2019t set your subscription size now, we\u2019ll set it automatically to your first month's active member count. You\u2019ll then be committed to paying for at least this number of members for the next 12 months. You can increase your subscription size at any time, but you can\u2019t decrease it until your subscription is over.",
            zeroCommitment: 'it Zero commitment at the discounted annual subscription rate',
        },
        subscriptionSize: {
            title: 'it Subscription size',
            yourSize: 'it Your subscription size is the number of open seats that can be filled by any active member in a given month.',
            eachMonth:
                'it Each month, your subscription covers up to the number of active members set above. Any time you increase your subscription size, you\u2019ll start a new 12-month subscription at that new size.',
            note: 'it Note: An active member is anyone who has created, edited, submitted, approved, reimbursed, or exported expense data tied to your company workspace.',
            confirmDetails: 'it Confirm your new annual subscription details:',
            subscriptionSize: 'it Subscription size',
            activeMembers: ({size}: SubscriptionSizeParams) => `it ${size} active members/month`,
            subscriptionRenews: 'it Subscription renews',
            youCantDowngrade: 'it You can\u2019t downgrade during your annual subscription.',
            youAlreadyCommitted: ({size, date}: SubscriptionCommitmentParams) =>
                `it You already committed to an annual subscription size of ${size} active members per month until ${date}. You can switch to a pay-per-use subscription on ${date} by disabling auto-renew.`,
            error: {
                size: 'it Please enter a valid subscription size.',
                sameSize: 'it Please enter a number different than your current subscription size.',
            },
        },
        paymentCard: {
            addPaymentCard: 'it Add payment card',
            enterPaymentCardDetails: 'it Enter your payment card details',
            security: 'it Expensify is PCI-DSS compliant, uses bank-level encryption, and utilizes redundant infrastructure to protect your data.',
            learnMoreAboutSecurity: 'it Learn more about our security.',
        },
        subscriptionSettings: {
            title: 'it Subscription settings',
            autoRenew: 'it Auto-renew',
            autoIncrease: 'it Auto-increase annual seats',
            saveUpTo: ({amountWithCurrency}: SubscriptionSettingsSaveUpToParams) => `it Save up to ${amountWithCurrency}/month per active member`,
            automaticallyIncrease:
                'it Automatically increase your annual seats to accommodate for active members that exceed your subscription size. Note: This will extend your annual subscription end date.',
            disableAutoRenew: 'it Disable auto-renew',
            helpUsImprove: 'it Help us improve Expensify',
            whatsMainReason: "it What's the main reason you're disabling auto-renew?",
            renewsOn: ({date}: SubscriptionSettingsRenewsOnParams) => `it Renews on ${date}.`,
        },
        requestEarlyCancellation: {
            title: 'it Request early cancellation',
            subtitle: 'it What\u2019s the main reason you\u2019re requesting early cancellation?',
            subscriptionCanceled: {
                title: 'it Subscription canceled',
                subtitle: 'it Your annual subscription has been canceled.',
                info: 'it If you want to keep using your workspace(s) on a pay-per-use basis, you\u2019re all set.',
                preventFutureActivity: {
                    part1: 'it If you\u2019d like to prevent future activity and charges, you must ',
                    link: 'it delete your workspace(s)',
                    part2: 'it . Note that when you delete your workspace(s), you\u2019ll be charged for any outstanding activity that was incurred during the current calendar month.',
                },
            },
            requestSubmitted: {
                title: 'it Request submitted',
                subtitle: {
                    part1: 'it Thanks for letting us know you\u2019re interested in canceling your subscription. We\u2019re reviewing your request and will be in touch soon via your chat with ',
                    link: 'it Concierge',
                    part2: 'it .',
                },
            },
            acknowledgement: {
                part1: 'it By requesting early cancellation, I acknowledge and agree that Expensify has no obligation to grant such request under the Expensify ',
                link: 'it Terms of Service',
                part2: 'it  or other applicable services agreement between me and Expensify and that Expensify retains sole discretion with regard to granting any such request.',
            },
        },
    },
    feedbackSurvey: {
        tooLimited: 'it Functionality needs improvement',
        tooExpensive: 'it Too expensive',
        inadequateSupport: 'it Inadequate customer support',
        businessClosing: 'it Company closing, downsizing, or acquired',
        additionalInfoTitle: 'it What software are you moving to and why?',
        additionalInfoInputLabel: 'it Your response',
    },
    roomChangeLog: {
        updateRoomDescription: 'it set the room description to:',
        clearRoomDescription: 'it cleared the room description',
    },
    delegate: {
        switchAccount: 'it Switch accounts:',
        copilotDelegatedAccess: 'it Copilot: Delegated access',
        copilotDelegatedAccessDescription: 'it Allow other members to access your account.',
        addCopilot: 'it Add copilot',
        membersCanAccessYourAccount: 'it These members can access your account:',
        youCanAccessTheseAccounts: 'it You can access these accounts via the account switcher:',
        role: ({role}: OptionalParam<DelegateRoleParams> = {}) => {
            switch (role) {
                case CONST.DELEGATE_ROLE.ALL:
                    return 'it Full';
                case CONST.DELEGATE_ROLE.SUBMITTER:
                    return 'it Limited';
                default:
                    return 'it ';
            }
        },
        genericError: 'it Oops, something went wrong. Please try again.',
        onBehalfOfMessage: ({delegator}: DelegatorParams) => `it on behalf of ${delegator}`,
        accessLevel: 'it Access level',
        confirmCopilot: 'it Confirm your copilot below.',
        accessLevelDescription: 'it Choose an access level below. Both Full and Limited access allow copilots to view all conversations and expenses.',
        roleDescription: ({role}: OptionalParam<DelegateRoleParams> = {}) => {
            switch (role) {
                case CONST.DELEGATE_ROLE.ALL:
                    return 'it Allow another member to take all actions in your account, on your behalf. Includes chat, submissions, approvals, payments, settings updates, and more.';
                case CONST.DELEGATE_ROLE.SUBMITTER:
                    return 'it Allow another member to take most actions in your account, on your behalf. Excludes approvals, payments, rejections, and holds.';
                default:
                    return 'it ';
            }
        },
        removeCopilot: 'it Remove copilot',
        removeCopilotConfirmation: 'it Are you sure you want to remove this copilot?',
        changeAccessLevel: 'it Change access level',
        makeSureItIsYou: "it Let's make sure it's you",
        enterMagicCode: ({contactMethod}: EnterMagicCodeParams) => `it Please enter the magic code sent to ${contactMethod} to add a copilot. It should arrive within a minute or two.`,
        enterMagicCodeUpdate: ({contactMethod}: EnterMagicCodeParams) => `it Please enter the magic code sent to ${contactMethod} to update your copilot.`,
        notAllowed: 'it Not so fast...',
        noAccessMessage: "it As a copilot, you don't have access to \nthis page. Sorry!",
        notAllowedMessageStart: `As a`,
        notAllowedMessageHyperLinked: 'it  copilot',
        notAllowedMessageEnd: ({accountOwnerEmail}: AccountOwnerParams) => `it  for ${accountOwnerEmail}, you don't have permission to take this action. Sorry!`,
    },
    debug: {
        debug: 'it Debug',
        details: 'it Details',
        JSON: 'it JSON',
        reportActions: 'it Actions',
        reportActionPreview: 'it Preview',
        nothingToPreview: 'it Nothing to preview',
        editJson: 'it Edit JSON:',
        preview: 'it Preview:',
        missingProperty: ({propertyName}: MissingPropertyParams) => `it Missing ${propertyName}`,
        invalidProperty: ({propertyName, expectedType}: InvalidPropertyParams) => `it Invalid property: ${propertyName} - Expected: ${expectedType}`,
        invalidValue: ({expectedValues}: InvalidValueParams) => `it Invalid value - Expected: ${expectedValues}`,
        missingValue: 'it Missing value',
        createReportAction: 'it Create Report Action',
        reportAction: 'it Report Action',
        report: 'it Report',
        transaction: 'it Transaction',
        violations: 'it Violations',
        transactionViolation: 'it Transaction Violation',
        hint: "it Data changes won't be sent to the backend",
        textFields: 'it Text fields',
        numberFields: 'it Number fields',
        booleanFields: 'it Boolean fields',
        constantFields: 'it Constant fields',
        dateTimeFields: 'it DateTime fields',
        date: 'it Date',
        time: 'it Time',
        none: 'it None',
        visibleInLHN: 'it Visible in LHN',
        GBR: 'it GBR',
        RBR: 'it RBR',
        true: 'it true',
        false: 'it false',
        viewReport: 'it View Report',
        viewTransaction: 'it View transaction',
        createTransactionViolation: 'it Create transaction violation',
        reasonVisibleInLHN: {
            hasDraftComment: 'it Has draft comment',
            hasGBR: 'it Has GBR',
            hasRBR: 'it Has RBR',
            pinnedByUser: 'it Pinned by member',
            hasIOUViolations: 'it Has IOU violations',
            hasAddWorkspaceRoomErrors: 'it Has add workspace room errors',
            isUnread: 'it Is unread (focus mode)',
            isArchived: 'it Is archived (most recent mode)',
            isSelfDM: 'it Is self DM',
            isFocused: 'it Is temporarily focused',
        },
        reasonGBR: {
            hasJoinRequest: 'it Has join request (admin room)',
            isUnreadWithMention: 'it Is unread with mention',
            isWaitingForAssigneeToCompleteAction: 'it Is waiting for assignee to complete action',
            hasChildReportAwaitingAction: 'it Has child report awaiting action',
            hasMissingInvoiceBankAccount: 'it Has missing invoice bank account',
        },
        reasonRBR: {
            hasErrors: 'it Has errors in report or report actions data',
            hasViolations: 'it Has violations',
            hasTransactionThreadViolations: 'it Has transaction thread violations',
        },
        indicatorStatus: {
            theresAReportAwaitingAction: "it There's a report awaiting action",
            theresAReportWithErrors: "it There's a report with errors",
            theresAWorkspaceWithCustomUnitsErrors: "it There's a workspace with custom units errors",
            theresAProblemWithAWorkspaceMember: "it There's a problem with a workspace member",
            theresAProblemWithAContactMethod: "it There's a problem with a contact method",
            aContactMethodRequiresVerification: 'it A contact method requires verification',
            theresAProblemWithAPaymentMethod: "it There's a problem with a payment method",
            theresAProblemWithAWorkspace: "it There's a problem with a workspace",
            theresAProblemWithYourReimbursementAccount: "it There's a problem with your reimbursement account",
            theresABillingProblemWithYourSubscription: "it There's a billing problem with your subscription",
            yourSubscriptionHasBeenSuccessfullyRenewed: 'it Your subscription has been successfully renewed',
            theresWasAProblemDuringAWorkspaceConnectionSync: 'it There was a problem during a workspace connection sync',
            theresAProblemWithYourWallet: "it There's a problem with your wallet",
            theresAProblemWithYourWalletTerms: "it There's a problem with your wallet terms",
        },
    },
    emptySearchView: {
        takeATour: 'it Take a tour',
    },
    tour: {
        takeATwoMinuteTour: 'it Take a 2-minute tour',
        exploreExpensify: 'it Explore everything Expensify has to offer',
    },
    migratedUserWelcomeModal: {
        title: 'it Travel and expense, at the speed of chat',
        subtitle: 'it New Expensify has the same great automation, but now with amazing collaboration:',
        confirmText: "it Let's go!",
        features: {
            chat: 'it <strong>Chat directly on any expense</strong>, report, or workspace',
            scanReceipt: 'it <strong>Scan receipts</strong> and get paid back',
            crossPlatform: 'it Do <strong>everything</strong> from your phone or browser',
        },
    },
    productTrainingTooltip: {
        conciergeLHNGBR: {
            part1: 'it Get started',
            part2: 'it  here!',
        },
        saveSearchTooltip: {
            part1: 'it Rename your saved searches',
            part2: 'it  here!',
        },
        quickActionButton: {
            part1: 'it Quick action!',
            part2: 'it  Just a tap away',
        },
        workspaceChatCreate: {
            part1: 'it Submit your',
            part2: 'it  expenses',
            part3: 'it  here!',
        },
        searchFilterButtonTooltip: {
            part1: 'it Customize your search',
            part2: 'it  here!',
        },
        bottomNavInboxTooltip: {
            part1: 'it Your to-do list',
            part2: 'it \n\uD83D\uDFE2 = ready for you',
            part3: 'it  \uD83D\uDD34 = needs review',
        },
        workspaceChatTooltip: {
            part1: 'it Submit expenses',
            part2: 'it  and chat with',
            part3: 'it \napprovers here!',
        },
        globalCreateTooltip: {
            part1: 'it Create expenses',
            part2: 'it , start chatting,',
            part3: 'it \nand more!',
        },
        scanTestTooltip: {
            part1: 'it Want to see how Scan works?',
            part2: 'it  Try a test receipt!',
            part3: 'it Choose our',
            part4: 'it  test manager',
            part5: 'it  to try it out!',
            part6: 'it Now,',
            part7: 'it  submit your expense',
            part8: 'it  and watch the magic happen!',
            tryItOut: 'it Try it out',
            noThanks: 'it No thanks',
        },
    },
    discardChangesConfirmation: {
        title: 'it Discard changes?',
        body: 'it Are you sure you want to discard the changes you made?',
        confirmText: 'it Discard changes',
    },
};
export default translations satisfies TranslationDeepObject<typeof translations>;
