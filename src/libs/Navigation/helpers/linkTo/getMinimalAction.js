
exports.__esModule = true;
/**
 * Motivation for this function is described in NAVIGATION.md
 *
 * @param action action generated by getActionFromState
 * @param state The root state
 * @returns minimalAction minimal action is the action that we should dispatch
 */
function getMinimalAction(action, state) {
    let _a; let _b; let _c; let _d; let _e; let _f;
    let currentAction = action;
    let currentState = state;
    let currentTargetKey;
    while (
        currentAction.payload &&
        'name' in currentAction.payload &&
        (currentState === null || currentState === void 0 ? void 0 : currentState.routes[(_a = currentState.index) !== null && _a !== void 0 ? _a : -1].name) === currentAction.payload.name
    ) {
        if (!(currentState === null || currentState === void 0 ? void 0 : currentState.routes[(_b = currentState.index) !== null && _b !== void 0 ? _b : -1].state)) {
            break;
        }
        currentState = currentState === null || currentState === void 0 ? void 0 : currentState.routes[(_c = currentState.index) !== null && _c !== void 0 ? _c : -1].state;
        currentTargetKey = currentState === null || currentState === void 0 ? void 0 : currentState.key;
        const payload = currentAction.payload;
        // Creating new smaller action
        currentAction = {
            type: currentAction.type,
            payload: {
                name: (_d = payload === null || payload === void 0 ? void 0 : payload.params) === null || _d === void 0 ? void 0 : _d.screen,
                params: (_e = payload === null || payload === void 0 ? void 0 : payload.params) === null || _e === void 0 ? void 0 : _e.params,
                path: (_f = payload === null || payload === void 0 ? void 0 : payload.params) === null || _f === void 0 ? void 0 : _f.path,
            },
            target: currentTargetKey,
        };
    }
    return {action: currentAction, targetState: currentState};
}
exports['default'] = getMinimalAction;
