diff --git a/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js b/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js
index e338d90..238989f 100644
--- a/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js
+++ b/node_modules/@react-native/virtualized-lists/Lists/VirtualizedList.js
@@ -89,6 +89,7 @@ type State = {
   firstVisibleItemKey: ?string,
   // When > 0 the scroll position available in JS is considered stale and should not be used.
   pendingScrollUpdateCount: number,
+  lastItemCount: number,
 };
 
 function getScrollingThreshold(threshold: number, visibleLength: number) {
@@ -404,12 +405,13 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
 
     const minIndexForVisible =
       this.props.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
+    const itemCount = this.props.getItemCount(this.props.data);
 
     this.state = {
       cellsAroundViewport: initialRenderRegion,
       renderMask: VirtualizedList._createRenderMask(props, initialRenderRegion),
       firstVisibleItemKey:
-        this.props.getItemCount(this.props.data) > minIndexForVisible
+        itemCount > minIndexForVisible
           ? VirtualizedList._getItemKey(this.props, minIndexForVisible)
           : null,
       // When we have a non-zero initialScrollIndex, we will receive a
@@ -420,6 +422,7 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
         this.props.initialScrollIndex > 0
           ? 1
           : 0,
+      lastItemCount: itemCount,
     };
   }
 
@@ -701,16 +704,15 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
     // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
     // sure we're rendering a reasonable range here.
     const itemCount = newProps.getItemCount(newProps.data);
-    if (itemCount === prevState.renderMask.numCells()) {
+    if (itemCount === prevState.renderMask.numCells() && itemCount === prevState.lastItemCount) {
       return prevState;
     }
-
     let maintainVisibleContentPositionAdjustment: ?number = null;
     const prevFirstVisibleItemKey = prevState.firstVisibleItemKey;
     const minIndexForVisible =
       newProps.maintainVisibleContentPosition?.minIndexForVisible ?? 0;
     const newFirstVisibleItemKey =
-      newProps.getItemCount(newProps.data) > minIndexForVisible
+      itemCount > minIndexForVisible
         ? VirtualizedList._getItemKey(newProps, minIndexForVisible)
         : null;
     if (
@@ -758,6 +760,7 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
         maintainVisibleContentPositionAdjustment != null
           ? prevState.pendingScrollUpdateCount + 1
           : prevState.pendingScrollUpdateCount,
+      lastItemCount: itemCount,
     };
   }
 
@@ -1159,7 +1162,7 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
     }
   }
 
-  componentDidUpdate(prevProps: Props) {
+  componentDidUpdate(prevProps: Props, prevState: State) {
     const {data, extraData} = this.props;
     if (data !== prevProps.data || extraData !== prevProps.extraData) {
       // clear the viewableIndices cache to also trigger
@@ -1181,6 +1184,11 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
     if (hiPriInProgress) {
       this._hiPriInProgress = false;
     }
+
+    if (this.state.cellsAroundViewport.first !== prevState.cellsAroundViewport.first ||
+        this.state.cellsAroundViewport.last !== prevState.cellsAroundViewport.last) {
+      this._maybeCallOnEdgeReached();
+    }
   }
 
   _cellRefs: {[string]: null | CellRenderer<any>} = {};
@@ -1219,7 +1227,7 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
     zoomScale: 1,
   };
   _scrollRef: ?React.ElementRef<any> = null;
-  _sentStartForContentLength = 0;
+  _sentStartForFirstVisibleItemKey: ?string = null;
   _sentEndForContentLength = 0;
   _updateCellsToRenderBatcher: Batchinator;
   _viewabilityTuples: Array<ViewabilityHelperCallbackTuple> = [];
@@ -1550,16 +1558,16 @@ class VirtualizedList extends StateSafePureComponent<Props, State> {
       onStartReached != null &&
       this.state.cellsAroundViewport.first === 0 &&
       isWithinStartThreshold &&
-      this._listMetrics.getContentLength() !== this._sentStartForContentLength
+      this.state.firstVisibleItemKey !== this._sentStartForFirstVisibleItemKey
     ) {
-      this._sentStartForContentLength = this._listMetrics.getContentLength();
+      this._sentStartForFirstVisibleItemKey = this.state.firstVisibleItemKey;
       onStartReached({distanceFromStart});
     }
 
     // If the user scrolls away from the start or end and back again,
     // cause onStartReached or onEndReached to be triggered again
     if (!isWithinStartThreshold) {
-      this._sentStartForContentLength = 0;
+      this._sentStartForFirstVisibleItemKey = null;
     }
     if (!isWithinEndThreshold) {
       this._sentEndForContentLength = 0;
