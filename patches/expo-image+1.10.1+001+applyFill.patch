diff --git a/node_modules/expo-image/android/src/main/java/com/caverock/androidsvg/SVGStyler.kt b/node_modules/expo-image/android/src/main/java/com/caverock/androidsvg/SVGStyler.kt
index 619daf2..b58a0df 100644
--- a/node_modules/expo-image/android/src/main/java/com/caverock/androidsvg/SVGStyler.kt
+++ b/node_modules/expo-image/android/src/main/java/com/caverock/androidsvg/SVGStyler.kt
@@ -1,5 +1,9 @@
 package com.caverock.androidsvg
 
+import com.caverock.androidsvg.SVG.SPECIFIED_COLOR
+import com.caverock.androidsvg.SVG.SPECIFIED_FILL
+import com.caverock.androidsvg.SVG.SvgElementBase
+
 internal fun replaceColor(paint: SVG.SvgPaint?, newColor: Int) {
   if (paint is SVG.Colour && paint !== SVG.Colour.TRANSPARENT) {
     paint.colour = newColor
@@ -19,15 +23,83 @@ internal fun replaceStyles(style: SVG.Style?, newColor: Int) {
   replaceColor(style.viewportFill, newColor)
 }
 
-internal fun applyTintColor(element: SVG.SvgObject, newColor: Int) {
-  if (element is SVG.SvgElementBase) {
+internal fun hasStyle(element: SvgElementBase): Boolean {
+  if (element.style == null && element.baseStyle == null) {
+    return false
+  }
+
+  val style = element.style
+  val hasColorInStyle = style != null &&
+          (
+                  style.color != null || style.fill != null || style.stroke != null ||
+                          style.stroke != null || style.stopColor != null || style.solidColor != null
+                  )
+
+  if (hasColorInStyle) {
+    return true
+  }
+
+  val baseStyle = element.baseStyle ?: return false
+  return baseStyle.color != null || baseStyle.fill != null || baseStyle.stroke != null ||
+          baseStyle.viewportFill != null || baseStyle.stopColor != null || baseStyle.solidColor != null
+}
+
+internal fun defineStyles(element: SvgElementBase, newColor: Int, hasStyle: Boolean) {
+  if (hasStyle) {
+    return
+  }
+
+  val style = if (element.style != null) {
+    element.style
+  } else {
+    SVG.Style().also {
+      element.style = it
+    }
+  }
+
+  val color = SVG.Colour(newColor)
+  when (element) {
+    is SVG.Path,
+    is SVG.Circle,
+    is SVG.Ellipse,
+    is SVG.Rect,
+    is SVG.SolidColor,
+    is SVG.Line,
+    is SVG.Polygon,
+    is SVG.PolyLine -> {
+      style.apply {
+        fill = color
+
+        specifiedFlags = SPECIFIED_FILL
+      }
+    }
+
+    is SVG.TextPath -> {
+      style.apply {
+        this.color = color
+
+        specifiedFlags = SPECIFIED_COLOR
+      }
+    }
+  }
+}
+
+internal fun applyTintColor(element: SVG.SvgObject, newColor: Int, parentDefinesStyle: Boolean) {
+  val definesStyle = if (element is SvgElementBase) {
+    val hasStyle = parentDefinesStyle || hasStyle(element)
+
     replaceStyles(element.baseStyle, newColor)
     replaceStyles(element.style, newColor)
+    defineStyles(element, newColor, hasStyle)
+
+    hasStyle
+  } else {
+    parentDefinesStyle
   }
 
   if (element is SVG.SvgContainer) {
     for (child in element.children) {
-      applyTintColor(child, newColor)
+      applyTintColor(child, newColor, definesStyle)
     }
   }
 }
@@ -36,8 +108,9 @@ fun applyTintColor(svg: SVG, newColor: Int) {
   val root = svg.rootElement
 
   replaceStyles(root.style, newColor)
+  val hasStyle = hasStyle(root)
 
   for (child in root.children) {
-    applyTintColor(child, newColor)
+    applyTintColor(child, newColor, hasStyle)
   }
 }
