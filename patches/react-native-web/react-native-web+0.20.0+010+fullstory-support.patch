diff --git a/node_modules/react-native-web/dist/exports/Text/index.js b/node_modules/react-native-web/dist/exports/Text/index.js
index 1076f55..1bba56c 100644
--- a/node_modules/react-native-web/dist/exports/Text/index.js
+++ b/node_modules/react-native-web/dist/exports/Text/index.js
@@ -29,7 +29,12 @@ import { useLocaleContext, getLocaleDirection } from '../../modules/useLocale';
 var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {
   href: true,
   lang: true,
-  pointerEvents: true
+  pointerEvents: true,
+  // Fullstory props
+  fsClass: true,
+  dataComponent: true,
+  dataElement: true,
+  dataSourceFile: true
 });
 var pickProps = props => pick(props, forwardPropsList);
 var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
diff --git a/node_modules/react-native-web/dist/exports/TextInput/index.js b/node_modules/react-native-web/dist/exports/TextInput/index.js
index 0f476a7..6fab5b0 100644
--- a/node_modules/react-native-web/dist/exports/TextInput/index.js
+++ b/node_modules/react-native-web/dist/exports/TextInput/index.js
@@ -66,7 +66,12 @@ var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedP
   rows: true,
   spellCheck: true,
   value: true,
-  type: true
+  type: true,
+  // Fullstory props
+  fsClass: true,
+  dataComponent: true,
+  dataElement: true,
+  dataSourceFile: true
 });
 var pickProps = props => pick(props, forwardPropsList);
 
diff --git a/node_modules/react-native-web/dist/exports/TouchableWithoutFeedback/index.js b/node_modules/react-native-web/dist/exports/TouchableWithoutFeedback/index.js
index 656e8d9..ec53965 100644
--- a/node_modules/react-native-web/dist/exports/TouchableWithoutFeedback/index.js
+++ b/node_modules/react-native-web/dist/exports/TouchableWithoutFeedback/index.js
@@ -30,7 +30,12 @@ var forwardPropsList = {
   onBlur: true,
   onFocus: true,
   onLayout: true,
-  testID: true
+  testID: true,
+  // Fullstory props
+  fsClass: true,
+  dataComponent: true,
+  dataElement: true,
+  dataSourceFile: true
 };
 var pickProps = props => pick(props, forwardPropsList);
 function TouchableWithoutFeedback(props, forwardedRef) {
diff --git a/node_modules/react-native-web/dist/exports/View/index.js b/node_modules/react-native-web/dist/exports/View/index.js
index 45343e5..054942f 100644
--- a/node_modules/react-native-web/dist/exports/View/index.js
+++ b/node_modules/react-native-web/dist/exports/View/index.js
@@ -28,7 +28,12 @@ var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedP
   lang: true,
   onScroll: true,
   onWheel: true,
-  pointerEvents: true
+  pointerEvents: true,
+  // Fullstory props
+  fsClass: true,
+  dataComponent: true,
+  dataElement: true,
+  dataSourceFile: true
 });
 var pickProps = props => pick(props, forwardPropsList);
 var View = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
diff --git a/node_modules/react-native-web/dist/modules/createDOMProps/index.js b/node_modules/react-native-web/dist/modules/createDOMProps/index.js
index 18f5e8b..1cfcc9c 100644
--- a/node_modules/react-native-web/dist/modules/createDOMProps/index.js
+++ b/node_modules/react-native-web/dist/modules/createDOMProps/index.js
@@ -1,6 +1,6 @@
 import _objectSpread from "@babel/runtime/helpers/objectSpread2";
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
-var _excluded = ["aria-activedescendant", "accessibilityActiveDescendant", "aria-atomic", "accessibilityAtomic", "aria-autocomplete", "accessibilityAutoComplete", "aria-busy", "accessibilityBusy", "aria-checked", "accessibilityChecked", "aria-colcount", "accessibilityColumnCount", "aria-colindex", "accessibilityColumnIndex", "aria-colspan", "accessibilityColumnSpan", "aria-controls", "accessibilityControls", "aria-current", "accessibilityCurrent", "aria-describedby", "accessibilityDescribedBy", "aria-details", "accessibilityDetails", "aria-disabled", "accessibilityDisabled", "aria-errormessage", "accessibilityErrorMessage", "aria-expanded", "accessibilityExpanded", "aria-flowto", "accessibilityFlowTo", "aria-haspopup", "accessibilityHasPopup", "aria-hidden", "accessibilityHidden", "aria-invalid", "accessibilityInvalid", "aria-keyshortcuts", "accessibilityKeyShortcuts", "aria-label", "accessibilityLabel", "aria-labelledby", "accessibilityLabelledBy", "aria-level", "accessibilityLevel", "aria-live", "accessibilityLiveRegion", "aria-modal", "accessibilityModal", "aria-multiline", "accessibilityMultiline", "aria-multiselectable", "accessibilityMultiSelectable", "aria-orientation", "accessibilityOrientation", "aria-owns", "accessibilityOwns", "aria-placeholder", "accessibilityPlaceholder", "aria-posinset", "accessibilityPosInSet", "aria-pressed", "accessibilityPressed", "aria-readonly", "accessibilityReadOnly", "aria-required", "accessibilityRequired", "role", "accessibilityRole", "aria-roledescription", "accessibilityRoleDescription", "aria-rowcount", "accessibilityRowCount", "aria-rowindex", "accessibilityRowIndex", "aria-rowspan", "accessibilityRowSpan", "aria-selected", "accessibilitySelected", "aria-setsize", "accessibilitySetSize", "aria-sort", "accessibilitySort", "aria-valuemax", "accessibilityValueMax", "aria-valuemin", "accessibilityValueMin", "aria-valuenow", "accessibilityValueNow", "aria-valuetext", "accessibilityValueText", "dataSet", "focusable", "id", "nativeID", "pointerEvents", "style", "tabIndex", "testID"];
+var _excluded = ["aria-activedescendant", "accessibilityActiveDescendant", "aria-atomic", "accessibilityAtomic", "aria-autocomplete", "accessibilityAutoComplete", "aria-busy", "accessibilityBusy", "aria-checked", "accessibilityChecked", "aria-colcount", "accessibilityColumnCount", "aria-colindex", "accessibilityColumnIndex", "aria-colspan", "accessibilityColumnSpan", "aria-controls", "accessibilityControls", "aria-current", "accessibilityCurrent", "aria-describedby", "accessibilityDescribedBy", "aria-details", "accessibilityDetails", "aria-disabled", "accessibilityDisabled", "aria-errormessage", "accessibilityErrorMessage", "aria-expanded", "accessibilityExpanded", "aria-flowto", "accessibilityFlowTo", "aria-haspopup", "accessibilityHasPopup", "aria-hidden", "accessibilityHidden", "aria-invalid", "accessibilityInvalid", "aria-keyshortcuts", "accessibilityKeyShortcuts", "aria-label", "accessibilityLabel", "aria-labelledby", "accessibilityLabelledBy", "aria-level", "accessibilityLevel", "aria-live", "accessibilityLiveRegion", "aria-modal", "accessibilityModal", "aria-multiline", "accessibilityMultiline", "aria-multiselectable", "accessibilityMultiSelectable", "aria-orientation", "accessibilityOrientation", "aria-owns", "accessibilityOwns", "aria-placeholder", "accessibilityPlaceholder", "aria-posinset", "accessibilityPosInSet", "aria-pressed", "accessibilityPressed", "aria-readonly", "accessibilityReadOnly", "aria-required", "accessibilityRequired", "role", "accessibilityRole", "aria-roledescription", "accessibilityRoleDescription", "aria-rowcount", "accessibilityRowCount", "aria-rowindex", "accessibilityRowIndex", "aria-rowspan", "accessibilityRowSpan", "aria-selected", "accessibilitySelected", "aria-setsize", "accessibilitySetSize", "aria-sort", "accessibilitySort", "aria-valuemax", "accessibilityValueMax", "aria-valuemin", "accessibilityValueMin", "aria-valuenow", "accessibilityValueNow", "aria-valuetext", "accessibilityValueText", "dataSet", "focusable", "id", "nativeID", "pointerEvents", "style", "tabIndex", "testID", "fsClass", "dataComponent", "dataElement", "dataSourceFile"];
 /**
  * Copyright (c) Nicolas Gallagher.
  *
@@ -145,6 +145,10 @@ var createDOMProps = (elementType, props, options) => {
     style = _props.style,
     tabIndex = _props.tabIndex,
     testID = _props.testID,
+    fsClass = _props.fsClass,
+    dataComponent = _props.dataComponent,
+    dataElement = _props.dataElement,
+    dataSourceFile = _props.dataSourceFile,
     domProps = _objectWithoutPropertiesLoose(_props, _excluded);
 
   /*
@@ -834,6 +838,26 @@ var createDOMProps = (elementType, props, options) => {
   if (domProps.type == null && elementType === 'button') {
     domProps.type = 'button';
   }
+
+  // Fullstory props
+  if (fsClass != null) {
+    // We append `fsClass` prop to the `class` attribute of the element
+    // so Fullstory can correctly identify which elements it must mask/unmask.
+    if (domProps.className) {
+      domProps.className = domProps.className + " " + fsClass;
+    } else {
+      domProps.className = fsClass;
+    }
+  }
+  if (dataComponent != null) {
+    domProps['data-component'] = dataComponent;
+  }
+  if (dataElement != null) {
+    domProps['data-element'] = dataElement;
+  }
+  if (dataSourceFile != null) {
+    domProps['data-source-file'] = dataSourceFile;
+  }
   return domProps;
 };
 export default createDOMProps;
\ No newline at end of file
diff --git a/node_modules/react-native-web/src/exports/Text/index.js b/node_modules/react-native-web/src/exports/Text/index.js
index f27ccec..c5b996e 100644
--- a/node_modules/react-native-web/src/exports/Text/index.js
+++ b/node_modules/react-native-web/src/exports/Text/index.js
@@ -39,7 +39,13 @@ const forwardPropsList = Object.assign(
   {
     href: true,
     lang: true,
-    pointerEvents: true
+    pointerEvents: true,
+
+    // Fullstory props
+    fsClass: true,
+    dataComponent: true,
+    dataElement: true,
+    dataSourceFile: true
   }
 );
 
diff --git a/node_modules/react-native-web/src/exports/TextInput/index.js b/node_modules/react-native-web/src/exports/TextInput/index.js
index 8f8de0b..ba933c2 100644
--- a/node_modules/react-native-web/src/exports/TextInput/index.js
+++ b/node_modules/react-native-web/src/exports/TextInput/index.js
@@ -77,7 +77,13 @@ const forwardPropsList = Object.assign(
     rows: true,
     spellCheck: true,
     value: true,
-    type: true
+    type: true,
+
+    // Fullstory props
+    fsClass: true,
+    dataComponent: true,
+    dataElement: true,
+    dataSourceFile: true
   }
 );
 
diff --git a/node_modules/react-native-web/src/exports/TouchableWithoutFeedback/index.js b/node_modules/react-native-web/src/exports/TouchableWithoutFeedback/index.js
index e2ef7d0..7c69697 100644
--- a/node_modules/react-native-web/src/exports/TouchableWithoutFeedback/index.js
+++ b/node_modules/react-native-web/src/exports/TouchableWithoutFeedback/index.js
@@ -56,7 +56,13 @@ const forwardPropsList = {
   onBlur: true,
   onFocus: true,
   onLayout: true,
-  testID: true
+  testID: true,
+
+  // Fullstory props
+  fsClass: true,
+  dataComponent: true,
+  dataElement: true,
+  dataSourceFile: true
 };
 
 const pickProps = (props) => pick(props, forwardPropsList);
diff --git a/node_modules/react-native-web/src/exports/View/index.js b/node_modules/react-native-web/src/exports/View/index.js
index cec4d58..f04f897 100644
--- a/node_modules/react-native-web/src/exports/View/index.js
+++ b/node_modules/react-native-web/src/exports/View/index.js
@@ -40,7 +40,13 @@ const forwardPropsList = Object.assign(
     lang: true,
     onScroll: true,
     onWheel: true,
-    pointerEvents: true
+    pointerEvents: true,
+
+    // Fullstory props
+    fsClass: true,
+    dataComponent: true,
+    dataElement: true,
+    dataSourceFile: true
   }
 );
 
diff --git a/node_modules/react-native-web/src/modules/createDOMProps/index.js b/node_modules/react-native-web/src/modules/createDOMProps/index.js
index 3fbb3df..3376779 100644
--- a/node_modules/react-native-web/src/modules/createDOMProps/index.js
+++ b/node_modules/react-native-web/src/modules/createDOMProps/index.js
@@ -149,6 +149,13 @@ const createDOMProps = (elementType, props, options) => {
     style,
     tabIndex,
     testID,
+
+    // Fullstory props
+    fsClass,
+    dataComponent,
+    dataElement,
+    dataSourceFile,
+
     // Rest
     ...domProps
   } = props;
@@ -912,6 +919,27 @@ const createDOMProps = (elementType, props, options) => {
   if (domProps.type == null && elementType === 'button') {
     domProps.type = 'button';
   }
+
+  // Fullstory props
+  if (fsClass != null) {
+    // We append `fsClass` prop to the `class` attribute of the element
+    // so Fullstory can correctly identify which elements it must mask/unmask.
+    if (domProps.className) {
+      domProps.className = `${domProps.className} ${fsClass}`;
+    } else {
+      domProps.className = fsClass;
+    }
+  }
+  if (dataComponent != null) {
+    domProps['data-component'] = dataComponent;
+  }
+  if (dataElement != null) {
+    domProps['data-element'] = dataElement;
+  }
+  if (dataSourceFile != null) {
+    domProps['data-source-file'] = dataSourceFile;
+  }
+
   return domProps;
 };
 