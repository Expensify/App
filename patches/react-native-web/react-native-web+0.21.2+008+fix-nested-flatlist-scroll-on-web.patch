diff --git a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
index df40877..1b8a228 100644
--- a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
@@ -702,30 +702,41 @@ class VirtualizedList extends StateSafePureComponent {
 
     // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
     // For issue https://github.com/necolas/react-native-web/issues/995
-    this.invertedWheelEventHandler = ev => {
-      var scrollOffset = this.props.horizontal ? ev.target.scrollLeft : ev.target.scrollTop;
-      var scrollLength = this.props.horizontal ? ev.target.scrollWidth : ev.target.scrollHeight;
-      var clientLength = this.props.horizontal ? ev.target.clientWidth : ev.target.clientHeight;
-      var isEventTargetScrollable = scrollLength > clientLength;
-      var delta = this.props.horizontal ? ev.deltaX || ev.wheelDeltaX : ev.deltaY || ev.wheelDeltaY;
-      var leftoverDelta = delta;
-      if (isEventTargetScrollable) {
-        leftoverDelta = delta < 0 ? Math.min(delta + scrollOffset, 0) : Math.max(delta - (scrollLength - clientLength - scrollOffset), 0);
-      }
-      var targetDelta = delta - leftoverDelta;
-      if (this.props.inverted && this._scrollRef && this._scrollRef.getScrollableNode) {
-        var node = this._scrollRef.getScrollableNode();
-        if (this.props.horizontal) {
-          ev.target.scrollLeft += targetDelta;
-          var nextScrollLeft = node.scrollLeft - leftoverDelta;
-          node.scrollLeft = !this.props.getItemLayout ? Math.min(nextScrollLeft, this._totalCellLength) : nextScrollLeft;
-        } else {
-          ev.target.scrollTop += targetDelta;
-          var nextScrollTop = node.scrollTop - leftoverDelta;
-          node.scrollTop = !this.props.getItemLayout ? Math.min(nextScrollTop, this._totalCellLength) : nextScrollTop;
+    this.invertedWheelEventHandler = (ev) => {
+        const isHorizontal = this.props.horizontal;
+        const deltaX = ev.deltaX || ev.wheelDeltaX || 0;
+        const deltaY = ev.deltaY || ev.wheelDeltaY || 0;
+
+        const scrollOffset = isHorizontal ? ev.target.scrollLeft : ev.target.scrollTop;
+        const scrollLength = isHorizontal ? ev.target.scrollWidth : ev.target.scrollHeight;
+        const clientLength = isHorizontal ? ev.target.clientWidth : ev.target.clientHeight;
+        const isEventTargetScrollable = scrollLength > clientLength;
+        const delta = isHorizontal ? deltaX : deltaY;
+        let leftoverDelta = delta;
+        if (isEventTargetScrollable) {
+            leftoverDelta = delta < 0 ? Math.min(delta + scrollOffset, 0) : Math.max(delta - (scrollLength - clientLength - scrollOffset), 0);
+        }
+        const targetDelta = delta - leftoverDelta;
+        if (this.props.inverted && this._scrollRef && this._scrollRef.getScrollableNode) {
+            const node = this._scrollRef.getScrollableNode();
+            if (isHorizontal) {
+                ev.target.scrollLeft += targetDelta;
+                const nextScrollLeft = node.scrollLeft - leftoverDelta;
+                node.scrollLeft = !this.props.getItemLayout ? Math.min(nextScrollLeft, this._totalCellLength) : nextScrollLeft;
+                
+                if (Math.abs(deltaX) > Math.abs(deltaY)) {
+                    ev.preventDefault();
+                }
+            } else {
+                ev.target.scrollTop += targetDelta;
+                const nextScrollTop = node.scrollTop - leftoverDelta;
+                node.scrollTop = !this.props.getItemLayout ? Math.min(nextScrollTop, this._totalCellLength) : nextScrollTop;
+
+                if (Math.abs(deltaY) > Math.abs(deltaX)) {
+                    ev.preventDefault();
+                }
+            }
         }
-        ev.preventDefault();
-      }
     };
   }
   _checkProps(props) {
