diff --git a/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js b/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js
index 6c4bbb2..770dfee 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js
@@ -462,6 +462,21 @@ export type NativeProps = $ReadOnly<{|
     |}>,
   >,
 
+  /**
+   * Invoked when the user performs the paste action.
+   */
+  onPaste?: ?DirectEventHandler<
+    $ReadOnly<{|
+      target: Int32,
+      items: $ReadOnlyArray<
+        $ReadOnly<{|
+          type: string,
+          data: string,
+        |}>,
+      >,
+    |}>,
+  >,
+
   /**
    * The string that will be rendered before text input has been entered.
    */
@@ -668,6 +683,9 @@ export const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {
     topScroll: {
       registrationName: 'onScroll',
     },
+    topPaste: {
+      registrationName: 'onPaste',
+    },
   },
   validAttributes: {
     maxFontSizeMultiplier: true,
@@ -722,6 +740,7 @@ export const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {
     secureTextEntry: true,
     textBreakStrategy: true,
     onScroll: true,
+    onPaste: true,
     onContentSizeChange: true,
     disableFullscreenUI: true,
     includeFontPadding: true,
diff --git a/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js b/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
index 53d9349..865ccb2 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
@@ -88,6 +88,9 @@ const RCTTextInputViewConfig = {
     topClear: {
       registrationName: 'onClear',
     },
+    topPaste: {
+      registrationName: 'onPaste',
+    },
     topChangeSync: {
       registrationName: 'onChangeSync',
     },
@@ -163,6 +166,7 @@ const RCTTextInputViewConfig = {
       onSelectionChange: true,
       onContentSizeChange: true,
       onScroll: true,
+      onPaste: true,
       onChangeSync: true,
       onKeyPressSync: true,
     }),
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.d.ts b/node_modules/react-native/Libraries/Components/TextInput/TextInput.d.ts
index f7074aa..214ccc0 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.d.ts
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.d.ts
@@ -510,6 +510,16 @@ export interface TextInputSubmitEditingEventData {
   text: string;
 }
 
+/**
+ * @see TextInputProps.onPaste
+ */
+export interface TextInputPasteEventData extends TargetedEvent {
+  items: Array<{
+    type: string;
+    data: string;
+  }>;
+}
+
 /**
  * @see https://reactnative.dev/docs/textinput#props
  */
@@ -861,6 +871,13 @@ export interface TextInputProps
     | ((e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void)
     | undefined;
 
+  /**
+   * Invoked when the user performs the paste action.
+   */
+  onPaste?:
+    | ((e: NativeSyntheticEvent<TextInputPasteEventData>) => void)
+    | undefined;
+
   /**
    * The string that will be rendered before text input has been entered
    */
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
index b61fe39..64a5b99 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
@@ -93,6 +93,18 @@ export type EditingEvent = SyntheticEvent<
   |}>,
 >;
 
+export type PasteEvent = SyntheticEvent<
+  $ReadOnly<{|
+    target: number,
+    items: $ReadOnlyArray<
+      $ReadOnly<{|
+        type: string,
+        data: string,
+      |}>,
+    >,
+  |}>,
+>;
+
 type DataDetectorTypesType =
   | 'phoneNumber'
   | 'link'
@@ -833,6 +845,11 @@ export type Props = $ReadOnly<{|
    */
   onScroll?: ?(e: ScrollEvent) => mixed,
 
+  /**
+   * Invoked when the user performs the paste action.
+   */
+  onPaste?: ?(e: PasteEvent) => mixed,
+
   /**
    * The string that will be rendered before text input has been entered.
    */
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
index 0107e78..0684516 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
@@ -134,6 +134,18 @@ export type EditingEvent = SyntheticEvent<
   |}>,
 >;
 
+export type PasteEvent = SyntheticEvent<
+  $ReadOnly<{|
+    target: number,
+    items: $ReadOnlyArray<
+      $ReadOnly<{|
+        type: string,
+        data: string,
+      |}>,
+    >,
+  |}>,
+>;
+
 type DataDetectorTypesType =
   | 'phoneNumber'
   | 'link'
@@ -836,6 +848,11 @@ export type Props = $ReadOnly<{|
    */
   onScroll?: ?(e: ScrollEvent) => mixed,
 
+  /**
+   * Invoked when the user performs the paste action.
+   */
+  onPaste?: ?(e: PasteEvent) => mixed,
+
   /**
    * The string that will be rendered before text input has been entered.
    */
diff --git a/node_modules/react-native/Libraries/Text/TextInput/Multiline/RCTUITextView.mm b/node_modules/react-native/Libraries/Text/TextInput/Multiline/RCTUITextView.mm
index d5e2e22..065a819 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/Multiline/RCTUITextView.mm
+++ b/node_modules/react-native/Libraries/Text/TextInput/Multiline/RCTUITextView.mm
@@ -13,6 +13,10 @@
 #import <React/RCTBackedTextInputDelegateAdapter.h>
 #import <React/RCTTextAttributes.h>
 
+#import <MobileCoreServices/MobileCoreServices.h>
+#import <MobileCoreServices/UTType.h>
+#import <UIKit/UIKit.h>
+
 @implementation RCTUITextView {
   UILabel *_placeholderView;
   UITextView *_detachedTextView;
@@ -172,7 +176,31 @@ - (void)scrollRangeToVisible:(NSRange)range
 - (void)paste:(id)sender
 {
   _textWasPasted = YES;
-  [super paste:sender];
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  if (clipboard.hasImages) {
+    for (NSItemProvider *itemProvider in clipboard.itemProviders) {
+      if ([itemProvider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeImage]) {
+        for (NSString *identifier in itemProvider.registeredTypeIdentifiers) {
+          if (UTTypeConformsTo((__bridge CFStringRef)identifier, kUTTypeImage)) {
+            NSString *MIMEType = (__bridge_transfer NSString *)UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)identifier, kUTTagClassMIMEType);
+            NSString *fileExtension = (__bridge_transfer NSString *)UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)identifier, kUTTagClassFilenameExtension);
+            NSString *filePath = RCTTempFilePath(fileExtension, nil);
+            NSURL *fileURL = [NSURL fileURLWithPath:filePath];
+            NSData *fileData = [clipboard dataForPasteboardType:identifier];
+            [fileData writeToFile:filePath atomically:YES];
+            [_textInputDelegateAdapter didPaste:MIMEType withData:[fileURL absoluteString]];
+            break;
+          }
+        }
+        break;
+      }
+    }
+  } else {
+    if (clipboard.hasStrings) {
+      [_textInputDelegateAdapter didPaste:@"text/plain" withData:clipboard.string];
+    }
+    [super paste:sender];
+  }
 }
 
 // Turn off scroll animation to fix flaky scrolling.
@@ -264,6 +292,10 @@ - (BOOL)canPerformAction:(SEL)action withSender:(id)sender
     return NO;
   }
 
+  if (action == @selector(paste:) && [UIPasteboard generalPasteboard].hasImages) {
+    return YES;
+  }
+
   return [super canPerformAction:action withSender:sender];
 }
 
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegate.h b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegate.h
index 7187177..da00893 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegate.h
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegate.h
@@ -37,6 +37,8 @@ NS_ASSUME_NONNULL_BEGIN
 
 - (void)textInputDidChangeSelection;
 
+- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data;
+
 @optional
 
 - (void)scrollViewDidScroll:(UIScrollView *)scrollView;
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.h b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.h
index f1c32e6..0ce9dfe 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.h
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.h
@@ -20,6 +20,7 @@ NS_ASSUME_NONNULL_BEGIN
 
 - (void)skipNextTextInputDidChangeSelectionEventWithTextRange:(UITextRange *)textRange;
 - (void)selectedTextRangeWasSet;
+- (void)didPaste:(NSString *)type withData:(NSString *)data;
 
 @end
 
@@ -30,6 +31,7 @@ NS_ASSUME_NONNULL_BEGIN
 - (instancetype)initWithTextView:(UITextView<RCTBackedTextInputViewProtocol> *)backedTextInputView;
 
 - (void)skipNextTextInputDidChangeSelectionEventWithTextRange:(UITextRange *)textRange;
+- (void)didPaste:(NSString *)type withData:(NSString *)data;
 
 @end
 
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.mm b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.mm
index ac8e464..2b91802 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.mm
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBackedTextInputDelegateAdapter.mm
@@ -147,6 +147,11 @@ - (void)selectedTextRangeWasSet
   [self textFieldProbablyDidChangeSelection];
 }
 
+- (void)didPaste:(NSString *)type withData:(NSString *)data
+{
+  [_backedTextInputView.textInputDelegate textInputDidPaste:type withData:data];
+}
+
 #pragma mark - Generalization
 
 - (void)textFieldProbablyDidChangeSelection
@@ -292,6 +297,11 @@ - (void)skipNextTextInputDidChangeSelectionEventWithTextRange:(UITextRange *)tex
   _previousSelectedTextRange = textRange;
 }
 
+- (void)didPaste:(NSString *)type withData:(NSString *)data
+{
+  [_backedTextInputView.textInputDelegate textInputDidPaste:type withData:data];
+}
+
 #pragma mark - Generalization
 
 - (void)textViewProbablyDidChangeSelection
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.h b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.h
index 4804624..90b7081 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.h
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.h
@@ -37,6 +37,7 @@ NS_ASSUME_NONNULL_BEGIN
 @property (nonatomic, copy, nullable) RCTDirectEventBlock onChange;
 @property (nonatomic, copy, nullable) RCTDirectEventBlock onChangeSync;
 @property (nonatomic, copy, nullable) RCTDirectEventBlock onScroll;
+@property (nonatomic, copy, nullable) RCTDirectEventBlock onPaste;
 
 @property (nonatomic, assign) NSInteger mostRecentEventCount;
 @property (nonatomic, assign, readonly) NSInteger nativeEventCount;
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.mm b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.mm
index 95edfd5..5111bda 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.mm
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.mm
@@ -574,6 +574,26 @@ - (void)textInputDidChangeSelection
   });
 }
 
+- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data
+{
+  if (!_onPaste) {
+    return;
+  }
+
+  NSMutableArray *items = [NSMutableArray new];
+  [items addObject:@{
+    @"type" : type,
+    @"data" : data,
+  }];
+
+  NSDictionary *payload = @{
+    @"target" : self.reactTag,
+    @"items" : items,
+  };
+
+  _onPaste(payload);
+}
+
 - (void)updateLocalData
 {
   [self enforceTextAttributesIfNeeded];
diff --git a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputViewManager.mm b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputViewManager.mm
index db7c519..ec05595 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputViewManager.mm
+++ b/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputViewManager.mm
@@ -67,6 +67,7 @@ @implementation RCTBaseTextInputViewManager {
 RCT_EXPORT_VIEW_PROPERTY(onChangeSync, RCTDirectEventBlock)
 RCT_EXPORT_VIEW_PROPERTY(onSelectionChange, RCTDirectEventBlock)
 RCT_EXPORT_VIEW_PROPERTY(onScroll, RCTDirectEventBlock)
+RCT_EXPORT_VIEW_PROPERTY(onPaste, RCTDirectEventBlock)
 
 RCT_EXPORT_VIEW_PROPERTY(mostRecentEventCount, NSInteger)
 
diff --git a/node_modules/react-native/Libraries/Text/TextInput/Singleline/RCTUITextField.mm b/node_modules/react-native/Libraries/Text/TextInput/Singleline/RCTUITextField.mm
index 0318671..667e646 100644
--- a/node_modules/react-native/Libraries/Text/TextInput/Singleline/RCTUITextField.mm
+++ b/node_modules/react-native/Libraries/Text/TextInput/Singleline/RCTUITextField.mm
@@ -12,6 +12,10 @@
 #import <React/RCTUtils.h>
 #import <React/UIView+React.h>
 
+#import <MobileCoreServices/MobileCoreServices.h>
+#import <MobileCoreServices/UTType.h>
+#import <UIKit/UIKit.h>
+
 @implementation RCTUITextField {
   RCTBackedTextFieldDelegateAdapter *_textInputDelegateAdapter;
   NSDictionary<NSAttributedStringKey, id> *_defaultTextAttributes;
@@ -139,6 +143,10 @@ - (BOOL)canPerformAction:(SEL)action withSender:(id)sender
     return NO;
   }
 
+  if (action == @selector(paste:) && [UIPasteboard generalPasteboard].hasImages) {
+    return YES;
+  }
+
   return [super canPerformAction:action withSender:sender];
 }
 
@@ -222,7 +230,31 @@ - (void)scrollRangeToVisible:(NSRange)range
 - (void)paste:(id)sender
 {
   _textWasPasted = YES;
-  [super paste:sender];
+  UIPasteboard *clipboard = [UIPasteboard generalPasteboard];
+  if (clipboard.hasImages) {
+    for (NSItemProvider *itemProvider in clipboard.itemProviders) {
+      if ([itemProvider hasItemConformingToTypeIdentifier:(NSString *)kUTTypeImage]) {
+        for (NSString *identifier in itemProvider.registeredTypeIdentifiers) {
+          if (UTTypeConformsTo((__bridge CFStringRef)identifier, kUTTypeImage)) {
+            NSString *MIMEType = (__bridge_transfer NSString *)UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)identifier, kUTTagClassMIMEType);
+            NSString *fileExtension = (__bridge_transfer NSString *)UTTypeCopyPreferredTagWithClass((__bridge CFStringRef)identifier, kUTTagClassFilenameExtension);
+            NSString *filePath = RCTTempFilePath(fileExtension, nil);
+            NSURL *fileURL = [NSURL fileURLWithPath:filePath];
+            NSData *fileData = [clipboard dataForPasteboardType:identifier];
+            [fileData writeToFile:filePath atomically:YES];
+            [_textInputDelegateAdapter didPaste:MIMEType withData:[fileURL absoluteString]];
+            break;
+          }
+        }
+        break;
+      }
+    }
+  } else {
+    if (clipboard.hasStrings) {
+      [_textInputDelegateAdapter didPaste:@"text/plain" withData:clipboard.string];
+    }
+    [super paste:sender];
+  }
 }
 
 #pragma mark - Layout
diff --git a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
index f8358ed..91aff1a 100644
--- a/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
+++ b/node_modules/react-native/React/Fabric/Mounting/ComponentViews/TextInput/RCTTextInputComponentView.mm
@@ -481,6 +481,13 @@ - (void)textInputDidChangeSelection
   }
 }
 
+- (void)textInputDidPaste:(NSString *)type withData:(NSString *)data
+{
+  if (_eventEmitter) {
+    static_cast<const TextInputEventEmitter &>(*_eventEmitter).onPaste(std::string([type UTF8String]), std::string([data UTF8String]));
+  }
+}
+
 #pragma mark - RCTBackedTextInputDelegate (UIScrollViewDelegate)
 
 - (void)scrollViewDidScroll:(UIScrollView *)scrollView
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/PasteWatcher.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/PasteWatcher.java
new file mode 100644
index 0000000..bfb5819
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/PasteWatcher.java
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.textinput;
+
+/**
+ * Implement this interface to be informed of paste event in the
+ * ReactTextEdit This is used by the ReactTextInputManager to forward events
+ * from the EditText to JS
+ */
+interface PasteWatcher {
+  public void onPaste(String type, String data);
+}
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
index 56a1069..272ea7d 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactEditText.java
@@ -9,6 +9,10 @@ package com.facebook.react.views.textinput;
 
 import static com.facebook.react.uimanager.UIManagerHelper.getReactContext;
 
+import android.content.ClipboardManager;
+import android.content.ClipData;
+import android.content.ClipDescription;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.graphics.Canvas;
 import android.graphics.Color;
@@ -16,6 +20,7 @@ import android.graphics.Paint;
 import android.graphics.Rect;
 import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
+import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
 import android.text.Editable;
@@ -122,6 +127,7 @@ public class ReactEditText extends AppCompatEditText {
   private @Nullable SelectionWatcher mSelectionWatcher;
   private @Nullable ContentSizeWatcher mContentSizeWatcher;
   private @Nullable ScrollWatcher mScrollWatcher;
+  private @Nullable PasteWatcher mPasteWatcher;
   private InternalKeyListener mKeyListener;
   private boolean mDetectScrollMovement = false;
   private boolean mOnKeyPress = false;
@@ -165,6 +171,7 @@ public class ReactEditText extends AppCompatEditText {
       mKeyListener = new InternalKeyListener();
     }
     mScrollWatcher = null;
+    mPasteWatcher = null;
     mTextAttributes = new TextAttributes();
 
     applyTextAttributes();
@@ -332,8 +339,29 @@ public class ReactEditText extends AppCompatEditText {
    */
   @Override
   public boolean onTextContextMenuItem(int id) {
-    if (id == android.R.id.paste) {
+    if (id == android.R.id.paste || id == android.R.id.pasteAsPlainText) {
       id = android.R.id.pasteAsPlainText;
+      if (mPasteWatcher != null) {
+        ClipboardManager clipboardManager =
+            (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);
+        ClipData clipData = clipboardManager.getPrimaryClip();
+        String type = null;
+        String data = null;
+        if (clipData.getDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {
+          type = ClipDescription.MIMETYPE_TEXT_PLAIN;
+          data = clipData.getItemAt(0).getText().toString();
+        } else {
+          Uri itemUri = clipData.getItemAt(0).getUri();
+          if (itemUri != null) {
+            ContentResolver cr = getReactContext(this).getContentResolver();
+            type = cr.getType(itemUri);
+            data = itemUri.toString();
+          }
+        }
+        if (type != null && data != null) {
+          mPasteWatcher.onPaste(type, data);
+        }
+      }
     }
     return super.onTextContextMenuItem(id);
   }
@@ -395,6 +423,10 @@ public class ReactEditText extends AppCompatEditText {
     mScrollWatcher = scrollWatcher;
   }
 
+  public void setPasteWatcher(@Nullable PasteWatcher pasteWatcher) {
+    mPasteWatcher = pasteWatcher;
+  }
+
   /**
    * Attempt to set a selection or fail silently. Intentionally meant to handle bad inputs.
    * EventCounter is the same one used as with text.
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
index 2733e3c..93c3bec 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputManager.java
@@ -270,6 +270,9 @@ public class ReactTextInputManager extends BaseViewManager<ReactEditText, Layout
             .put(
                 ReactTextClearEvent.EVENT_NAME,
                 MapBuilder.of("registrationName", "onClear"))
+            .put(
+                "topPaste",
+                MapBuilder.of("registrationName", "onPaste"))
             .build());
     return eventTypeConstants;
   }
@@ -506,6 +509,15 @@ public class ReactTextInputManager extends BaseViewManager<ReactEditText, Layout
     }
   }
 
+  @ReactProp(name = "onPaste", defaultBoolean = false)
+  public void setOnPaste(final ReactEditText view, boolean onPaste) {
+    if (onPaste) {
+      view.setPasteWatcher(new ReactPasteWatcher(view));
+    } else {
+      view.setPasteWatcher(null);
+    }
+  }
+
   @ReactProp(name = "onKeyPress", defaultBoolean = false)
   public void setOnKeyPress(final ReactEditText view, boolean onKeyPress) {
     view.setOnKeyPress(onKeyPress);
@@ -1335,6 +1347,24 @@ public class ReactTextInputManager extends BaseViewManager<ReactEditText, Layout
       }
     }
   }
+  private static class ReactPasteWatcher implements PasteWatcher {
+    private final ReactEditText mReactEditText;
+    private final EventDispatcher mEventDispatcher;
+    private final int mSurfaceId;
+
+    public ReactPasteWatcher(ReactEditText editText) {
+      mReactEditText = editText;
+      ReactContext reactContext = getReactContext(editText);
+      mEventDispatcher = getEventDispatcher(reactContext, editText);
+      mSurfaceId = UIManagerHelper.getSurfaceId(reactContext);
+    }
+
+    @Override
+    public void onPaste(String type, String data) {
+      mEventDispatcher.dispatchEvent(
+          new ReactTextInputPasteEvent(mSurfaceId, mReactEditText.getId(), type, data));
+    }
+  }
 
   @Override
   public @Nullable Map<String, Object> getExportedViewConstants() {
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputPasteEvent.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputPasteEvent.java
new file mode 100644
index 0000000..78b14b7
--- /dev/null
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/textinput/ReactTextInputPasteEvent.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.react.views.textinput;
+
+import androidx.annotation.Nullable;
+import com.facebook.react.bridge.Arguments;
+import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.bridge.WritableArray;
+import com.facebook.react.uimanager.common.ViewUtil;
+import com.facebook.react.uimanager.events.Event;
+
+/**
+ * Event emitted by EditText native view when clipboard content is pasted
+ */
+class ReactTextInputPasteEvent extends Event<ReactTextInputPasteEvent> {
+
+  private static final String EVENT_NAME = "topPaste";
+
+  private String mType;
+  private String mData;
+
+  @Deprecated
+  public ReactTextInputPasteEvent(int viewId, String type, String data) {
+    this(ViewUtil.NO_SURFACE_ID, viewId, type, data);
+  }
+
+  public ReactTextInputPasteEvent(int surfaceId, int viewId, String type, String data) {
+    super(surfaceId, viewId);
+    mType = type;
+    mData = data;
+  }
+
+  @Override
+  public String getEventName() {
+    return EVENT_NAME;
+  }
+
+  @Override
+  public boolean canCoalesce() {
+    return false;
+  }
+
+  @Nullable
+  @Override
+  protected WritableMap getEventData() {
+    WritableMap eventData = Arguments.createMap();
+
+    WritableArray items = Arguments.createArray();
+    WritableMap item = Arguments.createMap();
+    item.putString("type", mType);
+    item.putString("data", mData);
+    items.pushMap(item);
+
+    eventData.putArray("items", items);
+
+    return eventData;
+  }
+}
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.cpp
index d7dd83d..6862b26 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.cpp
@@ -178,6 +178,19 @@ void TextInputEventEmitter::onScroll(const Metrics& textInputMetrics) const {
   });
 }
 
+void TextInputEventEmitter::onPaste(const std::string& type, const std::string& data) const {
+  dispatchEvent("onPaste", [type, data](jsi::Runtime& runtime) {
+    auto payload = jsi::Object(runtime);
+    auto items = jsi::Array(runtime, 1);
+    auto item = jsi::Object(runtime);
+    item.setProperty(runtime, "type", type);
+    item.setProperty(runtime, "data", data);
+    items.setValueAtIndex(runtime, 0, item);
+    payload.setProperty(runtime, "items", items);
+    return payload;
+  });
+}
+
 void TextInputEventEmitter::dispatchTextInputEvent(
     const std::string& name,
     const Metrics& textInputMetrics) const {
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.h b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.h
index 33a8b3a..a3c4c0a 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/textinput/TextInputEventEmitter.h
@@ -45,6 +45,7 @@ class TextInputEventEmitter : public ViewEventEmitter {
   void onSubmitEditing(const Metrics& textInputMetrics) const;
   void onKeyPress(const KeyPressMetrics& keyPressMetrics) const;
   void onScroll(const Metrics& textInputMetrics) const;
+  void onPaste(const std::string& type, const std::string& data) const;
 
  private:
   void dispatchTextInputEvent(
