diff --git a/node_modules/expo/src/winter/FormData.ts b/node_modules/expo/src/winter/FormData.ts
index d78f165..577501c 100644
--- a/node_modules/expo/src/winter/FormData.ts
+++ b/node_modules/expo/src/winter/FormData.ts
@@ -70,7 +70,16 @@ function normalizeArgs(
   blobFilename: string | undefined
 ): [string, File | string] {
   if (value instanceof Blob) {
-    value = { type: value.type, name: blobFilename || 'blob', blob: value };
+    // @ts-expect-error: `Blob.data.blobId` is react-native's proprietary property.
+    if (value.data?.blobId != null) {
+      // For react-native created Blob objects,
+      // we need to keep its original form as-is without breaking functionality.
+      // However, we need to pass `name` for our file name handling.
+      // @ts-expect-error: Mutating the Blob object to add the `name` property.
+      value.name = blobFilename || 'blob';
+    } else {
+      value = { type: value.type, name: blobFilename || 'blob', blob: value };
+    }
   } else if (typeof value !== 'object') {
     value = String(value);
   }
diff --git a/node_modules/expo/src/winter/fetch/convertFormData.ts b/node_modules/expo/src/winter/fetch/convertFormData.ts
index e559323..e8bdbdd 100644
--- a/node_modules/expo/src/winter/fetch/convertFormData.ts
+++ b/node_modules/expo/src/winter/fetch/convertFormData.ts
@@ -30,6 +30,20 @@ export async function convertFormDataAsync(
       results.push(entry.file.bytes());
     } else if ('blob' in entry) {
       results.push(new Uint8Array(await blobToArrayBufferAsync(entry.blob)));
+    } else if (entry._data?.blobId != null) {
+      // When `FormData.getParts()` is called, React Native will use spread operator to copy the object and loose the Blob type info.
+      // We should find the original Blob instance from the `FormData._parts` internal properties.
+      // @ts-expect-error: react-native's proprietary Blob type
+      const blob = formData._parts?.find(
+          ([name, value]) => value.data?.blobId === entry._data.blobId
+      );
+      if (blob == null) {
+        throw new Error('Cannot find the original Blob instance from FormData');
+      }
+      if (!(blob[1] instanceof Blob)) {
+        throw new Error('Unexpected value type for Blob entry in FormData');
+      }
+      results.push(new Uint8Array(await blobToArrayBufferAsync(blob[1])));
     } else {
       throw new Error('Unsupported FormDataPart implementation');
     }
