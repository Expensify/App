diff --git a/node_modules/react-native-modal/dist/modal.d.ts b/node_modules/react-native-modal/dist/modal.d.ts
index b63bcfc..bd6419e 100644
--- a/node_modules/react-native-modal/dist/modal.d.ts
+++ b/node_modules/react-native-modal/dist/modal.d.ts
@@ -161,6 +161,7 @@ export declare class ReactNativeModal extends React.Component<ModalProps, State>
     getDeviceHeight: () => number;
     getDeviceWidth: () => number;
     onBackButtonPress: () => boolean;
+    handleEscape: (e: KeyboardEvent) => void;
     shouldPropagateSwipe: (evt: GestureResponderEvent, gestureState: PanResponderGestureState) => boolean;
     buildPanResponder: () => void;
     getAccDistancePerDirection: (gestureState: PanResponderGestureState) => number;
diff --git a/node_modules/react-native-modal/dist/modal.js b/node_modules/react-native-modal/dist/modal.js
index 80f4e75..46277ea 100644
--- a/node_modules/react-native-modal/dist/modal.js
+++ b/node_modules/react-native-modal/dist/modal.js
@@ -75,6 +75,13 @@ export class ReactNativeModal extends React.Component {
             }
             return false;
         };
+        this.handleEscape = (e) => {
+            if (e.key === 'Escape') {
+                if (this.onBackButtonPress() === true) {
+                    e.stopImmediatePropagation();
+                }
+            }
+        };
         this.shouldPropagateSwipe = (evt, gestureState) => {
             return typeof this.props.propagateSwipe === 'function'
                 ? this.props.propagateSwipe(evt, gestureState)
@@ -383,7 +390,9 @@ export class ReactNativeModal extends React.Component {
                             this.setState({
                                 isVisible: false,
                             }, () => {
-                                this.props.onModalHide();
+                                if (Platform.OS !== 'ios') {
+                                    this.props.onModalHide();
+                                }
                             });
                         });
                     }
@@ -453,10 +462,18 @@ export class ReactNativeModal extends React.Component {
         if (this.state.isVisible) {
             this.open();
         }
+        if (Platform.OS === 'web') {
+            document?.body?.addEventListener?.('keyup', this.handleEscape, true);
+            return;
+        }
         BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPress);
     }
     componentWillUnmount() {
-        BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPress);
+        if (Platform.OS === 'web') {
+            document?.body?.removeEventListener?.('keyup', this.handleEscape, true);
+        } else {
+            BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPress);
+        }
         if (this.didUpdateDimensionsEmitter) {
             this.didUpdateDimensionsEmitter.remove();
         }
@@ -464,6 +481,9 @@ export class ReactNativeModal extends React.Component {
             InteractionManager.clearInteractionHandle(this.interactionHandle);
             this.interactionHandle = null;
         }
+        if (this.state.isVisible) {
+            this.props.onModalHide();
+        }
     }
     componentDidUpdate(prevProps) {
         // If the animations have been changed then rebuild them to make sure we're
@@ -490,7 +510,7 @@ export class ReactNativeModal extends React.Component {
     }
     render() {
         /* eslint-disable @typescript-eslint/no-unused-vars */
-        const { animationIn, animationInTiming, animationOut, animationOutTiming, avoidKeyboard, coverScreen, hasBackdrop, backdropColor, backdropOpacity, backdropTransitionInTiming, backdropTransitionOutTiming, customBackdrop, children, isVisible, onModalShow, onBackButtonPress, useNativeDriver, propagateSwipe, style, ...otherProps } = this.props;
+        const { animationIn, animationInTiming, animationOut, animationOutTiming, avoidKeyboard, coverScreen, hasBackdrop, backdropColor, backdropOpacity, backdropTransitionInTiming, backdropTransitionOutTiming, customBackdrop, children, isVisible, onModalShow, onBackButtonPress, useNativeDriver, propagateSwipe, style, onDismiss, ...otherProps } = this.props;
         const { testID, ...containerProps } = otherProps;
         const computedStyle = [
             { margin: this.getDeviceWidth() * 0.05, transform: [{ translateY: 0 }] },
@@ -523,9 +543,9 @@ export class ReactNativeModal extends React.Component {
                 this.makeBackdrop(),
                 containerView));
         }
-        return (React.createElement(Modal, Object.assign({ transparent: true, animationType: 'none', visible: this.state.isVisible, onRequestClose: onBackButtonPress }, otherProps),
+        return (React.createElement(Modal, Object.assign({ transparent: true, animationType: 'none', visible: this.state.isVisible, onRequestClose: onBackButtonPress, onDismiss: () => {onDismiss();if (Platform.OS === 'ios'){this.props.onModalHide();}} }, otherProps),
             this.makeBackdrop(),
-            avoidKeyboard ? (React.createElement(KeyboardAvoidingView, { behavior: Platform.OS === 'ios' ? 'padding' : undefined, pointerEvents: "box-none", style: computedStyle.concat([{ margin: 0 }]) }, containerView)) : (containerView)));
+            avoidKeyboard ? (React.createElement(KeyboardAvoidingView, { behavior: 'padding', pointerEvents: "box-none", style: computedStyle.concat([{ margin: 0 }]) }, containerView)) : (containerView)));
     }
 }
 ReactNativeModal.propTypes = {
