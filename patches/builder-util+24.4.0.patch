diff --git a/node_modules/builder-util/out/util.d.ts b/node_modules/builder-util/out/util.d.ts
index 628a732..55eb692 100644
--- a/node_modules/builder-util/out/util.d.ts
+++ b/node_modules/builder-util/out/util.d.ts
@@ -38,4 +38,4 @@ export declare class InvalidConfigurationError extends Error {
     constructor(message: string, code?: string);
 }
 export declare function executeAppBuilder(args: Array<string>, childProcessConsumer?: (childProcess: ChildProcess) => void, extraOptions?: SpawnOptions, maxRetries?: number): Promise<string>;
-export declare function retry<T>(task: () => Promise<T>, retriesLeft: number, interval: number): Promise<T>;
+export declare function retry<T>(task: () => Promise<T>, retriesLeft: number, interval: number, backoff?: number, attempt?: number): Promise<T>;
diff --git a/node_modules/builder-util/out/util.js b/node_modules/builder-util/out/util.js
index 3c9879e..d9c1c8a 100644
--- a/node_modules/builder-util/out/util.js
+++ b/node_modules/builder-util/out/util.js
@@ -366,15 +366,15 @@ function executeAppBuilder(args, childProcessConsumer, extraOptions = {}, maxRet
     }
 }
 exports.executeAppBuilder = executeAppBuilder;
-async function retry(task, retriesLeft, interval) {
+async function retry(task, retriesLeft, interval, backoff = 0, attempt = 0) {
     try {
         return await task();
     }
     catch (error) {
         log_1.log.info(`Above command failed, retrying ${retriesLeft} more times`);
         if (retriesLeft > 0) {
-            await new Promise(resolve => setTimeout(resolve, interval));
-            return await retry(task, retriesLeft - 1, interval);
+            await new Promise(resolve => setTimeout(resolve, interval + backoff * attempt));
+            return await retry(task, retriesLeft - 1, interval, backoff, attempt + 1);
         }
         else {
             throw error;
