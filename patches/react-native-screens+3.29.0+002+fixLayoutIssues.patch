diff --git a/node_modules/react-native-screens/android/src/fabric/java/com/swmansion/rnscreens/FabricEnabledViewGroup.kt b/node_modules/react-native-screens/android/src/fabric/java/com/swmansion/rnscreens/FabricEnabledViewGroup.kt
index 2d946c4..ccda8f3 100644
--- a/node_modules/react-native-screens/android/src/fabric/java/com/swmansion/rnscreens/FabricEnabledViewGroup.kt
+++ b/node_modules/react-native-screens/android/src/fabric/java/com/swmansion/rnscreens/FabricEnabledViewGroup.kt
@@ -12,38 +12,36 @@ import kotlin.math.abs
 abstract class FabricEnabledViewGroup constructor(context: ReactContext?) : ViewGroup(context), FabricViewStateManager.HasFabricViewStateManager {
     private val mFabricViewStateManager: FabricViewStateManager = FabricViewStateManager()
 
-    private var lastSetWidth = 0f
-    private var lastSetHeight = 0f
+    private var lastHeaderHeight: Double = 0.0
 
     override fun getFabricViewStateManager(): FabricViewStateManager {
         return mFabricViewStateManager
     }
 
-    protected fun updateScreenSizeFabric(width: Int, height: Int) {
-        updateState(width, height)
+    protected fun updateScreenSizeFabric(width: Int, height: Int, headerHeight: Double) {
+        updateState(width, height, headerHeight)
     }
 
     @UiThread
-    fun updateState(width: Int, height: Int) {
+    fun updateState(width: Int, height: Int, headerHeight: Double) {
         val realWidth: Float = PixelUtil.toDIPFromPixel(width.toFloat())
         val realHeight: Float = PixelUtil.toDIPFromPixel(height.toFloat())
 
         // Check incoming state values. If they're already the correct value, return early to prevent
         // infinite UpdateState/SetState loop.
-        val delta = 0.9f
-        if (abs(lastSetWidth - realWidth) < delta &&
-            abs(lastSetHeight - realHeight) < delta
-        ) {
+        val delta = 0.9
+        if (abs(lastHeaderHeight - headerHeight) < delta) {
             return
         }
 
-        lastSetWidth = realWidth
-        lastSetHeight = realHeight
+        lastHeaderHeight = headerHeight
 
         mFabricViewStateManager.setState {
             val map: WritableMap = WritableNativeMap()
             map.putDouble("frameWidth", realWidth.toDouble())
             map.putDouble("frameHeight", realHeight.toDouble())
+            map.putDouble("contentOffsetX", 0.0)
+            map.putDouble("contentOffsetY", headerHeight)
             map
         }
     }
diff --git a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt
index a7d28f9..e0b0d8e 100644
--- a/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt
+++ b/node_modules/react-native-screens/android/src/main/java/com/swmansion/rnscreens/Screen.kt
@@ -72,9 +72,9 @@ class Screen constructor(context: ReactContext?) : FabricEnabledViewGroup(contex
             val width = r - l
             val height = b - t
 
-            calculateHeaderHeight()
+            val headerHeight = if (container is ScreenStack) calculateHeaderHeight().first else 0.0
             if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {
-                updateScreenSizeFabric(width, height)
+                updateScreenSizeFabric(width, height, headerHeight)
             } else {
                 updateScreenSizePaper(width, height)
             }
@@ -246,7 +246,7 @@ class Screen constructor(context: ReactContext?) : FabricEnabledViewGroup(contex
             mNativeBackButtonDismissalEnabled = enableNativeBackButtonDismissal
         }
 
-    private fun calculateHeaderHeight() {
+    private fun calculateHeaderHeight(): Pair<Double, Double> {
         val actionBarTv = TypedValue()
         val resolvedActionBarSize = context.theme.resolveAttribute(android.R.attr.actionBarSize, actionBarTv, true)
 
@@ -265,6 +265,8 @@ class Screen constructor(context: ReactContext?) : FabricEnabledViewGroup(contex
         val totalHeight = actionBarHeight + statusBarHeight
         UIManagerHelper.getEventDispatcherForReactTag(context as ReactContext, id)
             ?.dispatchEvent(HeaderHeightChangeEvent(id, totalHeight))
+
+        return actionBarHeight to statusBarHeight
     }
 
     enum class StackPresentation {
diff --git a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenComponentDescriptor.h b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenComponentDescriptor.h
index 67194d3..c1a1b40 100644
--- a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenComponentDescriptor.h
+++ b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenComponentDescriptor.h
@@ -13,7 +13,7 @@ class RNSScreenComponentDescriptor final
   using ConcreteComponentDescriptor::ConcreteComponentDescriptor;
 
   void adopt(ShadowNode& shadowNode) const override {
-    react_native_assert(
+        react_native_assert(
         dynamic_cast<RNSScreenShadowNode*>(&shadowNode));
     auto& screenShadowNode =
         static_cast<RNSScreenShadowNode&>(shadowNode);
@@ -28,10 +28,7 @@ class RNSScreenComponentDescriptor final
             shadowNode.getState());
     auto stateData = state->getData();
 
-    if (stateData.frameSize.width != 0 && stateData.frameSize.height != 0) {
-      layoutableShadowNode.setSize(
-          Size{stateData.frameSize.width, stateData.frameSize.height});
-    }
+    layoutableShadowNode.setPadding({.bottom = stateData.contentOffset.y});
 
     ConcreteComponentDescriptor::adopt(shadowNode);
   }
diff --git a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.cpp b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.cpp
index ba61ed8..0e3746e 100644
--- a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.cpp
+++ b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.cpp
@@ -5,5 +5,11 @@ namespace react {
 
 extern const char RNSScreenComponentName[] = "RNSScreen";
 
+Point RNSScreenShadowNode::getContentOriginOffset() const {
+  auto stateData = getStateData();
+  auto contentOffset = stateData.contentOffset;
+  return {contentOffset.x, contentOffset.y};
+}
+
 } // namespace react
 } // namespace facebook
diff --git a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.h b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.h
index ef25dd1..bbd7599 100644
--- a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.h
+++ b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenShadowNode.h
@@ -19,9 +19,11 @@ class JSI_EXPORT RNSScreenShadowNode final : public ConcreteViewShadowNode<
  public:
   using ConcreteViewShadowNode::ConcreteViewShadowNode;
 
+  Point getContentOriginOffset() const override;
+
   static ShadowNodeTraits BaseTraits() {
     auto traits = ConcreteViewShadowNode::BaseTraits();
-    traits.set(ShadowNodeTraits::Trait::RootNodeKind);
+    // traits.set(ShadowNodeTraits::Trait::RootNodeKind);
     return traits;
   }
 };
diff --git a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.cpp b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.cpp
index 69c77a6..6c3b8ca 100644
--- a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.cpp
+++ b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.cpp
@@ -6,8 +6,8 @@ namespace react {
 #ifdef ANDROID
 folly::dynamic RNSScreenState::getDynamic() const {
   return folly::dynamic::object("frameWidth", frameSize.width)(
-      "frameHeight", frameSize.height);
-}
+      "frameHeight", frameSize.height)("contentOffsetX", contentOffset.x)("contentOffsetY", contentOffset.y);
+  }
 #endif
 
 } // namespace react
diff --git a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.h b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.h
index ce09807..e26d411 100644
--- a/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.h
+++ b/node_modules/react-native-screens/common/cpp/react/renderer/components/rnscreens/RNSScreenState.h
@@ -17,7 +17,7 @@ class JSI_EXPORT RNSScreenState final {
   using Shared = std::shared_ptr<const RNSScreenState>;
 
   RNSScreenState(){};
-  RNSScreenState(Size frameSize_) : frameSize(frameSize_){};
+  RNSScreenState(Size frameSize_, Point contentOffset_) : frameSize(frameSize_), contentOffset(contentOffset_){};
 
 #ifdef ANDROID
   RNSScreenState(
@@ -25,10 +25,14 @@ class JSI_EXPORT RNSScreenState final {
       folly::dynamic data)
       : frameSize(Size{
             (Float)data["frameWidth"].getDouble(),
-            (Float)data["frameHeight"].getDouble()}){};
+            (Float)data["frameHeight"].getDouble()}),
+        contentOffset(Point{
+            (Float)data["contentOffsetX"].getDouble(),
+            (Float)data["contentOffsetY"].getDouble()}){};
 #endif
 
   const Size frameSize{};
+  Point contentOffset;
 
 #ifdef ANDROID
   folly::dynamic getDynamic() const;
diff --git a/node_modules/react-native-screens/ios/RNSScreen.h b/node_modules/react-native-screens/ios/RNSScreen.h
index f1bd9d8..797fc12 100644
--- a/node_modules/react-native-screens/ios/RNSScreen.h
+++ b/node_modules/react-native-screens/ios/RNSScreen.h
@@ -42,6 +42,7 @@ namespace react = facebook::react;
 #ifdef RCT_NEW_ARCH_ENABLED
 - (void)setViewToSnapshot:(UIView *)snapshot;
 - (void)resetViewToScreen;
+- (CGFloat)calculateHeaderHeightIsModal:(BOOL)isModal;
 #endif
 
 @end
diff --git a/node_modules/react-native-screens/ios/RNSScreen.mm b/node_modules/react-native-screens/ios/RNSScreen.mm
index 4b24cff..8f480ca 100644
--- a/node_modules/react-native-screens/ios/RNSScreen.mm
+++ b/node_modules/react-native-screens/ios/RNSScreen.mm
@@ -107,7 +107,8 @@ - (void)updateBounds
 {
 #ifdef RCT_NEW_ARCH_ENABLED
   if (_state != nullptr) {
-    auto newState = react::RNSScreenState{RCTSizeFromCGSize(self.bounds.size)};
+    CGFloat headerHeight = [_controller calculateHeaderHeightIsModal:self.isPresentedAsNativeModal];
+    auto newState = react::RNSScreenState{RCTSizeFromCGSize(self.bounds.size), RCTPointFromCGPoint(CGPointMake(0, headerHeight))};
     _state->updateState(std::move(newState));
     UINavigationController *navctr = _controller.navigationController;
     [navctr.view setNeedsLayout];
