diff --git a/node_modules/focus-trap/dist/focus-trap.esm.js b/node_modules/focus-trap/dist/focus-trap.esm.js
index 46c8d52..6919e00 100644
--- a/node_modules/focus-trap/dist/focus-trap.esm.js
+++ b/node_modules/focus-trap/dist/focus-trap.esm.js
@@ -118,8 +118,8 @@ var isKeyForward = function isKeyForward(e) {
 var isKeyBackward = function isKeyBackward(e) {
   return isTabEvent(e) && e.shiftKey;
 };
-var delay = function delay(fn) {
-  return setTimeout(fn, 0);
+var delay = function delay(fn, delayTime = 0) {
+  return setTimeout(() => setTimeout(fn, delayTime), 0);
 };
 
 /**
@@ -771,7 +771,7 @@ var createFocusTrap = function createFocusTrap(elements, userOptions) {
     // that caused the focus trap activation.
     state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {
       _tryFocus(getInitialFocusNode());
-    }) : _tryFocus(getInitialFocusNode());
+    }, typeof config.delayInitialFocus === 'number' ? config.delayInitialFocus : undefined) : _tryFocus(getInitialFocusNode());
     doc.addEventListener('focusin', checkFocusIn, true);
     doc.addEventListener('mousedown', checkPointerDown, {
       capture: true,
@@ -909,7 +909,7 @@ var createFocusTrap = function createFocusTrap(elements, userOptions) {
             _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
           }
           onPostDeactivate === null || onPostDeactivate === undefined || onPostDeactivate();
-        });
+        }, typeof config.delayInitialFocus === 'number' ? config.delayInitialFocus : undefined);
       };
       if (returnFocus && checkCanReturnFocus) {
         checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
diff --git a/node_modules/focus-trap/index.d.ts b/node_modules/focus-trap/index.d.ts
index a7fb3be..6e85116 100644
--- a/node_modules/focus-trap/index.d.ts
+++ b/node_modules/focus-trap/index.d.ts
@@ -187,7 +187,7 @@ declare module 'focus-trap' {
      * This prevents elements within the focusable element from capturing
      * the event that triggered the focus trap activation.
      */
-    delayInitialFocus?: boolean;
+    delayInitialFocus?: boolean | number;
     /**
      * Default: `window.document`. Document where the focus trap will be active.
      * This allows to use FocusTrap in an iFrame context.
diff --git a/node_modules/focus-trap/index.js b/node_modules/focus-trap/index.js
index 36d901c..fcbadc7 100644
--- a/node_modules/focus-trap/index.js
+++ b/node_modules/focus-trap/index.js
@@ -66,8 +66,8 @@ const isKeyBackward = function (e) {
   return isTabEvent(e) && e.shiftKey;
 };
 
-const delay = function (fn) {
-  return setTimeout(fn, 0);
+const delay = function (fn, delayTime = 0) {
+  return setTimeout(() => setTimeout(fn, delayTime), 0);
 };
 
 /**
@@ -832,7 +832,7 @@ const createFocusTrap = function (elements, userOptions) {
     state.delayInitialFocusTimer = config.delayInitialFocus
       ? delay(function () {
           tryFocus(getInitialFocusNode());
-        })
+        }, typeof config.delayInitialFocus === 'number' ? config.delayInitialFocus : undefined)
       : tryFocus(getInitialFocusNode());
 
     doc.addEventListener('focusin', checkFocusIn, true);
@@ -1006,7 +1006,7 @@ const createFocusTrap = function (elements, userOptions) {
             tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
           }
           onPostDeactivate?.();
-        });
+        }, typeof config.delayInitialFocus === 'number' ? config.delayInitialFocus : undefined);
       };
 
       if (returnFocus && checkCanReturnFocus) {
