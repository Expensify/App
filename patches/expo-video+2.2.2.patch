diff --git a/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoModule.kt b/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoModule.kt
index 24307d5..77bfdec 100644
--- a/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoModule.kt
+++ b/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoModule.kt
@@ -364,7 +364,8 @@ private inline fun <reified T : VideoView> ViewDefinitionBuilder<T>.VideoViewCom
     "onPictureInPictureStop",
     "onFullscreenEnter",
     "onFullscreenExit",
-    "onFirstFrameRender"
+    "onFirstFrameRender",
+    "onNativeControlsEnabled"
   )
   Prop("player") { view: T, player: VideoPlayer ->
     view.videoPlayer = player
diff --git a/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoView.kt b/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoView.kt
index ea6cc4e..d1e3aba 100644
--- a/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoView.kt
+++ b/node_modules/expo-video/android/src/main/java/expo/modules/video/VideoView.kt
@@ -51,6 +51,7 @@ open class VideoView(context: Context, appContext: AppContext, useTextureView: B
   val onFullscreenEnter by EventDispatcher<Unit>()
   val onFullscreenExit by EventDispatcher<Unit>()
   val onFirstFrameRender by EventDispatcher<Unit>()
+  val onNativeControlsEnabled by EventDispatcher<Unit>()
 
   var willEnterPiP: Boolean = false
 
@@ -114,6 +115,9 @@ open class VideoView(context: Context, appContext: AppContext, useTextureView: B
 
   var useNativeControls: Boolean = true
     set(value) {
+      if(value){
+        onNativeControlsEnabled(Unit)
+      }
       playerView.useController = value
       playerView.setShowSubtitleButton(value)
       field = value
diff --git a/node_modules/expo-video/build/VideoView.types.d.ts b/node_modules/expo-video/build/VideoView.types.d.ts
index 660923c..f9519f2 100644
--- a/node_modules/expo-video/build/VideoView.types.d.ts
+++ b/node_modules/expo-video/build/VideoView.types.d.ts
@@ -121,6 +121,10 @@ export interface VideoViewProps extends ViewProps {
      * A callback to call after the video player exits fullscreen mode.
      */
     onFullscreenExit?: () => void;
+    /**
+     * A callback to call after the video player enables native controls.
+     */
+    onNativeControlsEnabled?: () => void;
     /**
      * A callback to call after the mounted `VideoPlayer` has rendered the first frame into the `VideoView`.
      * This event can be used to hide any cover images that conceal the initial loading of the player.
diff --git a/node_modules/expo-video/src/VideoView.types.ts b/node_modules/expo-video/src/VideoView.types.ts
index 0b86b5e..8f6aa4a 100644
--- a/node_modules/expo-video/src/VideoView.types.ts
+++ b/node_modules/expo-video/src/VideoView.types.ts
@@ -138,6 +138,11 @@ export interface VideoViewProps extends ViewProps {
    */
   onFullscreenExit?: () => void;
 
+  /**
+   * A callback to call after the video player exits fullscreen mode.
+   */
+  onNativeControlsEnabled?: () => void;
+
   /**
    * A callback to call after the mounted `VideoPlayer` has rendered the first frame into the `VideoView`.
    * This event can be used to hide any cover images that conceal the initial loading of the player.
