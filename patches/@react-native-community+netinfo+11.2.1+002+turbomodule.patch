diff --git a/node_modules/@react-native-community/netinfo/android/build.gradle b/node_modules/@react-native-community/netinfo/android/build.gradle
index 0d617ed..e93d64a 100644
--- a/node_modules/@react-native-community/netinfo/android/build.gradle
+++ b/node_modules/@react-native-community/netinfo/android/build.gradle
@@ -3,9 +3,10 @@ buildscript {
   // This avoids unnecessary downloads and potential conflicts when the library is included as a
   // module dependency in an application project.
   if (project == rootProject) {
-    repositories {
-      google()
-      mavenCentral()
+      repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
     }
 
     dependencies {
@@ -26,8 +27,54 @@ def getExtOrIntegerDefault(name) {
   return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNativeNetInfo_' + name]).toInteger()
 }
 
+def isNewArchitectureEnabled() {
+  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
+}
+
+def resolveReactNativeDirectory() {
+  def reactNativeLocation = getExtOrInitialValue("REACT_NATIVE_NODE_MODULES_DIR", null)
+  if (reactNativeLocation != null) {
+    return file(reactNativeLocation)
+  }
+
+  // monorepo workaround
+  // react-native can be hoisted or in project's own node_modules
+  def reactNativeFromProjectNodeModules = file("${rootProject.projectDir}/../node_modules/react-native")
+  if (reactNativeFromProjectNodeModules.exists()) {
+    return reactNativeFromProjectNodeModules
+  }
+
+  def reactNativeFromNodeModulesWithRNCNetInfo = file("${projectDir}/../../react-native")
+  if (reactNativeFromNodeModulesWithRNCNetInfo.exists()) {
+    return reactNativeFromNodeModulesWithRNCNetInfo
+  }
+
+  throw new Exception(
+          "[react-native-netinfo] Unable to resolve react-native location in " +
+                  "node_modules. You should add project extension property (in app/build.gradle) " +
+                  "`REACT_NATIVE_NODE_MODULES_DIR` with path to react-native."
+  )
+}
+
+def getReactNativeMinorVersion() {
+  def REACT_NATIVE_DIR = resolveReactNativeDirectory()
+
+  def reactProperties = new Properties()
+  file("$REACT_NATIVE_DIR/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
+
+  def REACT_NATIVE_VERSION = reactProperties.getProperty("VERSION_NAME")
+  def REACT_NATIVE_MINOR_VERSION = REACT_NATIVE_VERSION.startsWith("0.0.0-") ? 1000 : REACT_NATIVE_VERSION.split("\\.")[1].toInteger()
+
+  return REACT_NATIVE_MINOR_VERSION
+}
+
+
 apply plugin: 'com.android.library'
 
+if (isNewArchitectureEnabled()) {
+  apply plugin: 'com.facebook.react'
+}
+
 android {
   compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
 
@@ -45,10 +92,21 @@ android {
   defaultConfig {
     minSdkVersion getExtOrIntegerDefault('minSdkVersion')
     targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
+    buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString())
+  }
+  sourceSets {
+    main {
+        if (isNewArchitectureEnabled()) {
+            java.srcDirs += ['src/newarch']
+        } else {
+            java.srcDirs += ['src/oldarch']
+        }
+      }
   }
   lintOptions{
     abortOnError false
   }
+
 }
 
 repositories {
@@ -63,6 +121,9 @@ repositories {
 
 dependencies {
   //noinspection GradleDynamicVersion
-  implementation 'com.facebook.react:react-native:+'
-
+  if (isNewArchitectureEnabled() && getReactNativeMinorVersion() < 71) {
+    implementation project(":ReactAndroid")
+  } else {
+    implementation 'com.facebook.react:react-native:+'
+  }
 }
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoModuleImpl.java b/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoModuleImpl.java
index 2c3280b..296bbfd 100644
--- a/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoModuleImpl.java
+++ b/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoModuleImpl.java
@@ -9,13 +9,11 @@ package com.reactnativecommunity.netinfo;
 import android.os.Build;
 import com.facebook.react.bridge.Promise;
 import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.module.annotations.ReactModule;
 
 /** Module that monitors and provides information about the connectivity state of the device. */
-@ReactModule(name = NetInfoModule.NAME)
-public class NetInfoModule extends ReactContextBaseJavaModule implements AmazonFireDeviceConnectivityPoller.ConnectivityChangedCallback {
+public class NetInfoModuleImpl implements AmazonFireDeviceConnectivityPoller.ConnectivityChangedCallback {
     public static final String NAME = "RNCNetInfo";
 
     private final ConnectivityReceiver mConnectivityReceiver;
@@ -23,8 +21,7 @@ public class NetInfoModule extends ReactContextBaseJavaModule implements AmazonF
 
     private int numberOfListeners = 0;
 
-    public NetInfoModule(ReactApplicationContext reactContext) {
-        super(reactContext);
+    public NetInfoModuleImpl(ReactApplicationContext reactContext) {
         // Create the connectivity receiver based on the API level we are running on
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             mConnectivityReceiver = new NetworkCallbackConnectivityReceiver(reactContext);
@@ -35,23 +32,17 @@ public class NetInfoModule extends ReactContextBaseJavaModule implements AmazonF
         mAmazonConnectivityChecker = new AmazonFireDeviceConnectivityPoller(reactContext, this);
     }
 
-    @Override
+
     public void initialize() {
         mConnectivityReceiver.register();
         mAmazonConnectivityChecker.register();
     }
 
-    @Override
     public void onCatalystInstanceDestroy() {
         mAmazonConnectivityChecker.unregister();
         mConnectivityReceiver.unregister();
-        mConnectivityReceiver.hasListener = false;
     }
 
-    @Override
-    public String getName() {
-        return NAME;
-    }
 
     @ReactMethod
     public void getCurrentState(final String requestedInterface, final Promise promise) {
@@ -63,14 +54,14 @@ public class NetInfoModule extends ReactContextBaseJavaModule implements AmazonF
         mConnectivityReceiver.setIsInternetReachableOverride(isConnected);
     }
 
-    @ReactMethod
+
     public void addListener(String eventName) {
         numberOfListeners++;
         mConnectivityReceiver.hasListener = true;
     }
 
-    @ReactMethod
-    public void removeListeners(Integer count) {
+
+    public void removeListeners(double count) {
         numberOfListeners -= count;
         if (numberOfListeners == 0) {
             mConnectivityReceiver.hasListener = false;
diff --git a/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoPackage.java b/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoPackage.java
index fcd4a5e..1bf0b62 100644
--- a/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoPackage.java
+++ b/node_modules/@react-native-community/netinfo/android/src/main/java/com/reactnativecommunity/netinfo/NetInfoPackage.java
@@ -1,34 +1,46 @@
-/**
- * Copyright (c) Facebook, Inc. and its affiliates.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- */
 package com.reactnativecommunity.netinfo;
 
-import com.facebook.react.ReactPackage;
-import com.facebook.react.bridge.JavaScriptModule;
+import androidx.annotation.Nullable;
 import com.facebook.react.bridge.NativeModule;
 import com.facebook.react.bridge.ReactApplicationContext;
-import com.facebook.react.uimanager.ViewManager;
-import java.util.Arrays;
+import com.facebook.react.module.model.ReactModuleInfo;
+import com.facebook.react.module.model.ReactModuleInfoProvider;
+import com.facebook.react.TurboReactPackage;
+
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
-public class NetInfoPackage implements ReactPackage {
-    @Override
-    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
-        return Arrays.<NativeModule>asList(new NetInfoModule(reactContext));
-    }
+public class NetInfoPackage extends TurboReactPackage {
 
-    // Deprecated from RN 0.47
-    public List<Class<? extends JavaScriptModule>> createJSModules() {
-        return Collections.emptyList();
-    }
+  @Nullable
+  @Override
+  public NativeModule getModule(String name, ReactApplicationContext reactContext) {
+          if (name.equals(NetInfoModuleImpl.NAME)) {
+              return new NetInfoModule(reactContext);
+          } else {
+              return null;
+          }
+  }
 
-    @Override
-    @SuppressWarnings("rawtypes")
-    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
-        return Collections.emptyList();
-    }
+  @Override
+  public ReactModuleInfoProvider getReactModuleInfoProvider() {
+           return () -> {
+                    final Map<String, ReactModuleInfo> moduleInfos = new HashMap<>();
+                    boolean turboModulesEnabled = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;
+                    moduleInfos.put(
+                                    NetInfoModuleImpl.NAME,
+                                    new ReactModuleInfo(
+                                                    NetInfoModuleImpl.NAME,
+                                                    NetInfoModuleImpl.NAME,
+                                                    false, // canOverrideExistingModule
+                                                    false, // needsEagerInit
+                                                    true, // hasConstants
+                                                    false, // isCxxModule
+                                                    turboModulesEnabled // isTurboModule
+                                            ));
+                    return moduleInfos;
+                };
+  }
 }
diff --git a/node_modules/@react-native-community/netinfo/android/src/newarch/com/reactnativecommunity/netinfo/NetInfoModule.java b/node_modules/@react-native-community/netinfo/android/src/newarch/com/reactnativecommunity/netinfo/NetInfoModule.java
new file mode 100644
index 0000000..61e44c4
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/android/src/newarch/com/reactnativecommunity/netinfo/NetInfoModule.java
@@ -0,0 +1,51 @@
+package com.reactnativecommunity.netinfo;
+
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+
+public class NetInfoModule extends NativeRNCNetInfoSpec {
+
+    private NetInfoModuleImpl implementation;
+
+    NetInfoModule(ReactApplicationContext context) {
+        super(context);
+        implementation = new NetInfoModuleImpl(context);
+    }
+
+    @Override
+    public String getName() {
+        return NetInfoModuleImpl.NAME;
+    }
+
+    @ReactMethod
+    public void getCurrentState(final String requestedInterface, final Promise promise) {
+        implementation.getCurrentState(requestedInterface, promise);
+    }
+
+    @ReactMethod
+    public void configure(ReadableMap config) {
+        // iOS only
+    }
+
+    @ReactMethod
+    public void addListener(String eventName) {
+        implementation.addListener(eventName);
+    }
+
+    @ReactMethod
+    public void removeListeners(double count) {
+        implementation.removeListeners(count);
+    }
+    
+    @Override
+    public void onCatalystInstanceDestroy() {
+        implementation.onCatalystInstanceDestroy();
+    }
+
+    @Override
+    public void initialize() {
+        implementation.initialize();
+    }
+}
diff --git a/node_modules/@react-native-community/netinfo/android/src/oldarch/com/reactnativecommunity/netinfo/NetInfoModule.java b/node_modules/@react-native-community/netinfo/android/src/oldarch/com/reactnativecommunity/netinfo/NetInfoModule.java
new file mode 100644
index 0000000..4738d63
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/android/src/oldarch/com/reactnativecommunity/netinfo/NetInfoModule.java
@@ -0,0 +1,59 @@
+
+
+package com.reactnativecommunity.netinfo;
+
+import com.facebook.react.bridge.NativeModule;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import java.util.Map;
+import java.util.HashMap;
+import com.facebook.react.bridge.ReadableMap;
+
+public class NetInfoModule extends ReactContextBaseJavaModule {
+
+    private NetInfoModuleImpl implementation;
+
+    NetInfoModule(ReactApplicationContext context) {
+        super(context);
+        implementation = new NetInfoModuleImpl(context);
+    }
+
+    @Override
+    public String getName() {
+        return NetInfoModuleImpl.NAME;
+    }
+
+    @ReactMethod
+    public void getCurrentState(final String requestedInterface, final Promise promise) {
+        implementation.getCurrentState(requestedInterface, promise);
+    }
+
+    @Override
+    public void onCatalystInstanceDestroy() {
+        implementation.onCatalystInstanceDestroy();
+    }
+
+
+    @Override
+    public void initialize() {
+        implementation.initialize();
+    }
+
+    @ReactMethod
+    public void addListener(String eventName) {
+        implementation.addListener(eventName);
+    }
+
+    @ReactMethod
+    public void configure(ReadableMap config) {
+        // iOS only
+    }
+
+    @ReactMethod
+    public void removeListeners(double count) {
+        implementation.removeListeners(count);
+    }
+}
diff --git a/node_modules/@react-native-community/netinfo/ios/RNCNetInfo.mm b/node_modules/@react-native-community/netinfo/ios/RNCNetInfo.mm
index e83b8c4..be520d9 100644
--- a/node_modules/@react-native-community/netinfo/ios/RNCNetInfo.mm
+++ b/node_modules/@react-native-community/netinfo/ios/RNCNetInfo.mm
@@ -8,6 +8,10 @@
 #import "RNCNetInfo.h"
 #import "RNCConnectionStateWatcher.h"
 
+#ifdef RCT_NEW_ARCH_ENABLED
+#import "RNCNetInfoSpec.h"
+#endif
+
 #include <ifaddrs.h>
 #include <arpa/inet.h>
 
@@ -15,13 +19,18 @@
 #import <CoreTelephony/CTCarrier.h>
 #import <CoreTelephony/CTTelephonyNetworkInfo.h>
 #endif
-@import SystemConfiguration.CaptiveNetwork;
+#import <SystemConfiguration/CaptiveNetwork.h>
+
 
 #import <React/RCTAssert.h>
 #import <React/RCTBridge.h>
 #import <React/RCTEventDispatcher.h>
 
+#ifdef RCT_NEW_ARCH_ENABLED
+@interface RNCNetInfo () <RNCConnectionStateWatcherDelegate, NativeRNCNetInfoSpec>
+#else
 @interface RNCNetInfo () <RNCConnectionStateWatcherDelegate>
+#endif
 
 @property (nonatomic, strong) RNCConnectionStateWatcher *connectionStateWatcher;
 @property (nonatomic) BOOL isObserving;
@@ -97,6 +106,7 @@ - (void)connectionStateWatcher:(RNCConnectionStateWatcher *)connectionStateWatch
   resolve([self currentDictionaryFromUpdateState:state withInterface:requestedInterface]);
 }
 
+
 RCT_EXPORT_METHOD(configure:(NSDictionary *)config)
 {
     self.config = config;
@@ -265,4 +275,10 @@ - (NSString *)bssid
 }
 #endif
 
+#ifdef RCT_NEW_ARCH_ENABLED
+- (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:(const facebook::react::ObjCTurboModule::InitParams &)params {
+  return std::make_shared<facebook::react::NativeRNCNetInfoSpecJSI>(params);
+}
+#endif
+
 @end
diff --git a/node_modules/@react-native-community/netinfo/jest/netinfo-mock.js b/node_modules/@react-native-community/netinfo/jest/netinfo-mock.js
index 7f5769c..99b1aa3 100644
--- a/node_modules/@react-native-community/netinfo/jest/netinfo-mock.js
+++ b/node_modules/@react-native-community/netinfo/jest/netinfo-mock.js
@@ -14,18 +14,17 @@ const defaultState = {
 };
 
 const NetInfoStateType = {
-  unknown: "unknown",
-  none: "none",
-  cellular: "cellular",
-  wifi: "wifi",
-  bluetooth: "bluetooth",
-  ethernet: "ethernet",
-  wimax: "wimax",
-  vpn: "vpn",
-  other: "other",
+  unknown: 'unknown',
+  none: 'none',
+  cellular: 'cellular',
+  wifi: 'wifi',
+  bluetooth: 'bluetooth',
+  ethernet: 'ethernet',
+  wimax: 'wimax',
+  vpn: 'vpn',
+  other: 'other',
 };
 
-
 const RNCNetInfoMock = {
   NetInfoStateType,
   configure: jest.fn(),
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/index.js b/node_modules/@react-native-community/netinfo/lib/commonjs/index.js
index f5afe24..8f06bc8 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/index.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/index.js
@@ -11,26 +11,19 @@ var _exportNames = {
   useNetInfo: true,
   useNetInfoInstance: true
 };
+exports.addEventListener = addEventListener;
 exports.configure = configure;
+exports.default = void 0;
 exports.fetch = fetch;
 exports.refresh = refresh;
-exports.addEventListener = addEventListener;
 exports.useNetInfo = useNetInfo;
 exports.useNetInfoInstance = useNetInfoInstance;
-exports.default = void 0;
-
 var _react = require("react");
-
 var _reactNative = require("react-native");
-
 var _defaultConfiguration = _interopRequireDefault(require("./internal/defaultConfiguration"));
-
 var _nativeInterface = _interopRequireDefault(require("./internal/nativeInterface"));
-
 var _state2 = _interopRequireDefault(require("./internal/state"));
-
 var Types = _interopRequireWildcard(require("./internal/types"));
-
 Object.keys(Types).forEach(function (key) {
   if (key === "default" || key === "__esModule") return;
   if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
@@ -42,13 +35,9 @@ Object.keys(Types).forEach(function (key) {
     }
   });
 });
-
-function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
-
-function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
-
+function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
+function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -57,14 +46,16 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  *
  * @format
  */
+
 // Stores the currently used configuration
-let _configuration = _defaultConfiguration.default; // Stores the singleton reference to the state manager
+let _configuration = _defaultConfiguration.default;
 
+// Stores the singleton reference to the state manager
 let _state = null;
-
 const createState = () => {
   return new _state2.default(_configuration);
 };
+
 /**
  * Configures the library with the given configuration. Note that calling this will stop all
  * previously added listeners from being called again. It is best to call this right when your
@@ -72,23 +63,20 @@ const createState = () => {
  *
  * @param configuration The new configuration to set.
  */
-
-
 function configure(configuration) {
-  _configuration = { ..._defaultConfiguration.default,
+  _configuration = {
+    ..._defaultConfiguration.default,
     ...configuration
   };
-
   if (_state) {
     _state.tearDown();
-
     _state = createState();
   }
-
   if (_reactNative.Platform.OS === 'ios') {
     _nativeInterface.default.configure(configuration);
   }
 }
+
 /**
  * Returns a `Promise` that resolves to a `NetInfoState` object.
  * This function operates on the global singleton instance configured using `configure()`
@@ -97,29 +85,25 @@ function configure(configuration) {
  *
  * @returns A Promise which contains the current connection state.
  */
-
-
 function fetch(requestedInterface) {
   if (!_state) {
     _state = createState();
   }
-
   return _state.latest(requestedInterface);
 }
+
 /**
  * Force-refreshes the internal state of the global singleton managed by this library.
  *
  * @returns A Promise which contains the updated connection state.
  */
-
-
 function refresh() {
   if (!_state) {
     _state = createState();
   }
-
   return _state._fetchCurrentState();
 }
+
 /**
  * Subscribe to the global singleton's connection information. The callback is called with a parameter of type
  * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener
@@ -131,19 +115,16 @@ function refresh() {
  *
  * @returns A function which can be called to unsubscribe.
  */
-
-
 function addEventListener(listener) {
   if (!_state) {
     _state = createState();
   }
-
   _state.add(listener);
-
   return () => {
     _state && _state.remove(listener);
   };
 }
+
 /**
  * A React Hook into this library's singleton which updates when the connection state changes.
  *
@@ -151,13 +132,10 @@ function addEventListener(listener) {
  *
  * @returns The connection state.
  */
-
-
 function useNetInfo(configuration) {
   if (configuration) {
     configure(configuration);
   }
-
   const [netInfo, setNetInfo] = (0, _react.useState)({
     type: Types.NetInfoStateType.unknown,
     isConnected: null,
@@ -169,6 +147,7 @@ function useNetInfo(configuration) {
   }, []);
   return netInfo;
 }
+
 /**
  * A React Hook which manages an isolated instance of the network info manager.
  * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,
@@ -178,8 +157,6 @@ function useNetInfo(configuration) {
  *
  * @returns the netInfo state and a refresh function
  */
-
-
 function useNetInfoInstance(isPaused = false, configuration) {
   const [networkInfoManager, setNetworkInfoManager] = (0, _react.useState)();
   const [netInfo, setNetInfo] = (0, _react.useState)({
@@ -192,8 +169,8 @@ function useNetInfoInstance(isPaused = false, configuration) {
     if (isPaused) {
       return;
     }
-
-    const config = { ..._defaultConfiguration.default,
+    const config = {
+      ..._defaultConfiguration.default,
       ...configuration
     };
     const state = new _state2.default(config);
@@ -209,8 +186,7 @@ function useNetInfoInstance(isPaused = false, configuration) {
     refresh
   };
 }
-
-var _default = {
+var _default = exports.default = {
   configure,
   fetch,
   refresh,
@@ -218,5 +194,4 @@ var _default = {
   useNetInfo,
   useNetInfoInstance
 };
-exports.default = _default;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/index.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/index.js.map
index c778a40..51f1ed7 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/index.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":["_configuration","DEFAULT_CONFIGURATION","_state","createState","State","configure","configuration","tearDown","Platform","OS","NativeInterface","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","type","Types","NetInfoStateType","unknown","isConnected","isInternetReachable","details","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["_react","require","_reactNative","_defaultConfiguration","_interopRequireDefault","_nativeInterface","_state2","Types","_interopRequireWildcard","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","n","__proto__","a","getOwnPropertyDescriptor","u","i","set","obj","_configuration","DEFAULT_CONFIGURATION","_state","createState","State","configure","configuration","tearDown","Platform","OS","NativeInterface","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","useState","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","useEffect","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state","useCallback","_default"],"sources":["index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js
new file mode 100644
index 0000000..e3949ec
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js
@@ -0,0 +1,10 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+var _reactNative = require("react-native");
+/* eslint-disable @typescript-eslint/ban-types */
+var _default = exports.default = _reactNative.TurboModuleRegistry.getEnforcing('RNCNetInfo');
+//# sourceMappingURL=NativeRNCNetInfo.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js.map
new file mode 100644
index 0000000..86d23d4
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/NativeRNCNetInfo.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["_reactNative","require","_default","exports","default","TurboModuleRegistry","getEnforcing"],"sources":["NativeRNCNetInfo.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\n\nexport interface Spec extends TurboModule {\n  configure: (config: Object) => void;\n  getCurrentState(requestedInterface?: string): Promise<Object>;\n  // Events\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCNetInfo');\n\n"],"mappings":";;;;;;AAEA,IAAAA,YAAA,GAAAC,OAAA;AAFA;AAAA,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAYeC,gCAAmB,CAACC,YAAY,CAAO,YAAY,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js
index 166a58d..c5b4e66 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js
@@ -19,6 +19,5 @@ const DEFAULT_CONFIGURATION = {
   shouldFetchWiFiSSID: false,
   useNativeReachability: true
 };
-var _default = DEFAULT_CONFIGURATION;
-exports.default = _default;
+var _default = exports.default = DEFAULT_CONFIGURATION;
 //# sourceMappingURL=defaultConfiguration.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js.map
index 03f9097..be92be9 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.js.map
@@ -1 +1 @@
-{"version":3,"sources":["defaultConfiguration.ts"],"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"mappings":";;;;;;AAEA,MAAMA,qBAAiD,GAAG;AACxDC,EAAAA,eAAe,EAAE,0CADuC;AAExDC,EAAAA,kBAAkB,EAAE,MAFoC;AAGxDC,EAAAA,mBAAmB,EAAE,EAHmC;AAIxDC,EAAAA,gBAAgB,EAAGC,QAAD,IAChBC,OAAO,CAACC,OAAR,CAAgBF,QAAQ,CAACG,MAAT,KAAoB,GAApC,CALsD;AAMxDC,EAAAA,wBAAwB,EAAE,IAAI,IAN0B;AAMpB;AACpCC,EAAAA,uBAAuB,EAAE,KAAK,IAP0B;AAOpB;AACpCC,EAAAA,0BAA0B,EAAE,KAAK,IARuB;AAQjB;AACvCC,EAAAA,qBAAqB,EAAE,MAAe,IATkB;AAUxDC,EAAAA,mBAAmB,EAAE,KAVmC;AAWxDC,EAAAA,qBAAqB,EAAE;AAXiC,CAA1D;eAced,qB","sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: 'https://clients3.google.com/generate_204',\n  reachabilityMethod: 'HEAD',\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 204),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: false,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION;"]}
\ No newline at end of file
+{"version":3,"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability","_default","exports","default"],"sources":["defaultConfiguration.ts"],"sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: 'https://clients3.google.com/generate_204',\n  reachabilityMethod: 'HEAD',\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 204),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: false,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION;"],"mappings":";;;;;;AAEA,MAAMA,qBAAiD,GAAG;EACxDC,eAAe,EAAE,0CAA0C;EAC3DC,kBAAkB,EAAE,MAAM;EAC1BC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,gBAAgB,EAAGC,QAAkB,IACnCC,OAAO,CAACC,OAAO,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,CAAC;EAC1CC,wBAAwB,EAAE,CAAC,GAAG,IAAI;EAAE;EACpCC,uBAAuB,EAAE,EAAE,GAAG,IAAI;EAAE;EACpCC,0BAA0B,EAAE,EAAE,GAAG,IAAI;EAAE;EACvCC,qBAAqB,EAAEA,CAAA,KAAe,IAAI;EAC1CC,mBAAmB,EAAE,KAAK;EAC1BC,qBAAqB,EAAE;AACzB,CAAC;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEajB,qBAAqB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js
index 410b7b0..a1e0456 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js
@@ -19,6 +19,5 @@ const DEFAULT_CONFIGURATION = {
   shouldFetchWiFiSSID: true,
   useNativeReachability: true
 };
-var _default = DEFAULT_CONFIGURATION;
-exports.default = _default;
+var _default = exports.default = DEFAULT_CONFIGURATION;
 //# sourceMappingURL=defaultConfiguration.web.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js.map
index edf0c39..d6ee21a 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/defaultConfiguration.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["defaultConfiguration.web.ts"],"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"mappings":";;;;;;AAEA,MAAMA,qBAAiD,GAAG;AACxDC,EAAAA,eAAe,EAAE,GADuC;AAExDC,EAAAA,kBAAkB,EAAE,MAFoC;AAGxDC,EAAAA,mBAAmB,EAAE,EAHmC;AAIxDC,EAAAA,gBAAgB,EAAGC,QAAD,IAChBC,OAAO,CAACC,OAAR,CAAgBF,QAAQ,CAACG,MAAT,KAAoB,GAApC,CALsD;AAMxDC,EAAAA,wBAAwB,EAAE,IAAI,IAN0B;AAMpB;AACpCC,EAAAA,uBAAuB,EAAE,KAAK,IAP0B;AAOpB;AACpCC,EAAAA,0BAA0B,EAAE,KAAK,IARuB;AAQjB;AACvCC,EAAAA,qBAAqB,EAAE,MAAe,IATkB;AAUxDC,EAAAA,mBAAmB,EAAE,IAVmC;AAWxDC,EAAAA,qBAAqB,EAAE;AAXiC,CAA1D;eAced,qB","sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: '/',\n  reachabilityMethod: \"HEAD\",\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 200),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: true,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION"]}
\ No newline at end of file
+{"version":3,"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability","_default","exports","default"],"sources":["defaultConfiguration.web.ts"],"sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: '/',\n  reachabilityMethod: \"HEAD\",\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 200),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: true,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION"],"mappings":";;;;;;AAEA,MAAMA,qBAAiD,GAAG;EACxDC,eAAe,EAAE,GAAG;EACpBC,kBAAkB,EAAE,MAAM;EAC1BC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,gBAAgB,EAAGC,QAAkB,IACnCC,OAAO,CAACC,OAAO,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,CAAC;EAC1CC,wBAAwB,EAAE,CAAC,GAAG,IAAI;EAAE;EACpCC,uBAAuB,EAAE,EAAE,GAAG,IAAI;EAAE;EACpCC,0BAA0B,EAAE,EAAE,GAAG,IAAI;EAAE;EACvCC,qBAAqB,EAAEA,CAAA,KAAe,IAAI;EAC1CC,mBAAmB,EAAE,IAAI;EACzBC,qBAAqB,EAAE;AACzB,CAAC;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAC,OAAA,GAEajB,qBAAqB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js
index 45296d9..5169ed8 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js
@@ -4,9 +4,9 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
+function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
+function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -15,57 +15,45 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
  *
  * @format
  */
+
 class InternetReachability {
   constructor(configuration, listener) {
     _defineProperty(this, "_configuration", void 0);
-
     _defineProperty(this, "_listener", void 0);
-
     _defineProperty(this, "_isInternetReachable", undefined);
-
     _defineProperty(this, "_currentInternetReachabilityCheckHandler", null);
-
     _defineProperty(this, "_currentTimeoutHandle", null);
-
     _defineProperty(this, "_setIsInternetReachable", isInternetReachable => {
       if (this._isInternetReachable === isInternetReachable) {
         return;
       }
-
       this._isInternetReachable = isInternetReachable;
-
       this._listener(this._isInternetReachable);
     });
-
     _defineProperty(this, "_setExpectsConnection", expectsConnection => {
       // Cancel any pending check
       if (this._currentInternetReachabilityCheckHandler !== null) {
         this._currentInternetReachabilityCheckHandler.cancel();
-
         this._currentInternetReachabilityCheckHandler = null;
-      } // Cancel any pending timeout
-
-
+      }
+      // Cancel any pending timeout
       if (this._currentTimeoutHandle !== null) {
         clearTimeout(this._currentTimeoutHandle);
         this._currentTimeoutHandle = null;
       }
-
       if (expectsConnection && this._configuration.reachabilityShouldRun()) {
         // If we expect a connection, start the process for finding if we have one
         // Set the state to "null" if it was previously false
         if (!this._isInternetReachable) {
           this._setIsInternetReachable(null);
-        } // Start a network request to check for internet
-
-
+        }
+        // Start a network request to check for internet
         this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();
       } else {
         // If we don't expect a connection or don't run reachability check, just change the state to "false"
         this._setIsInternetReachable(false);
       }
     });
-
     _defineProperty(this, "_checkInternetReachability", () => {
       const controller = new AbortController();
       const responsePromise = fetch(this._configuration.reachabilityUrl, {
@@ -73,16 +61,17 @@ class InternetReachability {
         method: this._configuration.reachabilityMethod,
         cache: 'no-cache',
         signal: controller.signal
-      }); // Create promise that will reject after the request timeout has been reached
+      });
 
+      // Create promise that will reject after the request timeout has been reached
       let timeoutHandle;
-      const timeoutPromise = new Promise(() => {
-        timeoutHandle = setTimeout(() => controller.abort('timedout'), this._configuration.reachabilityRequestTimeout);
-      }); // Create promise that makes it possible to cancel a pending request through a reject
-      // eslint-disable-next-line @typescript-eslint/no-empty-function
+      const timeoutPromise = new Promise((_, reject) => {
+        timeoutHandle = setTimeout(() => reject('timedout'), this._configuration.reachabilityRequestTimeout);
+      });
 
+      // Create promise that makes it possible to cancel a pending request through a reject
+      // eslint-disable-next-line @typescript-eslint/no-empty-function
       let cancel = () => {};
-
       const cancelPromise = new Promise((_, reject) => {
         cancel = () => reject('canceled');
       });
@@ -90,18 +79,25 @@ class InternetReachability {
         return this._configuration.reachabilityTest(response);
       }).then(result => {
         this._setIsInternetReachable(result);
-
         const nextTimeoutInterval = this._isInternetReachable ? this._configuration.reachabilityLongTimeout : this._configuration.reachabilityShortTimeout;
         this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, nextTimeoutInterval);
+      }).catch(error => {
+        if (error !== 'canceled') {
+          this._setIsInternetReachable(false);
+          this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, this._configuration.reachabilityShortTimeout);
+        }
       }).catch(error => {
         if ('canceled' === error) {
           controller.abort();
         } else {
+          if ('timedout' === error) {
+            controller.abort();
+          }
           this._setIsInternetReachable(false);
-
           this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, this._configuration.reachabilityShortTimeout);
         }
-      }) // Clear request timeout and propagate any errors
+      })
+      // Clear request timeout and propagate any errors
       .then(() => {
         clearTimeout(timeoutHandle);
       }, error => {
@@ -113,7 +109,6 @@ class InternetReachability {
         cancel
       };
     });
-
     _defineProperty(this, "update", state => {
       if (typeof state.isInternetReachable === 'boolean' && this._configuration.useNativeReachability) {
         this._setIsInternetReachable(state.isInternetReachable);
@@ -121,31 +116,25 @@ class InternetReachability {
         this._setExpectsConnection(state.isConnected);
       }
     });
-
     _defineProperty(this, "currentState", () => {
       return this._isInternetReachable;
     });
-
     _defineProperty(this, "tearDown", () => {
       // Cancel any pending check
       if (this._currentInternetReachabilityCheckHandler !== null) {
         this._currentInternetReachabilityCheckHandler.cancel();
-
         this._currentInternetReachabilityCheckHandler = null;
-      } // Cancel any pending timeout
-
+      }
 
+      // Cancel any pending timeout
       if (this._currentTimeoutHandle !== null) {
         clearTimeout(this._currentTimeoutHandle);
         this._currentTimeoutHandle = null;
       }
     });
-
     this._configuration = configuration;
     this._listener = listener;
   }
-
 }
-
 exports.default = InternetReachability;
 //# sourceMappingURL=internetReachability.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js.map
index 6d12691..63bd2df 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/internetReachability.js.map
@@ -1 +1 @@
-{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","constructor","configuration","listener","undefined","isInternetReachable","_isInternetReachable","_listener","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","_configuration","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","controller","AbortController","responsePromise","fetch","reachabilityUrl","headers","reachabilityHeaders","method","reachabilityMethod","cache","signal","timeoutHandle","timeoutPromise","Promise","setTimeout","abort","reachabilityRequestTimeout","cancelPromise","_","reject","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","state","useNativeReachability","_setExpectsConnection","isConnected"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\nimport * as Types from './types';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const controller = new AbortController();\n\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      headers: this._configuration.reachabilityHeaders,\n      method: this._configuration.reachabilityMethod,\n      cache: 'no-cache',\n      signal: controller.signal,\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>((): void => {\n      timeoutHandle = setTimeout(\n        (): void => controller.abort('timedout'),\n        this._configuration.reachabilityRequestTimeout,\n      );\n    });\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>((_, reject): void => {\n      cancel = (): void => reject('canceled');\n    });\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if ('canceled' === error) {\n            controller.abort();\n          } else {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (\n      typeof state.isInternetReachable === 'boolean' &&\n      this._configuration.useNativeReachability\n    ) {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["InternetReachability","constructor","configuration","listener","_defineProperty","undefined","isInternetReachable","_isInternetReachable","_listener","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","_configuration","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","controller","AbortController","responsePromise","fetch","reachabilityUrl","headers","reachabilityHeaders","method","reachabilityMethod","cache","signal","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","abort","state","useNativeReachability","_setExpectsConnection","isConnected","exports","default"],"sources":["internetReachability.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\nimport * as Types from './types';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null =\n    null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler =\n        this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const controller = new AbortController();\n\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      headers: this._configuration.reachabilityHeaders,\n      method: this._configuration.reachabilityMethod,\n      cache: 'no-cache',\n      signal: controller.signal,\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>((_, reject): void => {\n      timeoutHandle = setTimeout(\n        (): void => reject('timedout'),\n        this._configuration.reachabilityRequestTimeout,\n      );\n    });\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>((_, reject): void => {\n      cancel = (): void => reject('canceled');\n    });\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then((response): Promise<boolean> => {\n        return this._configuration.reachabilityTest(response);\n      })\n      .then((result): void => {\n        this._setIsInternetReachable(result);\n        const nextTimeoutInterval = this._isInternetReachable\n          ? this._configuration.reachabilityLongTimeout\n          : this._configuration.reachabilityShortTimeout;\n        this._currentTimeoutHandle = setTimeout(\n          this._checkInternetReachability,\n          nextTimeoutInterval,\n        );\n      })\n      .catch((error: Error | 'timedout' | 'canceled'): void => {\n        if (error !== 'canceled') {\n          this._setIsInternetReachable(false);\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            this._configuration.reachabilityShortTimeout,\n          );\n        }\n      })\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if ('canceled' === error) {\n            controller.abort();\n          } else {\n            if ('timedout' === error) {\n              controller.abort();\n            }\n            \n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (\n      typeof state.isInternetReachable === 'boolean' &&\n      this._configuration.useNativeReachability\n    ) {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js
index 7a50da5..cb7d968 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js
@@ -4,13 +4,9 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
 var _reactNative = require("react-native");
-
 var _nativeModule = _interopRequireDefault(require("./nativeModule"));
-
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -19,6 +15,7 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  *
  * @format
  */
+
 // Produce an error if we don't have the native module
 if (!_nativeModule.default) {
   throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:
@@ -31,27 +28,26 @@ if (!_nativeModule.default) {
 
 If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);
 }
+
 /**
  * We export the native interface in this way to give easy shared access to it between the
  * JavaScript code and the tests
  */
-
-
 let nativeEventEmitter = null;
-var _default = { ..._nativeModule.default,
-
+var _default = exports.default = {
+  configure: _nativeModule.default.configure,
+  addListener: _nativeModule.default.addListener,
+  removeListeners: _nativeModule.default.removeListeners,
+  getCurrentState: _nativeModule.default.getCurrentState,
   get eventEmitter() {
     if (!nativeEventEmitter) {
       // eslint-disable-next-line @typescript-eslint/ban-ts-comment
       /// @ts-ignore
       nativeEventEmitter = new _reactNative.NativeEventEmitter(_nativeModule.default);
-    } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
+    }
+    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
     /// @ts-ignore
-
-
     return nativeEventEmitter;
   }
-
 };
-exports.default = _default;
 //# sourceMappingURL=nativeInterface.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js.map
index 1e7ac57..33b4bc0 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeInterface.ts"],"names":["RNCNetInfo","Error","nativeEventEmitter","eventEmitter","NativeEventEmitter"],"mappings":";;;;;;;AASA;;AACA;;;;AAVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA,IAAI,CAACA,qBAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IARQ,CAAN;AASD;AAED;AACA;AACA;AACA;;;AACA,IAAIC,kBAA6C,GAAG,IAApD;eACe,EACb,GAAGF,qBADU;;AAEb,MAAIG,YAAJ,GAAuC;AACrC,QAAI,CAACD,kBAAL,EAAyB;AACvB;AACA;AACAA,MAAAA,kBAAkB,GAAG,IAAIE,+BAAJ,CAAuBJ,qBAAvB,CAArB;AACD,KALoC,CAMrC;AACA;;;AACA,WAAOE,kBAAP;AACD;;AAXY,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\n\n// Produce an error if we don't have the native module\nif (!RNCNetInfo) {\n  throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n• Run \\`react-native link @react-native-community/netinfo\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);\n}\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\nexport default {\n  ...RNCNetInfo,\n  get eventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      /// @ts-ignore\n      nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /// @ts-ignore\n    return nativeEventEmitter;\n  },\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["_reactNative","require","_nativeModule","_interopRequireDefault","obj","__esModule","default","RNCNetInfo","Error","nativeEventEmitter","_default","exports","configure","addListener","removeListeners","getCurrentState","eventEmitter","NativeEventEmitter"],"sources":["nativeInterface.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\n\n// Produce an error if we don't have the native module\nif (!RNCNetInfo) {\n  throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n• Run \\`react-native link @react-native-community/netinfo\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);\n}\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\n\nexport default {\n  configure: RNCNetInfo.configure,\n  addListener: RNCNetInfo.addListener,\n  removeListeners: RNCNetInfo.removeListeners,\n  getCurrentState: RNCNetInfo.getCurrentState,\n  get eventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      /// @ts-ignore\n      nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /// @ts-ignore\n    return nativeEventEmitter;\n  },\n};\n"],"mappings":";;;;;;AASA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAwC,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAVxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA,IAAI,CAACG,qBAAU,EAAE;EACf,MAAM,IAAIC,KAAK,CAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAA8I,CAAC;AAC/I;;AAEA;AACA;AACA;AACA;AACA,IAAIC,kBAA6C,GAAG,IAAI;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAL,OAAA,GAE1C;EACbM,SAAS,EAAEL,qBAAU,CAACK,SAAS;EAC/BC,WAAW,EAAEN,qBAAU,CAACM,WAAW;EACnCC,eAAe,EAAEP,qBAAU,CAACO,eAAe;EAC3CC,eAAe,EAAER,qBAAU,CAACQ,eAAe;EAC3C,IAAIC,YAAYA,CAAA,EAAuB;IACrC,IAAI,CAACP,kBAAkB,EAAE;MACvB;MACA;MACAA,kBAAkB,GAAG,IAAIQ,+BAAkB,CAACV,qBAAU,CAAC;IACzD;IACA;IACA;IACA,OAAOE,kBAAkB;EAC3B;AACF,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js
index 5e77388..d591606 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js
@@ -4,15 +4,10 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
 var _reactNative = require("react-native");
-
 var _nativeModule = _interopRequireDefault(require("./nativeModule"));
-
 var _privateTypes = require("./privateTypes");
-
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -21,14 +16,15 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  *
  * @format
  */
-const nativeEventEmitter = new _reactNative.NativeEventEmitter(); // Listen to connectivity events
 
+const nativeEventEmitter = new _reactNative.NativeEventEmitter();
+
+// Listen to connectivity events
 _nativeModule.default.addListener(_privateTypes.DEVICE_CONNECTIVITY_EVENT, event => {
   nativeEventEmitter.emit(_privateTypes.DEVICE_CONNECTIVITY_EVENT, event);
 });
-
-var _default = { ..._nativeModule.default,
+var _default = exports.default = {
+  ..._nativeModule.default,
   eventEmitter: nativeEventEmitter
 };
-exports.default = _default;
 //# sourceMappingURL=nativeInterface.web.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js.map
index 9fc4a6d..9b6f4b4 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeInterface.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeInterface.web.ts"],"names":["nativeEventEmitter","NativeEventEmitter","RNCNetInfo","addListener","DEVICE_CONNECTIVITY_EVENT","event","emit","eventEmitter"],"mappings":";;;;;;;AASA;;AACA;;AACA;;;;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,MAAMA,kBAAkB,GAAG,IAAIC,+BAAJ,EAA3B,C,CAEA;;AACAC,sBAAWC,WAAX,CACEC,uCADF,EAEGC,KAAD,IAAiB;AACfL,EAAAA,kBAAkB,CAACM,IAAnB,CAAwBF,uCAAxB,EAAmDC,KAAnD;AACD,CAJH;;eAOe,EACb,GAAGH,qBADU;AAEbK,EAAAA,YAAY,EAAEP;AAFD,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\nimport {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';\n\nconst nativeEventEmitter = new NativeEventEmitter();\n\n// Listen to connectivity events\nRNCNetInfo.addListener(\n  DEVICE_CONNECTIVITY_EVENT,\n  (event): void => {\n    nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n  },\n);\n\nexport default {\n  ...RNCNetInfo,\n  eventEmitter: nativeEventEmitter,\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["_reactNative","require","_nativeModule","_interopRequireDefault","_privateTypes","obj","__esModule","default","nativeEventEmitter","NativeEventEmitter","RNCNetInfo","addListener","DEVICE_CONNECTIVITY_EVENT","event","emit","_default","exports","eventEmitter"],"sources":["nativeInterface.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\nimport {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';\n\nconst nativeEventEmitter = new NativeEventEmitter();\n\n// Listen to connectivity events\nRNCNetInfo.addListener(DEVICE_CONNECTIVITY_EVENT, (event): void => {\n  nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n});\n\nexport default {\n  ...RNCNetInfo,\n  eventEmitter: nativeEventEmitter,\n};\n"],"mappings":";;;;;;AASA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AAAyD,SAAAE,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAXzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,MAAMG,kBAAkB,GAAG,IAAIC,+BAAkB,CAAC,CAAC;;AAEnD;AACAC,qBAAU,CAACC,WAAW,CAACC,uCAAyB,EAAGC,KAAK,IAAW;EACjEL,kBAAkB,CAACM,IAAI,CAACF,uCAAyB,EAAEC,KAAK,CAAC;AAC3D,CAAC,CAAC;AAAC,IAAAE,QAAA,GAAAC,OAAA,CAAAT,OAAA,GAEY;EACb,GAAGG,qBAAU;EACbO,YAAY,EAAET;AAChB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js
index 8fd237d..6d06932 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js
@@ -4,9 +4,7 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
 var _reactNative = require("react-native");
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -15,7 +13,15 @@ var _reactNative = require("react-native");
  *
  * @format
  */
-const RNCNetInfo = _reactNative.NativeModules.RNCNetInfo;
-var _default = RNCNetInfo;
-exports.default = _default;
+
+// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.
+// Currently, this is the recommended way to detect TurboModules.
+// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs
+// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+// @ts-ignore
+const isTurboModuleEnabled = global.__turboModuleProxy != null;
+const RNCNetInfo = isTurboModuleEnabled ?
+// eslint-disable-next-line @typescript-eslint/no-var-requires
+require('./NativeRNCNetInfo').default : _reactNative.NativeModules.RNCNetInfo;
+var _default = exports.default = RNCNetInfo;
 //# sourceMappingURL=nativeModule.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js.map
index dcf6159..5d5bb50 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeModule.ts"],"names":["RNCNetInfo","NativeModules"],"mappings":";;;;;;;AASA;;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,MAAMA,UAA+B,GAAGC,2BAAcD,UAAtD;eAEeA,U","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NetInfoNativeModule} from './privateTypes';\n\nconst RNCNetInfo: NetInfoNativeModule = NativeModules.RNCNetInfo;\n\nexport default RNCNetInfo;\n"]}
\ No newline at end of file
+{"version":3,"names":["_reactNative","require","isTurboModuleEnabled","global","__turboModuleProxy","RNCNetInfo","default","NativeModules","_default","exports"],"sources":["nativeModule.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NetInfoNativeModule} from './privateTypes';\n\n// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.\n// Currently, this is the recommended way to detect TurboModules.\n// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst isTurboModuleEnabled = global.__turboModuleProxy != null;\n\nconst RNCNetInfo: NetInfoNativeModule = isTurboModuleEnabled\n  ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('./NativeRNCNetInfo').default\n  : NativeModules.RNCNetInfo;\n\nexport default RNCNetInfo;\n"],"mappings":";;;;;;AASA,IAAAA,YAAA,GAAAC,OAAA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,kBAAkB,IAAI,IAAI;AAE9D,MAAMC,UAA+B,GAAGH,oBAAoB;AACxD;AACAD,OAAO,CAAC,oBAAoB,CAAC,CAACK,OAAO,GACrCC,0BAAa,CAACF,UAAU;AAAC,IAAAG,QAAA,GAAAC,OAAA,CAAAH,OAAA,GAEdD,UAAU"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js
index ad66cbe..0da582c 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js
@@ -4,11 +4,8 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
 var _privateTypes = require("./privateTypes");
-
 var _types = require("./types");
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -17,12 +14,23 @@ var _types = require("./types");
  *
  * @format
  */
+
+// See https://wicg.github.io/netinfo/#dom-connectiontype
+
+// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype
+
+// https://wicg.github.io/netinfo/#dom-networkinformation-savedata
+
+// Create (optional) connection APIs on navigator
+
 // Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,
 // but this test correctly detects that window is not available and allows for conditionals before access
-const isWindowPresent = typeof window !== 'undefined'; // Check if window exists and if the browser supports the connection API
+const isWindowPresent = typeof window !== 'undefined';
 
-const connection = isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS') ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined; // Map browser types to native types
+// Check if window exists and if the browser supports the connection API
+const connection = isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS') ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined;
 
+// Map browser types to native types
 const typeMapping = {
   bluetooth: _types.NetInfoStateType.bluetooth,
   cellular: _types.NetInfoStateType.cellular,
@@ -39,17 +47,20 @@ const effectiveTypeMapping = {
   '3g': _types.NetInfoCellularGeneration['3g'],
   '4g': _types.NetInfoCellularGeneration['4g'],
   'slow-2g': _types.NetInfoCellularGeneration['2g']
-}; // Determine current state of connection
+};
 
+// Determine current state of connection
 const getCurrentState = _requestedInterface => {
   const isConnected = isWindowPresent ? navigator.onLine : false;
   const baseState = {
     isInternetReachable: null
-  }; // If we don't have a connection object, we return minimal information
+  };
 
+  // If we don't have a connection object, we return minimal information
   if (!connection) {
     if (isConnected) {
-      const state = { ...baseState,
+      const state = {
+        ...baseState,
         isConnected: true,
         type: _types.NetInfoStateType.other,
         details: {
@@ -58,22 +69,22 @@ const getCurrentState = _requestedInterface => {
       };
       return state;
     }
-
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: false,
       isInternetReachable: false,
       type: _types.NetInfoStateType.none,
       details: null
     };
     return state;
-  } // Otherwise try to return detailed information
-
+  }
 
+  // Otherwise try to return detailed information
   const isConnectionExpensive = connection.saveData;
   const type = connection.type ? typeMapping[connection.type] : isConnected ? _types.NetInfoStateType.other : _types.NetInfoStateType.unknown;
-
   if (type === _types.NetInfoStateType.bluetooth) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -82,7 +93,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.cellular) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -93,7 +105,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.ethernet) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -104,7 +117,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.wifi) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -122,7 +136,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.wimax) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -131,7 +146,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.none) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: false,
       isInternetReachable: false,
       type,
@@ -139,7 +155,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === _types.NetInfoStateType.unknown) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected,
       isInternetReachable: null,
       type,
@@ -147,8 +164,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   }
-
-  const state = { ...baseState,
+  const state = {
+    ...baseState,
     isConnected: true,
     type: _types.NetInfoStateType.other,
     details: {
@@ -157,7 +174,6 @@ const getCurrentState = _requestedInterface => {
   };
   return state;
 };
-
 const handlers = [];
 const nativeHandlers = [];
 const RNCNetInfo = {
@@ -168,7 +184,6 @@ const RNCNetInfo = {
           const nativeHandler = () => {
             handler(getCurrentState());
           };
-
           if (connection) {
             connection.addEventListener('change', nativeHandler);
           } else {
@@ -176,16 +191,15 @@ const RNCNetInfo = {
               window.addEventListener('online', nativeHandler, false);
               window.addEventListener('offline', nativeHandler, false);
             }
-          } // Remember handlers
-
+          }
 
+          // Remember handlers
           handlers.push(handler);
           nativeHandlers.push(nativeHandler);
           break;
         }
     }
   },
-
   removeListeners(type, handler) {
     switch (type) {
       case _privateTypes.DEVICE_CONNECTIVITY_EVENT:
@@ -193,7 +207,6 @@ const RNCNetInfo = {
           // Get native handler
           const index = handlers.indexOf(handler);
           const nativeHandler = nativeHandlers[index];
-
           if (connection) {
             connection.removeEventListener('change', nativeHandler);
           } else {
@@ -201,25 +214,21 @@ const RNCNetInfo = {
               window.removeEventListener('online', nativeHandler);
               window.removeEventListener('offline', nativeHandler);
             }
-          } // Remove handlers
-
+          }
 
+          // Remove handlers
           handlers.splice(index, 1);
           nativeHandlers.splice(index, 1);
           break;
         }
     }
   },
-
   async getCurrentState(requestedInterface) {
     return getCurrentState(requestedInterface);
   },
-
   configure() {
     return;
   }
-
 };
-var _default = RNCNetInfo;
-exports.default = _default;
+var _default = exports.default = RNCNetInfo;
 //# sourceMappingURL=nativeModule.web.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js.map
index 7dcfca9..a0632f9 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/nativeModule.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeModule.web.ts"],"names":["isWindowPresent","window","connection","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","DEVICE_CONNECTIVITY_EVENT","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"]}
\ No newline at end of file
+{"version":3,"names":["_privateTypes","require","_types","isWindowPresent","window","connection","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","NetInfoStateType","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","NetInfoCellularGeneration","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","DEVICE_CONNECTIVITY_EVENT","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure","_default","exports","default"],"sources":["nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js
index 3112de1..ca209c1 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js
@@ -4,7 +4,6 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.DEVICE_CONNECTIVITY_EVENT = void 0;
-
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -13,7 +12,8 @@ exports.DEVICE_CONNECTIVITY_EVENT = void 0;
  *
  * @format
  */
-const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange'; // Certain properties are optional when sent by the native module and are handled by the JS code
 
-exports.DEVICE_CONNECTIVITY_EVENT = DEVICE_CONNECTIVITY_EVENT;
+const DEVICE_CONNECTIVITY_EVENT = exports.DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';
+
+// Certain properties are optional when sent by the native module and are handled by the JS code
 //# sourceMappingURL=privateTypes.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js.map
index 2838e9a..a56f61c 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/privateTypes.js.map
@@ -1 +1 @@
-{"version":3,"sources":["privateTypes.ts"],"names":["DEVICE_CONNECTIVITY_EVENT"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIO,MAAMA,yBAAyB,GAAG,gCAAlC,C,CAEP","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NetInfoConfiguration, NetInfoState} from './types';\n\nexport const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\n// Certain properties are optional when sent by the native module and are handled by the JS code\nexport type NetInfoNativeModuleState = Pick<\n  NetInfoState,\n  Exclude<keyof NetInfoState, 'isInternetReachable'>\n> & {isInternetReachable?: boolean};\n\nexport interface Events {\n  [DEVICE_CONNECTIVITY_EVENT]: NetInfoNativeModuleState;\n}\n\nexport interface NetInfoNativeModule {\n  configure: (config: Partial<NetInfoConfiguration>) => void;\n  getCurrentState: (\n    requestedInterface?: string,\n  ) => Promise<NetInfoNativeModuleState>;\n  addListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeListeners<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\nexport type NetInfoInternetReachabilityChangeListener = (\n  isInternetReachable: boolean | null | undefined,\n) => void;\n"]}
\ No newline at end of file
+{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT","exports"],"sources":["privateTypes.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NetInfoConfiguration, NetInfoState} from './types';\n\nexport const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\n// Certain properties are optional when sent by the native module and are handled by the JS code\nexport type NetInfoNativeModuleState = Pick<\n  NetInfoState,\n  Exclude<keyof NetInfoState, 'isInternetReachable'>\n> & {isInternetReachable?: boolean};\n\nexport interface Events {\n  [DEVICE_CONNECTIVITY_EVENT]: NetInfoNativeModuleState;\n}\n\nexport interface NetInfoNativeModule {\n  configure: (config: Partial<NetInfoConfiguration>) => void;\n  getCurrentState: (\n    requestedInterface?: string,\n  ) => Promise<NetInfoNativeModuleState>;\n  addListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeListeners<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\nexport type NetInfoInternetReachabilityChangeListener = (\n  isInternetReachable: boolean | null | undefined,\n) => void;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIO,MAAMA,yBAAyB,GAAAC,OAAA,CAAAD,yBAAA,GAAG,gCAAgC;;AAEzE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js
index 80dce38..57b8fbf 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js
@@ -4,84 +4,73 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-
 var _nativeInterface = _interopRequireDefault(require("./nativeInterface"));
-
 var _internetReachability = _interopRequireDefault(require("./internetReachability"));
-
 var PrivateTypes = _interopRequireWildcard(require("./privateTypes"));
-
-function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
-
-function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
-
+function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
+function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
+function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
+function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
+                                                                                                                                                                                                                                                                                                                                                                                           * Copyright (c) Facebook, Inc. and its affiliates.
+                                                                                                                                                                                                                                                                                                                                                                                           *
+                                                                                                                                                                                                                                                                                                                                                                                           * This source code is licensed under the MIT license found in the
+                                                                                                                                                                                                                                                                                                                                                                                           * LICENSE file in the root directory of this source tree.
+                                                                                                                                                                                                                                                                                                                                                                                           *
+                                                                                                                                                                                                                                                                                                                                                                                           * @format
+                                                                                                                                                                                                                                                                                                                                                                                           */
 class State {
   constructor(configuration) {
     _defineProperty(this, "_nativeEventSubscription", null);
-
     _defineProperty(this, "_subscriptions", new Set());
-
     _defineProperty(this, "_latestState", null);
-
     _defineProperty(this, "_internetReachability", void 0);
-
     _defineProperty(this, "_handleNativeStateUpdate", state => {
       // Update the internet reachability module
-      this._internetReachability.update(state); // Convert the state from native to JS shape
-
-
-      const convertedState = this._convertState(state); // Update the listeners
+      this._internetReachability.update(state);
 
+      // Convert the state from native to JS shape
+      const convertedState = this._convertState(state);
 
+      // Update the listeners
       this._latestState = convertedState;
-
       this._subscriptions.forEach(handler => handler(convertedState));
     });
-
     _defineProperty(this, "_handleInternetReachabilityUpdate", isInternetReachable => {
       if (!this._latestState) {
         return;
       }
-
-      const nextState = { ...this._latestState,
+      const nextState = {
+        ...this._latestState,
         isInternetReachable
       };
       this._latestState = nextState;
-
       this._subscriptions.forEach(handler => handler(nextState));
     });
-
     _defineProperty(this, "_fetchCurrentState", async requestedInterface => {
-      const state = await _nativeInterface.default.getCurrentState(requestedInterface); // Update the internet reachability module
-
-      this._internetReachability.update(state); // Convert and store the new state
-
+      const state = await _nativeInterface.default.getCurrentState(requestedInterface);
 
+      // Update the internet reachability module
+      this._internetReachability.update(state);
+      // Convert and store the new state
       const convertedState = this._convertState(state);
-
       if (!requestedInterface) {
         this._latestState = convertedState;
-
         this._subscriptions.forEach(handler => handler(convertedState));
       }
-
       return convertedState;
     });
-
     _defineProperty(this, "_convertState", input => {
       if (typeof input.isInternetReachable === 'boolean') {
         return input;
       } else {
-        return { ...input,
+        return {
+          ...input,
           isInternetReachable: this._internetReachability.currentState()
         };
       }
     });
-
     _defineProperty(this, "latest", requestedInterface => {
       if (requestedInterface) {
         return this._fetchCurrentState(requestedInterface);
@@ -91,44 +80,38 @@ class State {
         return this._fetchCurrentState();
       }
     });
-
     _defineProperty(this, "add", handler => {
       // Add the subscription handler to our set
-      this._subscriptions.add(handler); // Send it the latest data we have
-
+      this._subscriptions.add(handler);
 
+      // Send it the latest data we have
       if (this._latestState) {
         handler(this._latestState);
       } else {
         this.latest().then(handler);
       }
     });
-
     _defineProperty(this, "remove", handler => {
       this._subscriptions.delete(handler);
     });
-
     _defineProperty(this, "tearDown", () => {
       if (this._internetReachability) {
         this._internetReachability.tearDown();
       }
-
       if (this._nativeEventSubscription) {
         this._nativeEventSubscription.remove();
       }
-
       this._subscriptions.clear();
     });
-
     // Add the listener to the internet connectivity events
-    this._internetReachability = new _internetReachability.default(configuration, this._handleInternetReachabilityUpdate); // Add the subscription to the native events
+    this._internetReachability = new _internetReachability.default(configuration, this._handleInternetReachabilityUpdate);
 
-    this._nativeEventSubscription = _nativeInterface.default.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT, this._handleNativeStateUpdate); // Fetch the current state from the native module
+    // Add the subscription to the native events
+    this._nativeEventSubscription = _nativeInterface.default.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT, this._handleNativeStateUpdate);
 
+    // Fetch the current state from the native module
     this._fetchCurrentState();
   }
-
 }
-
 exports.default = State;
 //# sourceMappingURL=state.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js.map
index 40ae85c..473e940 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/state.js.map
@@ -1 +1 @@
-{"version":3,"sources":["state.ts"],"names":["State","constructor","configuration","Set","state","_internetReachability","update","convertedState","_convertState","_latestState","_subscriptions","forEach","handler","isInternetReachable","nextState","requestedInterface","NativeInterface","getCurrentState","input","currentState","_fetchCurrentState","Promise","resolve","add","latest","then","delete","tearDown","_nativeEventSubscription","remove","clear","InternetReachability","_handleInternetReachabilityUpdate","eventEmitter","addListener","PrivateTypes","DEVICE_CONNECTIVITY_EVENT","_handleNativeStateUpdate"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["_nativeInterface","_interopRequireDefault","require","_internetReachability","PrivateTypes","_interopRequireWildcard","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","_defineProperty","key","value","_toPropertyKey","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","State","constructor","configuration","Set","state","update","convertedState","_convertState","_latestState","_subscriptions","forEach","handler","isInternetReachable","nextState","requestedInterface","NativeInterface","getCurrentState","currentState","_fetchCurrentState","Promise","resolve","add","latest","then","delete","tearDown","_nativeEventSubscription","remove","clear","InternetReachability","_handleInternetReachabilityUpdate","eventEmitter","addListener","DEVICE_CONNECTIVITY_EVENT","_handleNativeStateUpdate","exports"],"sources":["state.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js
index 39e4871..92824aa 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js
@@ -3,8 +3,7 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.NetInfoCellularGeneration = exports.NetInfoStateType = void 0;
-
+exports.NetInfoStateType = exports.NetInfoCellularGeneration = void 0;
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -13,10 +12,7 @@ exports.NetInfoCellularGeneration = exports.NetInfoStateType = void 0;
  *
  * @format
  */
-let NetInfoStateType;
-exports.NetInfoStateType = NetInfoStateType;
-
-(function (NetInfoStateType) {
+let NetInfoStateType = exports.NetInfoStateType = /*#__PURE__*/function (NetInfoStateType) {
   NetInfoStateType["unknown"] = "unknown";
   NetInfoStateType["none"] = "none";
   NetInfoStateType["cellular"] = "cellular";
@@ -26,15 +22,13 @@ exports.NetInfoStateType = NetInfoStateType;
   NetInfoStateType["wimax"] = "wimax";
   NetInfoStateType["vpn"] = "vpn";
   NetInfoStateType["other"] = "other";
-})(NetInfoStateType || (exports.NetInfoStateType = NetInfoStateType = {}));
-
-let NetInfoCellularGeneration;
-exports.NetInfoCellularGeneration = NetInfoCellularGeneration;
-
-(function (NetInfoCellularGeneration) {
+  return NetInfoStateType;
+}({});
+let NetInfoCellularGeneration = exports.NetInfoCellularGeneration = /*#__PURE__*/function (NetInfoCellularGeneration) {
   NetInfoCellularGeneration["2g"] = "2g";
   NetInfoCellularGeneration["3g"] = "3g";
   NetInfoCellularGeneration["4g"] = "4g";
   NetInfoCellularGeneration["5g"] = "5g";
-})(NetInfoCellularGeneration || (exports.NetInfoCellularGeneration = NetInfoCellularGeneration = {}));
+  return NetInfoCellularGeneration;
+}({});
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js.map b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js.map
index 095dd3b..596ace1 100644
--- a/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/commonjs/internal/types.js.map
@@ -1 +1 @@
-{"version":3,"sources":["types.ts"],"names":["NetInfoStateType","NetInfoCellularGeneration"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEYA,gB;;;WAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,gCAAAA,gB;;IAcAC,yB;;;WAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,yCAAAA,yB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport type NetInfoMethodType = 'HEAD' | 'GET';\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>\n> {\n  type: T;\n  isConnected: true;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: false;\n  isInternetReachable: false;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport type NetInfoNoConnectionState = NetInfoDisconnectedState<\n  NetInfoStateType.none\n>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n    linkSpeed: number | null;\n    rxLinkSpeed: number | null;\n    txLinkSpeed: number | null;\n  }\n>;\nexport type NetInfoBluetoothState = NetInfoConnectedState<\n  NetInfoStateType.bluetooth\n>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityMethod?: NetInfoMethodType;\n  reachabilityHeaders?: Record<string, string>;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n  shouldFetchWiFiSSID: boolean;\n  useNativeReachability: boolean;\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["NetInfoStateType","exports","NetInfoCellularGeneration"],"sources":["types.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport type NetInfoMethodType = 'HEAD' | 'GET';\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>,\n> {\n  type: T;\n  isConnected: true;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: false;\n  isInternetReachable: false;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport type NetInfoNoConnectionState =\n  NetInfoDisconnectedState<NetInfoStateType.none>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n    linkSpeed: number | null;\n    rxLinkSpeed: number | null;\n    txLinkSpeed: number | null;\n  }\n>;\nexport type NetInfoBluetoothState =\n  NetInfoConnectedState<NetInfoStateType.bluetooth>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityMethod?: NetInfoMethodType;\n  reachabilityHeaders?: Record<string, string>;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n  shouldFetchWiFiSSID: boolean;\n  useNativeReachability: boolean;\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,IASYA,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAAA,IAchBE,yBAAyB,GAAAD,OAAA,CAAAC,yBAAA,0BAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAA,OAAzBA,yBAAyB;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/index.js b/node_modules/@react-native-community/netinfo/lib/module/index.js
index 147c72e..02aa0db 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/index.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/index.js
@@ -6,20 +6,23 @@
  *
  * @format
  */
+
 import { useState, useEffect, useCallback } from 'react';
 import { Platform } from 'react-native';
 import DEFAULT_CONFIGURATION from './internal/defaultConfiguration';
 import NativeInterface from './internal/nativeInterface';
 import State from './internal/state';
-import * as Types from './internal/types'; // Stores the currently used configuration
+import * as Types from './internal/types';
 
-let _configuration = DEFAULT_CONFIGURATION; // Stores the singleton reference to the state manager
+// Stores the currently used configuration
+let _configuration = DEFAULT_CONFIGURATION;
 
+// Stores the singleton reference to the state manager
 let _state = null;
-
 const createState = () => {
   return new State(_configuration);
 };
+
 /**
  * Configures the library with the given configuration. Note that calling this will stop all
  * previously added listeners from being called again. It is best to call this right when your
@@ -27,23 +30,20 @@ const createState = () => {
  *
  * @param configuration The new configuration to set.
  */
-
-
 export function configure(configuration) {
-  _configuration = { ...DEFAULT_CONFIGURATION,
+  _configuration = {
+    ...DEFAULT_CONFIGURATION,
     ...configuration
   };
-
   if (_state) {
     _state.tearDown();
-
     _state = createState();
   }
-
   if (Platform.OS === 'ios') {
     NativeInterface.configure(configuration);
   }
 }
+
 /**
  * Returns a `Promise` that resolves to a `NetInfoState` object.
  * This function operates on the global singleton instance configured using `configure()`
@@ -52,27 +52,25 @@ export function configure(configuration) {
  *
  * @returns A Promise which contains the current connection state.
  */
-
 export function fetch(requestedInterface) {
   if (!_state) {
     _state = createState();
   }
-
   return _state.latest(requestedInterface);
 }
+
 /**
  * Force-refreshes the internal state of the global singleton managed by this library.
  *
  * @returns A Promise which contains the updated connection state.
  */
-
 export function refresh() {
   if (!_state) {
     _state = createState();
   }
-
   return _state._fetchCurrentState();
 }
+
 /**
  * Subscribe to the global singleton's connection information. The callback is called with a parameter of type
  * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener
@@ -84,18 +82,16 @@ export function refresh() {
  *
  * @returns A function which can be called to unsubscribe.
  */
-
 export function addEventListener(listener) {
   if (!_state) {
     _state = createState();
   }
-
   _state.add(listener);
-
   return () => {
     _state && _state.remove(listener);
   };
 }
+
 /**
  * A React Hook into this library's singleton which updates when the connection state changes.
  *
@@ -103,12 +99,10 @@ export function addEventListener(listener) {
  *
  * @returns The connection state.
  */
-
 export function useNetInfo(configuration) {
   if (configuration) {
     configure(configuration);
   }
-
   const [netInfo, setNetInfo] = useState({
     type: Types.NetInfoStateType.unknown,
     isConnected: null,
@@ -120,6 +114,7 @@ export function useNetInfo(configuration) {
   }, []);
   return netInfo;
 }
+
 /**
  * A React Hook which manages an isolated instance of the network info manager.
  * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,
@@ -129,7 +124,6 @@ export function useNetInfo(configuration) {
  *
  * @returns the netInfo state and a refresh function
  */
-
 export function useNetInfoInstance(isPaused = false, configuration) {
   const [networkInfoManager, setNetworkInfoManager] = useState();
   const [netInfo, setNetInfo] = useState({
@@ -142,8 +136,8 @@ export function useNetInfoInstance(isPaused = false, configuration) {
     if (isPaused) {
       return;
     }
-
-    const config = { ...DEFAULT_CONFIGURATION,
+    const config = {
+      ...DEFAULT_CONFIGURATION,
       ...configuration
     };
     const state = new State(config);
diff --git a/node_modules/@react-native-community/netinfo/lib/module/index.js.map b/node_modules/@react-native-community/netinfo/lib/module/index.js.map
index 937c538..268c26e 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/index.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["index.ts"],"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","configure","configuration","tearDown","OS","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["useState","useEffect","useCallback","Platform","DEFAULT_CONFIGURATION","NativeInterface","State","Types","_configuration","_state","createState","configure","configuration","tearDown","OS","fetch","requestedInterface","latest","refresh","_fetchCurrentState","addEventListener","listener","add","remove","useNetInfo","netInfo","setNetInfo","type","NetInfoStateType","unknown","isConnected","isInternetReachable","details","useNetInfoInstance","isPaused","networkInfoManager","setNetworkInfoManager","config","state"],"sources":["index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect, useCallback} from 'react';\nimport {Platform} from 'react-native';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport NativeInterface from './internal/nativeInterface';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues. The configuration sets up a global singleton instance.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n\n  if (Platform.OS === 'ios') {\n    NativeInterface.configure(configuration);\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n * This function operates on the global singleton instance configured using `configure()`\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Force-refreshes the internal state of the global singleton managed by this library.\n *\n * @returns A Promise which contains the updated connection state.\n */\nexport function refresh(): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state._fetchCurrentState();\n}\n\n/**\n * Subscribe to the global singleton's connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook into this library's singleton which updates when the connection state changes.\n *\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * A React Hook which manages an isolated instance of the network info manager.\n * This is not a hook into a singleton shared state. NetInfo.configure, NetInfo.addEventListener,\n * NetInfo.fetch, NetInfo.refresh are performed on a global singleton and have no affect on this hook.\n * @param {boolean} isPaused - Pause the internal network checks.\n * @param {Partial<Types.NetInfoConfiguration>} configuration - Configure the isolated network checker managed by this hook\n *\n * @returns the netInfo state and a refresh function\n */\nexport function useNetInfoInstance(\n  isPaused = false,\n  configuration?: Partial<Types.NetInfoConfiguration>,\n) {\n  const [networkInfoManager, setNetworkInfoManager] = useState<State>();\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: null,\n    isInternetReachable: null,\n    details: null,\n  });\n\n  useEffect(() => {\n    if (isPaused) {\n      return;\n    }\n    const config = {\n      ...DEFAULT_CONFIGURATION,\n      ...configuration,\n    };\n    const state = new State(config);\n    setNetworkInfoManager(state);\n    state.add(setNetInfo);\n    return state.tearDown;\n  }, [isPaused, configuration]);\n\n  const refresh = useCallback(() => {\n    networkInfoManager && networkInfoManager._fetchCurrentState();\n  }, [networkInfoManager]);\n\n  return {\n    netInfo,\n    refresh,\n  };\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  refresh,\n  addEventListener,\n  useNetInfo,\n  useNetInfoInstance,\n};\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js b/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js
new file mode 100644
index 0000000..54a9e1b
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js
@@ -0,0 +1,5 @@
+/* eslint-disable @typescript-eslint/ban-types */
+
+import { TurboModuleRegistry } from 'react-native';
+export default TurboModuleRegistry.getEnforcing('RNCNetInfo');
+//# sourceMappingURL=NativeRNCNetInfo.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js.map
new file mode 100644
index 0000000..d366286
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/NativeRNCNetInfo.js.map
@@ -0,0 +1 @@
+{"version":3,"names":["TurboModuleRegistry","getEnforcing"],"sources":["NativeRNCNetInfo.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport type { TurboModule } from 'react-native';\nimport { TurboModuleRegistry } from 'react-native';\n\nexport interface Spec extends TurboModule {\n  configure: (config: Object) => void;\n  getCurrentState(requestedInterface?: string): Promise<Object>;\n  // Events\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n}\n\nexport default TurboModuleRegistry.getEnforcing<Spec>('RNCNetInfo');\n\n"],"mappings":"AAAA;;AAEA,SAASA,mBAAmB,QAAQ,cAAc;AAUlD,eAAeA,mBAAmB,CAACC,YAAY,CAAO,YAAY,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.js.map
index 6a190c8..0ec7a12 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.js.map
@@ -1 +1 @@
-{"version":3,"sources":["defaultConfiguration.ts"],"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"mappings":"AAEA,MAAMA,qBAAiD,GAAG;AACxDC,EAAAA,eAAe,EAAE,0CADuC;AAExDC,EAAAA,kBAAkB,EAAE,MAFoC;AAGxDC,EAAAA,mBAAmB,EAAE,EAHmC;AAIxDC,EAAAA,gBAAgB,EAAGC,QAAD,IAChBC,OAAO,CAACC,OAAR,CAAgBF,QAAQ,CAACG,MAAT,KAAoB,GAApC,CALsD;AAMxDC,EAAAA,wBAAwB,EAAE,IAAI,IAN0B;AAMpB;AACpCC,EAAAA,uBAAuB,EAAE,KAAK,IAP0B;AAOpB;AACpCC,EAAAA,0BAA0B,EAAE,KAAK,IARuB;AAQjB;AACvCC,EAAAA,qBAAqB,EAAE,MAAe,IATkB;AAUxDC,EAAAA,mBAAmB,EAAE,KAVmC;AAWxDC,EAAAA,qBAAqB,EAAE;AAXiC,CAA1D;AAcA,eAAed,qBAAf","sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: 'https://clients3.google.com/generate_204',\n  reachabilityMethod: 'HEAD',\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 204),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: false,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION;"]}
\ No newline at end of file
+{"version":3,"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"sources":["defaultConfiguration.ts"],"sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: 'https://clients3.google.com/generate_204',\n  reachabilityMethod: 'HEAD',\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 204),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: false,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION;"],"mappings":"AAEA,MAAMA,qBAAiD,GAAG;EACxDC,eAAe,EAAE,0CAA0C;EAC3DC,kBAAkB,EAAE,MAAM;EAC1BC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,gBAAgB,EAAGC,QAAkB,IACnCC,OAAO,CAACC,OAAO,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,CAAC;EAC1CC,wBAAwB,EAAE,CAAC,GAAG,IAAI;EAAE;EACpCC,uBAAuB,EAAE,EAAE,GAAG,IAAI;EAAE;EACpCC,0BAA0B,EAAE,EAAE,GAAG,IAAI;EAAE;EACvCC,qBAAqB,EAAEA,CAAA,KAAe,IAAI;EAC1CC,mBAAmB,EAAE,KAAK;EAC1BC,qBAAqB,EAAE;AACzB,CAAC;AAED,eAAed,qBAAqB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.web.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.web.js.map
index ba01d7a..011de62 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/defaultConfiguration.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["defaultConfiguration.web.ts"],"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"mappings":"AAEA,MAAMA,qBAAiD,GAAG;AACxDC,EAAAA,eAAe,EAAE,GADuC;AAExDC,EAAAA,kBAAkB,EAAE,MAFoC;AAGxDC,EAAAA,mBAAmB,EAAE,EAHmC;AAIxDC,EAAAA,gBAAgB,EAAGC,QAAD,IAChBC,OAAO,CAACC,OAAR,CAAgBF,QAAQ,CAACG,MAAT,KAAoB,GAApC,CALsD;AAMxDC,EAAAA,wBAAwB,EAAE,IAAI,IAN0B;AAMpB;AACpCC,EAAAA,uBAAuB,EAAE,KAAK,IAP0B;AAOpB;AACpCC,EAAAA,0BAA0B,EAAE,KAAK,IARuB;AAQjB;AACvCC,EAAAA,qBAAqB,EAAE,MAAe,IATkB;AAUxDC,EAAAA,mBAAmB,EAAE,IAVmC;AAWxDC,EAAAA,qBAAqB,EAAE;AAXiC,CAA1D;AAcA,eAAed,qBAAf","sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: '/',\n  reachabilityMethod: \"HEAD\",\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 200),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: true,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION"]}
\ No newline at end of file
+{"version":3,"names":["DEFAULT_CONFIGURATION","reachabilityUrl","reachabilityMethod","reachabilityHeaders","reachabilityTest","response","Promise","resolve","status","reachabilityShortTimeout","reachabilityLongTimeout","reachabilityRequestTimeout","reachabilityShouldRun","shouldFetchWiFiSSID","useNativeReachability"],"sources":["defaultConfiguration.web.ts"],"sourcesContent":["import * as Types from './types';\n\nconst DEFAULT_CONFIGURATION: Types.NetInfoConfiguration = {\n  reachabilityUrl: '/',\n  reachabilityMethod: \"HEAD\",\n  reachabilityHeaders: {},\n  reachabilityTest: (response: Response): Promise<boolean> =>\n    Promise.resolve(response.status === 200),\n  reachabilityShortTimeout: 5 * 1000, // 5s\n  reachabilityLongTimeout: 60 * 1000, // 60s\n  reachabilityRequestTimeout: 15 * 1000, // 15s\n  reachabilityShouldRun: (): boolean => true,\n  shouldFetchWiFiSSID: true,\n  useNativeReachability: true\n};\n\nexport default DEFAULT_CONFIGURATION"],"mappings":"AAEA,MAAMA,qBAAiD,GAAG;EACxDC,eAAe,EAAE,GAAG;EACpBC,kBAAkB,EAAE,MAAM;EAC1BC,mBAAmB,EAAE,CAAC,CAAC;EACvBC,gBAAgB,EAAGC,QAAkB,IACnCC,OAAO,CAACC,OAAO,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,CAAC;EAC1CC,wBAAwB,EAAE,CAAC,GAAG,IAAI;EAAE;EACpCC,uBAAuB,EAAE,EAAE,GAAG,IAAI;EAAE;EACpCC,0BAA0B,EAAE,EAAE,GAAG,IAAI;EAAE;EACvCC,qBAAqB,EAAEA,CAAA,KAAe,IAAI;EAC1CC,mBAAmB,EAAE,IAAI;EACzBC,qBAAqB,EAAE;AACzB,CAAC;AAED,eAAed,qBAAqB"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js b/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js
index 408453a..e373eef 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js
@@ -1,5 +1,6 @@
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
+function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
+function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -8,57 +9,45 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
  *
  * @format
  */
+
 export default class InternetReachability {
   constructor(configuration, listener) {
     _defineProperty(this, "_configuration", void 0);
-
     _defineProperty(this, "_listener", void 0);
-
     _defineProperty(this, "_isInternetReachable", undefined);
-
     _defineProperty(this, "_currentInternetReachabilityCheckHandler", null);
-
     _defineProperty(this, "_currentTimeoutHandle", null);
-
     _defineProperty(this, "_setIsInternetReachable", isInternetReachable => {
       if (this._isInternetReachable === isInternetReachable) {
         return;
       }
-
       this._isInternetReachable = isInternetReachable;
-
       this._listener(this._isInternetReachable);
     });
-
     _defineProperty(this, "_setExpectsConnection", expectsConnection => {
       // Cancel any pending check
       if (this._currentInternetReachabilityCheckHandler !== null) {
         this._currentInternetReachabilityCheckHandler.cancel();
-
         this._currentInternetReachabilityCheckHandler = null;
-      } // Cancel any pending timeout
-
-
+      }
+      // Cancel any pending timeout
       if (this._currentTimeoutHandle !== null) {
         clearTimeout(this._currentTimeoutHandle);
         this._currentTimeoutHandle = null;
       }
-
       if (expectsConnection && this._configuration.reachabilityShouldRun()) {
         // If we expect a connection, start the process for finding if we have one
         // Set the state to "null" if it was previously false
         if (!this._isInternetReachable) {
           this._setIsInternetReachable(null);
-        } // Start a network request to check for internet
-
-
+        }
+        // Start a network request to check for internet
         this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();
       } else {
         // If we don't expect a connection or don't run reachability check, just change the state to "false"
         this._setIsInternetReachable(false);
       }
     });
-
     _defineProperty(this, "_checkInternetReachability", () => {
       const controller = new AbortController();
       const responsePromise = fetch(this._configuration.reachabilityUrl, {
@@ -66,16 +55,17 @@ export default class InternetReachability {
         method: this._configuration.reachabilityMethod,
         cache: 'no-cache',
         signal: controller.signal
-      }); // Create promise that will reject after the request timeout has been reached
+      });
 
+      // Create promise that will reject after the request timeout has been reached
       let timeoutHandle;
-      const timeoutPromise = new Promise(() => {
-        timeoutHandle = setTimeout(() => controller.abort('timedout'), this._configuration.reachabilityRequestTimeout);
-      }); // Create promise that makes it possible to cancel a pending request through a reject
-      // eslint-disable-next-line @typescript-eslint/no-empty-function
+      const timeoutPromise = new Promise((_, reject) => {
+        timeoutHandle = setTimeout(() => reject('timedout'), this._configuration.reachabilityRequestTimeout);
+      });
 
+      // Create promise that makes it possible to cancel a pending request through a reject
+      // eslint-disable-next-line @typescript-eslint/no-empty-function
       let cancel = () => {};
-
       const cancelPromise = new Promise((_, reject) => {
         cancel = () => reject('canceled');
       });
@@ -83,18 +73,25 @@ export default class InternetReachability {
         return this._configuration.reachabilityTest(response);
       }).then(result => {
         this._setIsInternetReachable(result);
-
         const nextTimeoutInterval = this._isInternetReachable ? this._configuration.reachabilityLongTimeout : this._configuration.reachabilityShortTimeout;
         this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, nextTimeoutInterval);
+      }).catch(error => {
+        if (error !== 'canceled') {
+          this._setIsInternetReachable(false);
+          this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, this._configuration.reachabilityShortTimeout);
+        }
       }).catch(error => {
         if ('canceled' === error) {
           controller.abort();
         } else {
+          if ('timedout' === error) {
+            controller.abort();
+          }
           this._setIsInternetReachable(false);
-
           this._currentTimeoutHandle = setTimeout(this._checkInternetReachability, this._configuration.reachabilityShortTimeout);
         }
-      }) // Clear request timeout and propagate any errors
+      })
+      // Clear request timeout and propagate any errors
       .then(() => {
         clearTimeout(timeoutHandle);
       }, error => {
@@ -106,7 +103,6 @@ export default class InternetReachability {
         cancel
       };
     });
-
     _defineProperty(this, "update", state => {
       if (typeof state.isInternetReachable === 'boolean' && this._configuration.useNativeReachability) {
         this._setIsInternetReachable(state.isInternetReachable);
@@ -114,29 +110,24 @@ export default class InternetReachability {
         this._setExpectsConnection(state.isConnected);
       }
     });
-
     _defineProperty(this, "currentState", () => {
       return this._isInternetReachable;
     });
-
     _defineProperty(this, "tearDown", () => {
       // Cancel any pending check
       if (this._currentInternetReachabilityCheckHandler !== null) {
         this._currentInternetReachabilityCheckHandler.cancel();
-
         this._currentInternetReachabilityCheckHandler = null;
-      } // Cancel any pending timeout
-
+      }
 
+      // Cancel any pending timeout
       if (this._currentTimeoutHandle !== null) {
         clearTimeout(this._currentTimeoutHandle);
         this._currentTimeoutHandle = null;
       }
     });
-
     this._configuration = configuration;
     this._listener = listener;
   }
-
 }
 //# sourceMappingURL=internetReachability.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js.map
index a998c5f..544e5cb 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/internetReachability.js.map
@@ -1 +1 @@
-{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","constructor","configuration","listener","undefined","isInternetReachable","_isInternetReachable","_listener","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","_configuration","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","controller","AbortController","responsePromise","fetch","reachabilityUrl","headers","reachabilityHeaders","method","reachabilityMethod","cache","signal","timeoutHandle","timeoutPromise","Promise","setTimeout","abort","reachabilityRequestTimeout","cancelPromise","_","reject","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","state","useNativeReachability","_setExpectsConnection","isConnected"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\nimport * as Types from './types';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const controller = new AbortController();\n\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      headers: this._configuration.reachabilityHeaders,\n      method: this._configuration.reachabilityMethod,\n      cache: 'no-cache',\n      signal: controller.signal,\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>((): void => {\n      timeoutHandle = setTimeout(\n        (): void => controller.abort('timedout'),\n        this._configuration.reachabilityRequestTimeout,\n      );\n    });\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>((_, reject): void => {\n      cancel = (): void => reject('canceled');\n    });\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if ('canceled' === error) {\n            controller.abort();\n          } else {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (\n      typeof state.isInternetReachable === 'boolean' &&\n      this._configuration.useNativeReachability\n    ) {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["InternetReachability","constructor","configuration","listener","_defineProperty","undefined","isInternetReachable","_isInternetReachable","_listener","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","_configuration","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","controller","AbortController","responsePromise","fetch","reachabilityUrl","headers","reachabilityHeaders","method","reachabilityMethod","cache","signal","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","abort","state","useNativeReachability","_setExpectsConnection","isConnected"],"sources":["internetReachability.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as PrivateTypes from './privateTypes';\nimport * as Types from './types';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null =\n    null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler =\n        this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const controller = new AbortController();\n\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      headers: this._configuration.reachabilityHeaders,\n      method: this._configuration.reachabilityMethod,\n      cache: 'no-cache',\n      signal: controller.signal,\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>((_, reject): void => {\n      timeoutHandle = setTimeout(\n        (): void => reject('timedout'),\n        this._configuration.reachabilityRequestTimeout,\n      );\n    });\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>((_, reject): void => {\n      cancel = (): void => reject('canceled');\n    });\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then((response): Promise<boolean> => {\n        return this._configuration.reachabilityTest(response);\n      })\n      .then((result): void => {\n        this._setIsInternetReachable(result);\n        const nextTimeoutInterval = this._isInternetReachable\n          ? this._configuration.reachabilityLongTimeout\n          : this._configuration.reachabilityShortTimeout;\n        this._currentTimeoutHandle = setTimeout(\n          this._checkInternetReachability,\n          nextTimeoutInterval,\n        );\n      })\n      .catch((error: Error | 'timedout' | 'canceled'): void => {\n        if (error !== 'canceled') {\n          this._setIsInternetReachable(false);\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            this._configuration.reachabilityShortTimeout,\n          );\n        }\n      })\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if ('canceled' === error) {\n            controller.abort();\n          } else {\n            if ('timedout' === error) {\n              controller.abort();\n            }\n            \n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (\n      typeof state.isInternetReachable === 'boolean' &&\n      this._configuration.useNativeReachability\n    ) {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js
index f9a0320..5c9c6bf 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js
@@ -6,9 +6,11 @@
  *
  * @format
  */
+
 import { NativeEventEmitter } from 'react-native';
-import RNCNetInfo from './nativeModule'; // Produce an error if we don't have the native module
+import RNCNetInfo from './nativeModule';
 
+// Produce an error if we don't have the native module
 if (!RNCNetInfo) {
   throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:
 
@@ -20,26 +22,26 @@ if (!RNCNetInfo) {
 
 If none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);
 }
+
 /**
  * We export the native interface in this way to give easy shared access to it between the
  * JavaScript code and the tests
  */
-
-
 let nativeEventEmitter = null;
-export default { ...RNCNetInfo,
-
+export default {
+  configure: RNCNetInfo.configure,
+  addListener: RNCNetInfo.addListener,
+  removeListeners: RNCNetInfo.removeListeners,
+  getCurrentState: RNCNetInfo.getCurrentState,
   get eventEmitter() {
     if (!nativeEventEmitter) {
       // eslint-disable-next-line @typescript-eslint/ban-ts-comment
       /// @ts-ignore
       nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);
-    } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
+    }
+    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
     /// @ts-ignore
-
-
     return nativeEventEmitter;
   }
-
 };
 //# sourceMappingURL=nativeInterface.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js.map
index 084d180..be2bae7 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeInterface.ts"],"names":["NativeEventEmitter","RNCNetInfo","Error","nativeEventEmitter","eventEmitter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,kBAAR,QAAiC,cAAjC;AACA,OAAOC,UAAP,MAAuB,gBAAvB,C,CAEA;;AACA,IAAI,CAACA,UAAL,EAAiB;AACf,QAAM,IAAIC,KAAJ,CAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IARQ,CAAN;AASD;AAED;AACA;AACA;AACA;;;AACA,IAAIC,kBAA6C,GAAG,IAApD;AACA,eAAe,EACb,GAAGF,UADU;;AAEb,MAAIG,YAAJ,GAAuC;AACrC,QAAI,CAACD,kBAAL,EAAyB;AACvB;AACA;AACAA,MAAAA,kBAAkB,GAAG,IAAIH,kBAAJ,CAAuBC,UAAvB,CAArB;AACD,KALoC,CAMrC;AACA;;;AACA,WAAOE,kBAAP;AACD;;AAXY,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\n\n// Produce an error if we don't have the native module\nif (!RNCNetInfo) {\n  throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n• Run \\`react-native link @react-native-community/netinfo\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);\n}\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\nexport default {\n  ...RNCNetInfo,\n  get eventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      /// @ts-ignore\n      nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /// @ts-ignore\n    return nativeEventEmitter;\n  },\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["NativeEventEmitter","RNCNetInfo","Error","nativeEventEmitter","configure","addListener","removeListeners","getCurrentState","eventEmitter"],"sources":["nativeInterface.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\n\n// Produce an error if we don't have the native module\nif (!RNCNetInfo) {\n  throw new Error(`@react-native-community/netinfo: NativeModule.RNCNetInfo is null. To fix this issue try these steps:\n\n• Run \\`react-native link @react-native-community/netinfo\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-netinfo`);\n}\n\n/**\n * We export the native interface in this way to give easy shared access to it between the\n * JavaScript code and the tests\n */\nlet nativeEventEmitter: NativeEventEmitter | null = null;\n\nexport default {\n  configure: RNCNetInfo.configure,\n  addListener: RNCNetInfo.addListener,\n  removeListeners: RNCNetInfo.removeListeners,\n  getCurrentState: RNCNetInfo.getCurrentState,\n  get eventEmitter(): NativeEventEmitter {\n    if (!nativeEventEmitter) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      /// @ts-ignore\n      nativeEventEmitter = new NativeEventEmitter(RNCNetInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    /// @ts-ignore\n    return nativeEventEmitter;\n  },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,kBAAkB,QAAO,cAAc;AAC/C,OAAOC,UAAU,MAAM,gBAAgB;;AAEvC;AACA,IAAI,CAACA,UAAU,EAAE;EACf,MAAM,IAAIC,KAAK,CAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8IAA8I,CAAC;AAC/I;;AAEA;AACA;AACA;AACA;AACA,IAAIC,kBAA6C,GAAG,IAAI;AAExD,eAAe;EACbC,SAAS,EAAEH,UAAU,CAACG,SAAS;EAC/BC,WAAW,EAAEJ,UAAU,CAACI,WAAW;EACnCC,eAAe,EAAEL,UAAU,CAACK,eAAe;EAC3CC,eAAe,EAAEN,UAAU,CAACM,eAAe;EAC3C,IAAIC,YAAYA,CAAA,EAAuB;IACrC,IAAI,CAACL,kBAAkB,EAAE;MACvB;MACA;MACAA,kBAAkB,GAAG,IAAIH,kBAAkB,CAACC,UAAU,CAAC;IACzD;IACA;IACA;IACA,OAAOE,kBAAkB;EAC3B;AACF,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js
index 2effbe1..90042df 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js
@@ -6,15 +6,18 @@
  *
  * @format
  */
+
 import { NativeEventEmitter } from 'react-native';
 import RNCNetInfo from './nativeModule';
 import { DEVICE_CONNECTIVITY_EVENT } from './privateTypes';
-const nativeEventEmitter = new NativeEventEmitter(); // Listen to connectivity events
+const nativeEventEmitter = new NativeEventEmitter();
 
+// Listen to connectivity events
 RNCNetInfo.addListener(DEVICE_CONNECTIVITY_EVENT, event => {
   nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);
 });
-export default { ...RNCNetInfo,
+export default {
+  ...RNCNetInfo,
   eventEmitter: nativeEventEmitter
 };
 //# sourceMappingURL=nativeInterface.web.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js.map
index 0a0bf4f..c0c0af8 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeInterface.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeInterface.web.ts"],"names":["NativeEventEmitter","RNCNetInfo","DEVICE_CONNECTIVITY_EVENT","nativeEventEmitter","addListener","event","emit","eventEmitter"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,kBAAR,QAAiC,cAAjC;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAAQC,yBAAR,QAAwC,gBAAxC;AAEA,MAAMC,kBAAkB,GAAG,IAAIH,kBAAJ,EAA3B,C,CAEA;;AACAC,UAAU,CAACG,WAAX,CACEF,yBADF,EAEGG,KAAD,IAAiB;AACfF,EAAAA,kBAAkB,CAACG,IAAnB,CAAwBJ,yBAAxB,EAAmDG,KAAnD;AACD,CAJH;AAOA,eAAe,EACb,GAAGJ,UADU;AAEbM,EAAAA,YAAY,EAAEJ;AAFD,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\nimport {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';\n\nconst nativeEventEmitter = new NativeEventEmitter();\n\n// Listen to connectivity events\nRNCNetInfo.addListener(\n  DEVICE_CONNECTIVITY_EVENT,\n  (event): void => {\n    nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n  },\n);\n\nexport default {\n  ...RNCNetInfo,\n  eventEmitter: nativeEventEmitter,\n};\n"]}
\ No newline at end of file
+{"version":3,"names":["NativeEventEmitter","RNCNetInfo","DEVICE_CONNECTIVITY_EVENT","nativeEventEmitter","addListener","event","emit","eventEmitter"],"sources":["nativeInterface.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventEmitter} from 'react-native';\nimport RNCNetInfo from './nativeModule';\nimport {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';\n\nconst nativeEventEmitter = new NativeEventEmitter();\n\n// Listen to connectivity events\nRNCNetInfo.addListener(DEVICE_CONNECTIVITY_EVENT, (event): void => {\n  nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);\n});\n\nexport default {\n  ...RNCNetInfo,\n  eventEmitter: nativeEventEmitter,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,kBAAkB,QAAO,cAAc;AAC/C,OAAOC,UAAU,MAAM,gBAAgB;AACvC,SAAQC,yBAAyB,QAAO,gBAAgB;AAExD,MAAMC,kBAAkB,GAAG,IAAIH,kBAAkB,CAAC,CAAC;;AAEnD;AACAC,UAAU,CAACG,WAAW,CAACF,yBAAyB,EAAGG,KAAK,IAAW;EACjEF,kBAAkB,CAACG,IAAI,CAACJ,yBAAyB,EAAEG,KAAK,CAAC;AAC3D,CAAC,CAAC;AAEF,eAAe;EACb,GAAGJ,UAAU;EACbM,YAAY,EAAEJ;AAChB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js
index 11b32ce..4d606d8 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js
@@ -6,7 +6,16 @@
  *
  * @format
  */
+
 import { NativeModules } from 'react-native';
-const RNCNetInfo = NativeModules.RNCNetInfo;
+// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.
+// Currently, this is the recommended way to detect TurboModules.
+// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs
+// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+// @ts-ignore
+const isTurboModuleEnabled = global.__turboModuleProxy != null;
+const RNCNetInfo = isTurboModuleEnabled ?
+// eslint-disable-next-line @typescript-eslint/no-var-requires
+require('./NativeRNCNetInfo').default : NativeModules.RNCNetInfo;
 export default RNCNetInfo;
 //# sourceMappingURL=nativeModule.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js.map
index 4599032..7df218b 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeModule.ts"],"names":["NativeModules","RNCNetInfo"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,cAA5B;AAGA,MAAMC,UAA+B,GAAGD,aAAa,CAACC,UAAtD;AAEA,eAAeA,UAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NetInfoNativeModule} from './privateTypes';\n\nconst RNCNetInfo: NetInfoNativeModule = NativeModules.RNCNetInfo;\n\nexport default RNCNetInfo;\n"]}
\ No newline at end of file
+{"version":3,"names":["NativeModules","isTurboModuleEnabled","global","__turboModuleProxy","RNCNetInfo","require","default"],"sources":["nativeModule.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeModules} from 'react-native';\nimport {NetInfoNativeModule} from './privateTypes';\n\n// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.\n// Currently, this is the recommended way to detect TurboModules.\n// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst isTurboModuleEnabled = global.__turboModuleProxy != null;\n\nconst RNCNetInfo: NetInfoNativeModule = isTurboModuleEnabled\n  ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('./NativeRNCNetInfo').default\n  : NativeModules.RNCNetInfo;\n\nexport default RNCNetInfo;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,aAAa,QAAO,cAAc;AAG1C;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,kBAAkB,IAAI,IAAI;AAE9D,MAAMC,UAA+B,GAAGH,oBAAoB;AACxD;AACAI,OAAO,CAAC,oBAAoB,CAAC,CAACC,OAAO,GACrCN,aAAa,CAACI,UAAU;AAE5B,eAAeA,UAAU"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js
index 32f2ca5..5547977 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js
@@ -6,15 +6,26 @@
  *
  * @format
  */
+
 import { DEVICE_CONNECTIVITY_EVENT } from './privateTypes';
-import { NetInfoCellularGeneration, NetInfoStateType } from './types'; // See https://wicg.github.io/netinfo/#dom-connectiontype
+import { NetInfoCellularGeneration, NetInfoStateType } from './types';
+
+// See https://wicg.github.io/netinfo/#dom-connectiontype
+
+// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype
+
+// https://wicg.github.io/netinfo/#dom-networkinformation-savedata
+
+// Create (optional) connection APIs on navigator
 
 // Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,
 // but this test correctly detects that window is not available and allows for conditionals before access
-const isWindowPresent = typeof window !== 'undefined'; // Check if window exists and if the browser supports the connection API
+const isWindowPresent = typeof window !== 'undefined';
 
-const connection = isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS') ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined; // Map browser types to native types
+// Check if window exists and if the browser supports the connection API
+const connection = isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS') ? window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection : undefined;
 
+// Map browser types to native types
 const typeMapping = {
   bluetooth: NetInfoStateType.bluetooth,
   cellular: NetInfoStateType.cellular,
@@ -31,17 +42,20 @@ const effectiveTypeMapping = {
   '3g': NetInfoCellularGeneration['3g'],
   '4g': NetInfoCellularGeneration['4g'],
   'slow-2g': NetInfoCellularGeneration['2g']
-}; // Determine current state of connection
+};
 
+// Determine current state of connection
 const getCurrentState = _requestedInterface => {
   const isConnected = isWindowPresent ? navigator.onLine : false;
   const baseState = {
     isInternetReachable: null
-  }; // If we don't have a connection object, we return minimal information
+  };
 
+  // If we don't have a connection object, we return minimal information
   if (!connection) {
     if (isConnected) {
-      const state = { ...baseState,
+      const state = {
+        ...baseState,
         isConnected: true,
         type: NetInfoStateType.other,
         details: {
@@ -50,22 +64,22 @@ const getCurrentState = _requestedInterface => {
       };
       return state;
     }
-
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: false,
       isInternetReachable: false,
       type: NetInfoStateType.none,
       details: null
     };
     return state;
-  } // Otherwise try to return detailed information
-
+  }
 
+  // Otherwise try to return detailed information
   const isConnectionExpensive = connection.saveData;
   const type = connection.type ? typeMapping[connection.type] : isConnected ? NetInfoStateType.other : NetInfoStateType.unknown;
-
   if (type === NetInfoStateType.bluetooth) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -74,7 +88,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.cellular) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -85,7 +100,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.ethernet) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -96,7 +112,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.wifi) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -114,7 +131,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.wimax) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: true,
       type,
       details: {
@@ -123,7 +141,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.none) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected: false,
       isInternetReachable: false,
       type,
@@ -131,7 +150,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   } else if (type === NetInfoStateType.unknown) {
-    const state = { ...baseState,
+    const state = {
+      ...baseState,
       isConnected,
       isInternetReachable: null,
       type,
@@ -139,8 +159,8 @@ const getCurrentState = _requestedInterface => {
     };
     return state;
   }
-
-  const state = { ...baseState,
+  const state = {
+    ...baseState,
     isConnected: true,
     type: NetInfoStateType.other,
     details: {
@@ -149,7 +169,6 @@ const getCurrentState = _requestedInterface => {
   };
   return state;
 };
-
 const handlers = [];
 const nativeHandlers = [];
 const RNCNetInfo = {
@@ -160,7 +179,6 @@ const RNCNetInfo = {
           const nativeHandler = () => {
             handler(getCurrentState());
           };
-
           if (connection) {
             connection.addEventListener('change', nativeHandler);
           } else {
@@ -168,16 +186,15 @@ const RNCNetInfo = {
               window.addEventListener('online', nativeHandler, false);
               window.addEventListener('offline', nativeHandler, false);
             }
-          } // Remember handlers
-
+          }
 
+          // Remember handlers
           handlers.push(handler);
           nativeHandlers.push(nativeHandler);
           break;
         }
     }
   },
-
   removeListeners(type, handler) {
     switch (type) {
       case DEVICE_CONNECTIVITY_EVENT:
@@ -185,7 +202,6 @@ const RNCNetInfo = {
           // Get native handler
           const index = handlers.indexOf(handler);
           const nativeHandler = nativeHandlers[index];
-
           if (connection) {
             connection.removeEventListener('change', nativeHandler);
           } else {
@@ -193,24 +209,21 @@ const RNCNetInfo = {
               window.removeEventListener('online', nativeHandler);
               window.removeEventListener('offline', nativeHandler);
             }
-          } // Remove handlers
-
+          }
 
+          // Remove handlers
           handlers.splice(index, 1);
           nativeHandlers.splice(index, 1);
           break;
         }
     }
   },
-
   async getCurrentState(requestedInterface) {
     return getCurrentState(requestedInterface);
   },
-
   configure() {
     return;
   }
-
 };
 export default RNCNetInfo;
 //# sourceMappingURL=nativeModule.web.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js.map
index 2b50d96..0bdd63e 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/nativeModule.web.js.map
@@ -1 +1 @@
-{"version":3,"sources":["nativeModule.web.ts"],"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoCellularGeneration","NetInfoStateType","isWindowPresent","window","connection","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,yBADF,QAIO,gBAJP;AAKA,SAEEC,yBAFF,EAQEC,gBARF,QAYO,SAZP,C,CAcA;;AA4CA;AACA;AACA,MAAMC,eAAe,GAAG,OAAOC,MAAP,KAAkB,WAA1C,C,CAEA;;AACA,MAAMC,UAAU,GAAIF,eAAe,IAAI,CAACC,MAAM,CAACE,cAAP,CAAsB,OAAtB,CAApB,IAAsD,CAACF,MAAM,CAACE,cAAP,CAAsB,OAAtB,CAAxD,GACfF,MAAM,CAACG,SAAP,CAAiBF,UAAjB,IACAD,MAAM,CAACG,SAAP,CAAiBC,aADjB,IAEAJ,MAAM,CAACG,SAAP,CAAiBE,gBAHF,GAIfC,SAJJ,C,CAMA;;AACA,MAAMC,WAAqD,GAAG;AAC5DC,EAAAA,SAAS,EAAEV,gBAAgB,CAACU,SADgC;AAE5DC,EAAAA,QAAQ,EAAEX,gBAAgB,CAACW,QAFiC;AAG5DC,EAAAA,QAAQ,EAAEZ,gBAAgB,CAACY,QAHiC;AAI5DC,EAAAA,IAAI,EAAEb,gBAAgB,CAACa,IAJqC;AAK5DC,EAAAA,KAAK,EAAEd,gBAAgB,CAACc,KALoC;AAM5DC,EAAAA,OAAO,EAAEf,gBAAgB,CAACe,OANkC;AAO5DC,EAAAA,IAAI,EAAEhB,gBAAgB,CAACgB,IAPqC;AAQ5DC,EAAAA,KAAK,EAAEjB,gBAAgB,CAACiB,KARoC;AAS5DC,EAAAA,KAAK,EAAElB,gBAAgB,CAACc;AAToC,CAA9D;AAWA,MAAMK,oBAGL,GAAG;AACF,QAAMpB,yBAAyB,CAAC,IAAD,CAD7B;AAEF,QAAMA,yBAAyB,CAAC,IAAD,CAF7B;AAGF,QAAMA,yBAAyB,CAAC,IAAD,CAH7B;AAIF,aAAWA,yBAAyB,CAAC,IAAD;AAJlC,CAHJ,C,CAUA;;AACA,MAAMqB,eAAe,GAEnBC,mBAFsB,IAGqD;AAC3E,QAAMC,WAAW,GAAGrB,eAAe,GAAGI,SAAS,CAACkB,MAAb,GAAsB,KAAzD;AACA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,mBAAmB,EAAE;AADL,GAAlB,CAF2E,CAM3E;;AACA,MAAI,CAACtB,UAAL,EAAiB;AACf,QAAImB,WAAJ,EAAiB;AACf,YAAMI,KAAwB,GAAG,EAC/B,GAAGF,SAD4B;AAE/BF,QAAAA,WAAW,EAAE,IAFkB;AAG/BK,QAAAA,IAAI,EAAE3B,gBAAgB,CAACc,KAHQ;AAI/Bc,QAAAA,OAAO,EAAE;AACPC,UAAAA,qBAAqB,EAAE;AADhB;AAJsB,OAAjC;AAQA,aAAOH,KAAP;AACD;;AAED,UAAMA,KAA+B,GAAG,EACtC,GAAGF,SADmC;AAEtCF,MAAAA,WAAW,EAAE,KAFyB;AAGtCG,MAAAA,mBAAmB,EAAE,KAHiB;AAItCE,MAAAA,IAAI,EAAE3B,gBAAgB,CAACa,IAJe;AAKtCe,MAAAA,OAAO,EAAE;AAL6B,KAAxC;AAOA,WAAOF,KAAP;AACD,GA5B0E,CA8B3E;;;AACA,QAAMG,qBAAqB,GAAG1B,UAAU,CAAC2B,QAAzC;AACA,QAAMH,IAAsB,GAAGxB,UAAU,CAACwB,IAAX,GAC3BlB,WAAW,CAACN,UAAU,CAACwB,IAAZ,CADgB,GAE3BL,WAAW,GACXtB,gBAAgB,CAACc,KADN,GAEXd,gBAAgB,CAACe,OAJrB;;AAMA,MAAIY,IAAI,KAAK3B,gBAAgB,CAACU,SAA9B,EAAyC;AACvC,UAAMgB,KAA4B,GAAG,EACnC,GAAGF,SADgC;AAEnCF,MAAAA,WAAW,EAAE,IAFsB;AAGnCK,MAAAA,IAHmC;AAInCC,MAAAA,OAAO,EAAE;AACPC,QAAAA;AADO;AAJ0B,KAArC;AAQA,WAAOH,KAAP;AACD,GAVD,MAUO,IAAIC,IAAI,KAAK3B,gBAAgB,CAACW,QAA9B,EAAwC;AAC7C,UAAMe,KAA2B,GAAG,EAClC,GAAGF,SAD+B;AAElCF,MAAAA,WAAW,EAAE,IAFqB;AAGlCK,MAAAA,IAHkC;AAIlCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,qBADO;AAEPE,QAAAA,kBAAkB,EAChBZ,oBAAoB,CAAChB,UAAU,CAAC6B,aAAZ,CAApB,IAAkD,IAH7C;AAIPC,QAAAA,OAAO,EAAE;AAJF;AAJyB,KAApC;AAWA,WAAOP,KAAP;AACD,GAbM,MAaA,IAAIC,IAAI,KAAK3B,gBAAgB,CAACY,QAA9B,EAAwC;AAC7C,UAAMc,KAA2B,GAAG,EAClC,GAAGF,SAD+B;AAElCF,MAAAA,WAAW,EAAE,IAFqB;AAGlCK,MAAAA,IAHkC;AAIlCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,qBADO;AAEPK,QAAAA,SAAS,EAAE,IAFJ;AAGPC,QAAAA,MAAM,EAAE;AAHD;AAJyB,KAApC;AAUA,WAAOT,KAAP;AACD,GAZM,MAYA,IAAIC,IAAI,KAAK3B,gBAAgB,CAACgB,IAA9B,EAAoC;AACzC,UAAMU,KAAuB,GAAG,EAC9B,GAAGF,SAD2B;AAE9BF,MAAAA,WAAW,EAAE,IAFiB;AAG9BK,MAAAA,IAH8B;AAI9BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,qBADO;AAEPO,QAAAA,IAAI,EAAE,IAFC;AAGPC,QAAAA,KAAK,EAAE,IAHA;AAIPC,QAAAA,QAAQ,EAAE,IAJH;AAKPJ,QAAAA,SAAS,EAAE,IALJ;AAMPC,QAAAA,MAAM,EAAE,IAND;AAOPI,QAAAA,SAAS,EAAE,IAPJ;AAQPC,QAAAA,SAAS,EAAE,IARJ;AASPC,QAAAA,WAAW,EAAE,IATN;AAUPC,QAAAA,WAAW,EAAE;AAVN;AAJqB,KAAhC;AAiBA,WAAOhB,KAAP;AACD,GAnBM,MAmBA,IAAIC,IAAI,KAAK3B,gBAAgB,CAACiB,KAA9B,EAAqC;AAC1C,UAAMS,KAAwB,GAAG,EAC/B,GAAGF,SAD4B;AAE/BF,MAAAA,WAAW,EAAE,IAFkB;AAG/BK,MAAAA,IAH+B;AAI/BC,MAAAA,OAAO,EAAE;AACPC,QAAAA;AADO;AAJsB,KAAjC;AAQA,WAAOH,KAAP;AACD,GAVM,MAUA,IAAIC,IAAI,KAAK3B,gBAAgB,CAACa,IAA9B,EAAoC;AACzC,UAAMa,KAA+B,GAAG,EACtC,GAAGF,SADmC;AAEtCF,MAAAA,WAAW,EAAE,KAFyB;AAGtCG,MAAAA,mBAAmB,EAAE,KAHiB;AAItCE,MAAAA,IAJsC;AAKtCC,MAAAA,OAAO,EAAE;AAL6B,KAAxC;AAOA,WAAOF,KAAP;AACD,GATM,MASA,IAAIC,IAAI,KAAK3B,gBAAgB,CAACe,OAA9B,EAAuC;AAC5C,UAAMW,KAA0B,GAAG,EACjC,GAAGF,SAD8B;AAEjCF,MAAAA,WAFiC;AAGjCG,MAAAA,mBAAmB,EAAE,IAHY;AAIjCE,MAAAA,IAJiC;AAKjCC,MAAAA,OAAO,EAAE;AALwB,KAAnC;AAOA,WAAOF,KAAP;AACD;;AAED,QAAMA,KAAwB,GAAG,EAC/B,GAAGF,SAD4B;AAE/BF,IAAAA,WAAW,EAAE,IAFkB;AAG/BK,IAAAA,IAAI,EAAE3B,gBAAgB,CAACc,KAHQ;AAI/Bc,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AAJsB,GAAjC;AAQA,SAAOH,KAAP;AACD,CAtID;;AAwIA,MAAMiB,QAAuD,GAAG,EAAhE;AACA,MAAMC,cAA8B,GAAG,EAAvC;AAEA,MAAMC,UAA+B,GAAG;AACtCC,EAAAA,WAAW,CAACnB,IAAD,EAAOoB,OAAP,EAAsB;AAC/B,YAAQpB,IAAR;AACE,WAAK7B,yBAAL;AAAgC;AAC9B,gBAAMkD,aAAa,GAAG,MAAY;AAChCD,YAAAA,OAAO,CAAC3B,eAAe,EAAhB,CAAP;AACD,WAFD;;AAIA,cAAIjB,UAAJ,EAAgB;AACdA,YAAAA,UAAU,CAAC8C,gBAAX,CAA4B,QAA5B,EAAsCD,aAAtC;AACD,WAFD,MAEO;AACL,gBAAI/C,eAAJ,EAAqB;AACnBC,cAAAA,MAAM,CAAC+C,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC,EAAiD,KAAjD;AACA9C,cAAAA,MAAM,CAAC+C,gBAAP,CAAwB,SAAxB,EAAmCD,aAAnC,EAAkD,KAAlD;AACD;AACF,WAZ6B,CAc9B;;;AACAL,UAAAA,QAAQ,CAACO,IAAT,CAAcH,OAAd;AACAH,UAAAA,cAAc,CAACM,IAAf,CAAoBF,aAApB;AAEA;AACD;AApBH;AAsBD,GAxBqC;;AA0BtCG,EAAAA,eAAe,CAACxB,IAAD,EAAOoB,OAAP,EAAsB;AACnC,YAAQpB,IAAR;AACE,WAAK7B,yBAAL;AAAgC;AAC9B;AACA,gBAAMsD,KAAK,GAAGT,QAAQ,CAACU,OAAT,CAAiBN,OAAjB,CAAd;AACA,gBAAMC,aAAa,GAAGJ,cAAc,CAACQ,KAAD,CAApC;;AAEA,cAAIjD,UAAJ,EAAgB;AACdA,YAAAA,UAAU,CAACmD,mBAAX,CAA+B,QAA/B,EAAyCN,aAAzC;AACD,WAFD,MAEO;AACL,gBAAI/C,eAAJ,EAAqB;AACnBC,cAAAA,MAAM,CAACoD,mBAAP,CAA2B,QAA3B,EAAqCN,aAArC;AACA9C,cAAAA,MAAM,CAACoD,mBAAP,CAA2B,SAA3B,EAAsCN,aAAtC;AACD;AACF,WAZ6B,CAc9B;;;AACAL,UAAAA,QAAQ,CAACY,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;AACAR,UAAAA,cAAc,CAACW,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B;AAEA;AACD;AApBH;AAsBD,GAjDqC;;AAmDtC,QAAMhC,eAAN,CAAsBoC,kBAAtB,EAA6E;AAC3E,WAAOpC,eAAe,CAACoC,kBAAD,CAAtB;AACD,GArDqC;;AAuDtCC,EAAAA,SAAS,GAAS;AAChB;AACD;;AAzDqC,CAAxC;AA4DA,eAAeZ,UAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"]}
\ No newline at end of file
+{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoCellularGeneration","NetInfoStateType","isWindowPresent","window","connection","hasOwnProperty","navigator","mozConnection","webkitConnection","undefined","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","ssid","bssid","strength","frequency","linkSpeed","rxLinkSpeed","txLinkSpeed","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface","configure"],"sources":["nativeModule.web.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  DEVICE_CONNECTIVITY_EVENT,\n  NetInfoNativeModule,\n  NetInfoNativeModuleState,\n} from './privateTypes';\nimport {\n  NetInfoBluetoothState,\n  NetInfoCellularGeneration,\n  NetInfoCellularState,\n  NetInfoEthernetState,\n  NetInfoNoConnectionState,\n  NetInfoOtherState,\n  NetInfoState,\n  NetInfoStateType,\n  NetInfoUnknownState,\n  NetInfoWifiState,\n  NetInfoWimaxState,\n} from './types';\n\n// See https://wicg.github.io/netinfo/#dom-connectiontype\ntype ConnectionType =\n  | 'bluetooth'\n  | 'cellular'\n  | 'ethernet'\n  | 'mixed'\n  | 'none'\n  | 'other'\n  | 'unknown'\n  | 'wifi'\n  | 'wimax';\n\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\n\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\ntype ConnectionSaveData = boolean;\n\ninterface Events {\n  change: Event;\n}\n\ninterface Connection {\n  type: ConnectionType;\n  effectiveType: ConnectionEffectiveType;\n  saveData: ConnectionSaveData;\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\n// Create (optional) connection APIs on navigator\ndeclare global {\n  interface Navigator {\n    connection?: Connection;\n    mozConnection?: Connection;\n    webkitConnection?: Connection;\n  }\n}\n// Use a constant test of this form because in SSR on next.js, optional chaining is not sufficient,\n// but this test correctly detects that window is not available and allows for conditionals before access\nconst isWindowPresent = typeof window !== 'undefined';\n\n// Check if window exists and if the browser supports the connection API\nconst connection = (isWindowPresent && !window.hasOwnProperty('tizen') && !window.hasOwnProperty('webOS'))\n  ? window.navigator.connection ||\n    window.navigator.mozConnection ||\n    window.navigator.webkitConnection\n  : undefined;\n\n// Map browser types to native types\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\n  bluetooth: NetInfoStateType.bluetooth,\n  cellular: NetInfoStateType.cellular,\n  ethernet: NetInfoStateType.ethernet,\n  none: NetInfoStateType.none,\n  other: NetInfoStateType.other,\n  unknown: NetInfoStateType.unknown,\n  wifi: NetInfoStateType.wifi,\n  wimax: NetInfoStateType.wimax,\n  mixed: NetInfoStateType.other,\n};\nconst effectiveTypeMapping: Record<\n  ConnectionEffectiveType,\n  NetInfoCellularGeneration\n> = {\n  '2g': NetInfoCellularGeneration['2g'],\n  '3g': NetInfoCellularGeneration['3g'],\n  '4g': NetInfoCellularGeneration['4g'],\n  'slow-2g': NetInfoCellularGeneration['2g'],\n};\n\n// Determine current state of connection\nconst getCurrentState = (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _requestedInterface?: string,\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\n  const isConnected = isWindowPresent ? navigator.onLine : false;\n  const baseState = {\n    isInternetReachable: null,\n  };\n\n  // If we don't have a connection object, we return minimal information\n  if (!connection) {\n    if (isConnected) {\n      const state: NetInfoOtherState = {\n        ...baseState,\n        isConnected: true,\n        type: NetInfoStateType.other,\n        details: {\n          isConnectionExpensive: false,\n        },\n      };\n      return state;\n    }\n\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type: NetInfoStateType.none,\n      details: null,\n    };\n    return state;\n  }\n\n  // Otherwise try to return detailed information\n  const isConnectionExpensive = connection.saveData;\n  const type: NetInfoStateType = connection.type\n    ? typeMapping[connection.type]\n    : isConnected\n    ? NetInfoStateType.other\n    : NetInfoStateType.unknown;\n\n  if (type === NetInfoStateType.bluetooth) {\n    const state: NetInfoBluetoothState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.cellular) {\n    const state: NetInfoCellularState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        cellularGeneration:\n          effectiveTypeMapping[connection.effectiveType] || null,\n        carrier: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.ethernet) {\n    const state: NetInfoEthernetState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ipAddress: null,\n        subnet: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wifi) {\n    const state: NetInfoWifiState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n        ssid: null,\n        bssid: null,\n        strength: null,\n        ipAddress: null,\n        subnet: null,\n        frequency: null,\n        linkSpeed: null,\n        rxLinkSpeed: null,\n        txLinkSpeed: null,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.wimax) {\n    const state: NetInfoWimaxState = {\n      ...baseState,\n      isConnected: true,\n      type,\n      details: {\n        isConnectionExpensive,\n      },\n    };\n    return state;\n  } else if (type === NetInfoStateType.none) {\n    const state: NetInfoNoConnectionState = {\n      ...baseState,\n      isConnected: false,\n      isInternetReachable: false,\n      type,\n      details: null,\n    };\n    return state;\n  } else if (type === NetInfoStateType.unknown) {\n    const state: NetInfoUnknownState = {\n      ...baseState,\n      isConnected,\n      isInternetReachable: null,\n      type,\n      details: null,\n    };\n    return state;\n  }\n\n  const state: NetInfoOtherState = {\n    ...baseState,\n    isConnected: true,\n    type: NetInfoStateType.other,\n    details: {\n      isConnectionExpensive,\n    },\n  };\n  return state;\n};\n\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\nconst nativeHandlers: (() => void)[] = [];\n\nconst RNCNetInfo: NetInfoNativeModule = {\n  addListener(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        const nativeHandler = (): void => {\n          handler(getCurrentState());\n        };\n\n        if (connection) {\n          connection.addEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.addEventListener('online', nativeHandler, false);\n            window.addEventListener('offline', nativeHandler, false);\n          }\n        }\n\n        // Remember handlers\n        handlers.push(handler);\n        nativeHandlers.push(nativeHandler);\n\n        break;\n      }\n    }\n  },\n\n  removeListeners(type, handler): void {\n    switch (type) {\n      case DEVICE_CONNECTIVITY_EVENT: {\n        // Get native handler\n        const index = handlers.indexOf(handler);\n        const nativeHandler = nativeHandlers[index];\n\n        if (connection) {\n          connection.removeEventListener('change', nativeHandler);\n        } else {\n          if (isWindowPresent) {\n            window.removeEventListener('online', nativeHandler);\n            window.removeEventListener('offline', nativeHandler);\n          }\n        }\n\n        // Remove handlers\n        handlers.splice(index, 1);\n        nativeHandlers.splice(index, 1);\n\n        break;\n      }\n    }\n  },\n\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\n    return getCurrentState(requestedInterface);\n  },\n\n  configure(): void {\n    return;\n  },\n};\n\nexport default RNCNetInfo;\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js b/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js
index 4b88052..64831b1 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js
@@ -6,5 +6,8 @@
  *
  * @format
  */
-export const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange'; // Certain properties are optional when sent by the native module and are handled by the JS code
+
+export const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';
+
+// Certain properties are optional when sent by the native module and are handled by the JS code
 //# sourceMappingURL=privateTypes.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js.map
index db99fe3..9ef56cb 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/privateTypes.js.map
@@ -1 +1 @@
-{"version":3,"sources":["privateTypes.ts"],"names":["DEVICE_CONNECTIVITY_EVENT"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,OAAO,MAAMA,yBAAyB,GAAG,gCAAlC,C,CAEP","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NetInfoConfiguration, NetInfoState} from './types';\n\nexport const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\n// Certain properties are optional when sent by the native module and are handled by the JS code\nexport type NetInfoNativeModuleState = Pick<\n  NetInfoState,\n  Exclude<keyof NetInfoState, 'isInternetReachable'>\n> & {isInternetReachable?: boolean};\n\nexport interface Events {\n  [DEVICE_CONNECTIVITY_EVENT]: NetInfoNativeModuleState;\n}\n\nexport interface NetInfoNativeModule {\n  configure: (config: Partial<NetInfoConfiguration>) => void;\n  getCurrentState: (\n    requestedInterface?: string,\n  ) => Promise<NetInfoNativeModuleState>;\n  addListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeListeners<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\nexport type NetInfoInternetReachabilityChangeListener = (\n  isInternetReachable: boolean | null | undefined,\n) => void;\n"]}
\ No newline at end of file
+{"version":3,"names":["DEVICE_CONNECTIVITY_EVENT"],"sources":["privateTypes.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NetInfoConfiguration, NetInfoState} from './types';\n\nexport const DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\n// Certain properties are optional when sent by the native module and are handled by the JS code\nexport type NetInfoNativeModuleState = Pick<\n  NetInfoState,\n  Exclude<keyof NetInfoState, 'isInternetReachable'>\n> & {isInternetReachable?: boolean};\n\nexport interface Events {\n  [DEVICE_CONNECTIVITY_EVENT]: NetInfoNativeModuleState;\n}\n\nexport interface NetInfoNativeModule {\n  configure: (config: Partial<NetInfoConfiguration>) => void;\n  getCurrentState: (\n    requestedInterface?: string,\n  ) => Promise<NetInfoNativeModuleState>;\n  addListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n  removeListeners<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[K]) => void,\n  ): void;\n}\n\nexport type NetInfoInternetReachabilityChangeListener = (\n  isInternetReachable: boolean | null | undefined,\n) => void;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMA,yBAAyB,GAAG,gCAAgC;;AAEzE"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/state.js b/node_modules/@react-native-community/netinfo/lib/module/internal/state.js
index 305d286..7d12f6a 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/state.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/state.js
@@ -1,5 +1,6 @@
-function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
-
+function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
+function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
+function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
  *
@@ -8,72 +9,61 @@ function _defineProperty(obj, key, value) { if (key in obj) { Object.definePrope
  *
  * @format
  */
+
 import NativeInterface from './nativeInterface';
 import InternetReachability from './internetReachability';
 import * as PrivateTypes from './privateTypes';
 export default class State {
   constructor(configuration) {
     _defineProperty(this, "_nativeEventSubscription", null);
-
     _defineProperty(this, "_subscriptions", new Set());
-
     _defineProperty(this, "_latestState", null);
-
     _defineProperty(this, "_internetReachability", void 0);
-
     _defineProperty(this, "_handleNativeStateUpdate", state => {
       // Update the internet reachability module
-      this._internetReachability.update(state); // Convert the state from native to JS shape
-
-
-      const convertedState = this._convertState(state); // Update the listeners
+      this._internetReachability.update(state);
 
+      // Convert the state from native to JS shape
+      const convertedState = this._convertState(state);
 
+      // Update the listeners
       this._latestState = convertedState;
-
       this._subscriptions.forEach(handler => handler(convertedState));
     });
-
     _defineProperty(this, "_handleInternetReachabilityUpdate", isInternetReachable => {
       if (!this._latestState) {
         return;
       }
-
-      const nextState = { ...this._latestState,
+      const nextState = {
+        ...this._latestState,
         isInternetReachable
       };
       this._latestState = nextState;
-
       this._subscriptions.forEach(handler => handler(nextState));
     });
-
     _defineProperty(this, "_fetchCurrentState", async requestedInterface => {
-      const state = await NativeInterface.getCurrentState(requestedInterface); // Update the internet reachability module
-
-      this._internetReachability.update(state); // Convert and store the new state
-
+      const state = await NativeInterface.getCurrentState(requestedInterface);
 
+      // Update the internet reachability module
+      this._internetReachability.update(state);
+      // Convert and store the new state
       const convertedState = this._convertState(state);
-
       if (!requestedInterface) {
         this._latestState = convertedState;
-
         this._subscriptions.forEach(handler => handler(convertedState));
       }
-
       return convertedState;
     });
-
     _defineProperty(this, "_convertState", input => {
       if (typeof input.isInternetReachable === 'boolean') {
         return input;
       } else {
-        return { ...input,
+        return {
+          ...input,
           isInternetReachable: this._internetReachability.currentState()
         };
       }
     });
-
     _defineProperty(this, "latest", requestedInterface => {
       if (requestedInterface) {
         return this._fetchCurrentState(requestedInterface);
@@ -83,42 +73,37 @@ export default class State {
         return this._fetchCurrentState();
       }
     });
-
     _defineProperty(this, "add", handler => {
       // Add the subscription handler to our set
-      this._subscriptions.add(handler); // Send it the latest data we have
-
+      this._subscriptions.add(handler);
 
+      // Send it the latest data we have
       if (this._latestState) {
         handler(this._latestState);
       } else {
         this.latest().then(handler);
       }
     });
-
     _defineProperty(this, "remove", handler => {
       this._subscriptions.delete(handler);
     });
-
     _defineProperty(this, "tearDown", () => {
       if (this._internetReachability) {
         this._internetReachability.tearDown();
       }
-
       if (this._nativeEventSubscription) {
         this._nativeEventSubscription.remove();
       }
-
       this._subscriptions.clear();
     });
-
     // Add the listener to the internet connectivity events
-    this._internetReachability = new InternetReachability(configuration, this._handleInternetReachabilityUpdate); // Add the subscription to the native events
+    this._internetReachability = new InternetReachability(configuration, this._handleInternetReachabilityUpdate);
 
-    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT, this._handleNativeStateUpdate); // Fetch the current state from the native module
+    // Add the subscription to the native events
+    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(PrivateTypes.DEVICE_CONNECTIVITY_EVENT, this._handleNativeStateUpdate);
 
+    // Fetch the current state from the native module
     this._fetchCurrentState();
   }
-
 }
 //# sourceMappingURL=state.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/state.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/state.js.map
index e6e8249..053e584 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/state.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/state.js.map
@@ -1 +1 @@
-{"version":3,"sources":["state.ts"],"names":["NativeInterface","InternetReachability","PrivateTypes","State","constructor","configuration","Set","state","_internetReachability","update","convertedState","_convertState","_latestState","_subscriptions","forEach","handler","isInternetReachable","nextState","requestedInterface","getCurrentState","input","currentState","_fetchCurrentState","Promise","resolve","add","latest","then","delete","tearDown","_nativeEventSubscription","remove","clear","_handleInternetReachabilityUpdate","eventEmitter","addListener","DEVICE_CONNECTIVITY_EVENT","_handleNativeStateUpdate"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["NativeInterface","InternetReachability","PrivateTypes","State","constructor","configuration","_defineProperty","Set","state","_internetReachability","update","convertedState","_convertState","_latestState","_subscriptions","forEach","handler","isInternetReachable","nextState","requestedInterface","getCurrentState","input","currentState","_fetchCurrentState","Promise","resolve","add","latest","then","delete","tearDown","_nativeEventSubscription","remove","clear","_handleInternetReachabilityUpdate","eventEmitter","addListener","DEVICE_CONNECTIVITY_EVENT","_handleNativeStateUpdate"],"sources":["state.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport InternetReachability from './internetReachability';\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\nexport default class State {\n  private _nativeEventSubscription: NativeEventSubscription | null = null;\n  private _subscriptions = new Set<Types.NetInfoChangeHandler>();\n  private _latestState: Types.NetInfoState | null = null;\n  private _internetReachability: InternetReachability;\n\n  constructor(configuration: Types.NetInfoConfiguration) {\n    // Add the listener to the internet connectivity events\n    this._internetReachability = new InternetReachability(\n      configuration,\n      this._handleInternetReachabilityUpdate,\n    );\n\n    // Add the subscription to the native events\n    this._nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      PrivateTypes.DEVICE_CONNECTIVITY_EVENT,\n      this._handleNativeStateUpdate,\n    );\n\n    // Fetch the current state from the native module\n    this._fetchCurrentState();\n  }\n\n  private _handleNativeStateUpdate = (\n    state: PrivateTypes.NetInfoNativeModuleState,\n  ): void => {\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n\n    // Convert the state from native to JS shape\n    const convertedState = this._convertState(state);\n\n    // Update the listeners\n    this._latestState = convertedState;\n    this._subscriptions.forEach((handler): void => handler(convertedState));\n  };\n\n  private _handleInternetReachabilityUpdate = (\n    isInternetReachable: boolean | null | undefined,\n  ): void => {\n    if (!this._latestState) {\n      return;\n    }\n\n    const nextState = {\n      ...this._latestState,\n      isInternetReachable,\n    } as Types.NetInfoState;\n    this._latestState = nextState;\n    this._subscriptions.forEach((handler): void => handler(nextState));\n  };\n\n  public _fetchCurrentState = async (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    const state = await NativeInterface.getCurrentState(requestedInterface);\n\n    // Update the internet reachability module\n    this._internetReachability.update(state);\n    // Convert and store the new state\n    const convertedState = this._convertState(state);\n    if (!requestedInterface) {\n      this._latestState = convertedState;\n      this._subscriptions.forEach((handler): void => handler(convertedState));\n    }\n\n    return convertedState;\n  };\n\n  private _convertState = (\n    input: PrivateTypes.NetInfoNativeModuleState,\n  ): Types.NetInfoState => {\n    if (typeof input.isInternetReachable === 'boolean') {\n      return input as Types.NetInfoState;\n    } else {\n      return {\n        ...input,\n        isInternetReachable: this._internetReachability.currentState(),\n      } as Types.NetInfoState;\n    }\n  };\n\n  public latest = (\n    requestedInterface?: string,\n  ): Promise<Types.NetInfoState> => {\n    if (requestedInterface) {\n      return this._fetchCurrentState(requestedInterface);\n    } else if (this._latestState) {\n      return Promise.resolve(this._latestState);\n    } else {\n      return this._fetchCurrentState();\n    }\n  };\n\n  public add = (handler: Types.NetInfoChangeHandler): void => {\n    // Add the subscription handler to our set\n    this._subscriptions.add(handler);\n\n    // Send it the latest data we have\n    if (this._latestState) {\n      handler(this._latestState);\n    } else {\n      this.latest().then(handler);\n    }\n  };\n\n  public remove = (handler: Types.NetInfoChangeHandler): void => {\n    this._subscriptions.delete(handler);\n  };\n\n  public tearDown = (): void => {\n    if (this._internetReachability) {\n      this._internetReachability.tearDown();\n    }\n\n    if (this._nativeEventSubscription) {\n      this._nativeEventSubscription.remove();\n    }\n\n    this._subscriptions.clear();\n  };\n}\n"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/types.js b/node_modules/@react-native-community/netinfo/lib/module/internal/types.js
index ac35a3d..ebe70e5 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/types.js
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/types.js
@@ -6,9 +6,8 @@
  *
  * @format
  */
-export let NetInfoStateType;
 
-(function (NetInfoStateType) {
+export let NetInfoStateType = /*#__PURE__*/function (NetInfoStateType) {
   NetInfoStateType["unknown"] = "unknown";
   NetInfoStateType["none"] = "none";
   NetInfoStateType["cellular"] = "cellular";
@@ -18,14 +17,13 @@ export let NetInfoStateType;
   NetInfoStateType["wimax"] = "wimax";
   NetInfoStateType["vpn"] = "vpn";
   NetInfoStateType["other"] = "other";
-})(NetInfoStateType || (NetInfoStateType = {}));
-
-export let NetInfoCellularGeneration;
-
-(function (NetInfoCellularGeneration) {
+  return NetInfoStateType;
+}({});
+export let NetInfoCellularGeneration = /*#__PURE__*/function (NetInfoCellularGeneration) {
   NetInfoCellularGeneration["2g"] = "2g";
   NetInfoCellularGeneration["3g"] = "3g";
   NetInfoCellularGeneration["4g"] = "4g";
   NetInfoCellularGeneration["5g"] = "5g";
-})(NetInfoCellularGeneration || (NetInfoCellularGeneration = {}));
+  return NetInfoCellularGeneration;
+}({});
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/module/internal/types.js.map b/node_modules/@react-native-community/netinfo/lib/module/internal/types.js.map
index 340dc4a..afd20ec 100644
--- a/node_modules/@react-native-community/netinfo/lib/module/internal/types.js.map
+++ b/node_modules/@react-native-community/netinfo/lib/module/internal/types.js.map
@@ -1 +1 @@
-{"version":3,"sources":["types.ts"],"names":["NetInfoStateType","NetInfoCellularGeneration"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAcZ,WAAYC,yBAAZ;;WAAYA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,KAAAA,yB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport type NetInfoMethodType = 'HEAD' | 'GET';\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>\n> {\n  type: T;\n  isConnected: true;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: false;\n  isInternetReachable: false;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport type NetInfoNoConnectionState = NetInfoDisconnectedState<\n  NetInfoStateType.none\n>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n    linkSpeed: number | null;\n    rxLinkSpeed: number | null;\n    txLinkSpeed: number | null;\n  }\n>;\nexport type NetInfoBluetoothState = NetInfoConnectedState<\n  NetInfoStateType.bluetooth\n>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityMethod?: NetInfoMethodType;\n  reachabilityHeaders?: Record<string, string>;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n  shouldFetchWiFiSSID: boolean;\n  useNativeReachability: boolean;\n}\n"]}
\ No newline at end of file
+{"version":3,"names":["NetInfoStateType","NetInfoCellularGeneration"],"sources":["types.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nexport enum NetInfoStateType {\n  unknown = 'unknown',\n  none = 'none',\n  cellular = 'cellular',\n  wifi = 'wifi',\n  bluetooth = 'bluetooth',\n  ethernet = 'ethernet',\n  wimax = 'wimax',\n  vpn = 'vpn',\n  other = 'other',\n}\n\nexport type NetInfoMethodType = 'HEAD' | 'GET';\n\nexport enum NetInfoCellularGeneration {\n  '2g' = '2g',\n  '3g' = '3g',\n  '4g' = '4g',\n  '5g' = '5g',\n}\n\nexport interface NetInfoConnectedDetails {\n  isConnectionExpensive: boolean;\n}\n\ninterface NetInfoConnectedState<\n  T extends NetInfoStateType,\n  D extends Record<string, unknown> = Record<string, unknown>,\n> {\n  type: T;\n  isConnected: true;\n  isInternetReachable: boolean | null;\n  details: D & NetInfoConnectedDetails;\n  isWifiEnabled?: boolean;\n}\n\ninterface NetInfoDisconnectedState<T extends NetInfoStateType> {\n  type: T;\n  isConnected: false;\n  isInternetReachable: false;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport interface NetInfoUnknownState {\n  type: NetInfoStateType.unknown;\n  isConnected: boolean | null;\n  isInternetReachable: null;\n  details: null;\n  isWifiEnabled?: boolean;\n}\n\nexport type NetInfoNoConnectionState =\n  NetInfoDisconnectedState<NetInfoStateType.none>;\nexport type NetInfoDisconnectedStates =\n  | NetInfoUnknownState\n  | NetInfoNoConnectionState;\n\nexport type NetInfoCellularState = NetInfoConnectedState<\n  NetInfoStateType.cellular,\n  {\n    cellularGeneration: NetInfoCellularGeneration | null;\n    carrier: string | null;\n  }\n>;\nexport type NetInfoWifiState = NetInfoConnectedState<\n  NetInfoStateType.wifi,\n  {\n    ssid: string | null;\n    bssid: string | null;\n    strength: number | null;\n    ipAddress: string | null;\n    subnet: string | null;\n    frequency: number | null;\n    linkSpeed: number | null;\n    rxLinkSpeed: number | null;\n    txLinkSpeed: number | null;\n  }\n>;\nexport type NetInfoBluetoothState =\n  NetInfoConnectedState<NetInfoStateType.bluetooth>;\nexport type NetInfoEthernetState = NetInfoConnectedState<\n  NetInfoStateType.ethernet,\n  {\n    ipAddress: string | null;\n    subnet: string | null;\n  }\n>;\nexport type NetInfoWimaxState = NetInfoConnectedState<NetInfoStateType.wimax>;\nexport type NetInfoVpnState = NetInfoConnectedState<NetInfoStateType.vpn>;\nexport type NetInfoOtherState = NetInfoConnectedState<NetInfoStateType.other>;\nexport type NetInfoConnectedStates =\n  | NetInfoCellularState\n  | NetInfoWifiState\n  | NetInfoBluetoothState\n  | NetInfoEthernetState\n  | NetInfoWimaxState\n  | NetInfoVpnState\n  | NetInfoOtherState;\n\nexport type NetInfoState = NetInfoDisconnectedStates | NetInfoConnectedStates;\n\nexport type NetInfoChangeHandler = (state: NetInfoState) => void;\nexport type NetInfoSubscription = () => void;\n\nexport interface NetInfoConfiguration {\n  reachabilityUrl: string;\n  reachabilityMethod?: NetInfoMethodType;\n  reachabilityHeaders?: Record<string, string>;\n  reachabilityTest: (response: Response) => Promise<boolean>;\n  reachabilityLongTimeout: number;\n  reachabilityShortTimeout: number;\n  reachabilityRequestTimeout: number;\n  reachabilityShouldRun: () => boolean;\n  shouldFetchWiFiSSID: boolean;\n  useNativeReachability: boolean;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAYA,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAc5B,WAAYC,yBAAyB,0BAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAzBA,yBAAyB;EAAA,OAAzBA,yBAAyB;AAAA"}
\ No newline at end of file
diff --git a/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/NativeRNCNetInfo.d.ts b/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/NativeRNCNetInfo.d.ts
new file mode 100644
index 0000000..b5db384
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/NativeRNCNetInfo.d.ts
@@ -0,0 +1,9 @@
+import type { TurboModule } from 'react-native';
+export interface Spec extends TurboModule {
+    configure: (config: Object) => void;
+    getCurrentState(requestedInterface?: string): Promise<Object>;
+    addListener: (eventName: string) => void;
+    removeListeners: (count: number) => void;
+}
+declare const _default: Spec;
+export default _default;
diff --git a/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/nativeInterface.d.ts b/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/nativeInterface.d.ts
index 6982220..b515270 100644
--- a/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/nativeInterface.d.ts
+++ b/node_modules/@react-native-community/netinfo/lib/typescript/src/internal/nativeInterface.d.ts
@@ -8,10 +8,10 @@
  */
 import { NativeEventEmitter } from 'react-native';
 declare const _default: {
-    eventEmitter: NativeEventEmitter;
     configure: (config: Partial<import("./types").NetInfoConfiguration>) => void;
+    addListener: <K extends "netInfo.networkStatusDidChange">(type: K, listener: (event: import("./privateTypes").Events[K]) => void) => void;
+    removeListeners: <K_1 extends "netInfo.networkStatusDidChange">(type: K_1, listener: (event: import("./privateTypes").Events[K_1]) => void) => void;
     getCurrentState: (requestedInterface?: string | undefined) => Promise<import("./privateTypes").NetInfoNativeModuleState>;
-    addListener<K extends "netInfo.networkStatusDidChange">(type: K, listener: (event: import("./privateTypes").Events[K]) => void): void;
-    removeListeners<K_1 extends "netInfo.networkStatusDidChange">(type: K_1, listener: (event: import("./privateTypes").Events[K_1]) => void): void;
+    readonly eventEmitter: NativeEventEmitter;
 };
 export default _default;
diff --git a/node_modules/@react-native-community/netinfo/package.json b/node_modules/@react-native-community/netinfo/package.json
index 3c80db2..61e6564 100644
--- a/node_modules/@react-native-community/netinfo/package.json
+++ b/node_modules/@react-native-community/netinfo/package.json
@@ -48,6 +48,7 @@
     "network info"
   ],
   "peerDependencies": {
+    "react": "*",
     "react-native": ">=0.59"
   },
   "dependencies": {},
@@ -121,5 +122,13 @@
       "yarn eslint --fix",
       "git add"
     ]
+  },
+  "codegenConfig": {
+    "name": "RNCNetInfoSpec",
+    "type": "modules",
+    "jsSrcsDir": "src/internal",
+    "android": {
+      "javaPackageName": "com.reactnativecommunity.netinfo"
+    }
   }
 }
diff --git a/node_modules/@react-native-community/netinfo/react-native-netinfo.podspec b/node_modules/@react-native-community/netinfo/react-native-netinfo.podspec
index e34e728..9090eb1 100644
--- a/node_modules/@react-native-community/netinfo/react-native-netinfo.podspec
+++ b/node_modules/@react-native-community/netinfo/react-native-netinfo.podspec
@@ -2,6 +2,8 @@ require 'json'
 
 package = JSON.parse(File.read(File.join(__dir__, 'package.json')))
 
+is_new_arch_enabled = ENV['RCT_NEW_ARCH_ENABLED'] == '1'
+
 Pod::Spec.new do |s|
   s.name         = "react-native-netinfo"
   s.version      = package['version']
@@ -13,7 +15,11 @@ Pod::Spec.new do |s|
   s.platforms    = { :ios => "9.0", :tvos => "9.2", :osx => "10.14" }
 
   s.source       = { :git => "https://github.com/react-native-community/react-native-netinfo.git", :tag => "v#{s.version}" }
-  s.source_files  = "ios/**/*.{h,m}"
+  s.source_files  = "ios/**/*.{h,m,mm,swift}"
 
-  s.dependency 'React-Core'
+  if is_new_arch_enabled
+    install_modules_dependencies(s)
+  else
+    s.dependency 'React-Core'
+  end
 end
diff --git a/node_modules/@react-native-community/netinfo/src/__tests__/eventListenerCallbacks.spec.ts b/node_modules/@react-native-community/netinfo/src/__tests__/eventListenerCallbacks.spec.ts
index 4ba58e9..9f87df7 100644
--- a/node_modules/@react-native-community/netinfo/src/__tests__/eventListenerCallbacks.spec.ts
+++ b/node_modules/@react-native-community/netinfo/src/__tests__/eventListenerCallbacks.spec.ts
@@ -32,7 +32,7 @@ beforeAll(() => {
 
 describe('@react-native-community/netinfo listener', () => {
   describe('Event listener callbacks', () => {
-    it('should call the listener on listening', done => {
+    it('should call the listener on listening', (done) => {
       const listener = jest.fn();
       NetInfo.addEventListener(listener);
 
@@ -42,7 +42,7 @@ describe('@react-native-community/netinfo listener', () => {
       }, 0);
     });
 
-    it('should call the listener on listening with multiple listeners', done => {
+    it('should call the listener on listening with multiple listeners', (done) => {
       const listener1 = jest.fn();
       const listener2 = jest.fn();
       NetInfo.addEventListener(listener1);
@@ -303,7 +303,7 @@ describe('@react-native-community/netinfo listener', () => {
           ];
         }
 
-        dataProvider().forEach(testCase => {
+        dataProvider().forEach((testCase) => {
           it(testCase.description, () => {
             NetInfo.configure(testCase.configuration);
 
diff --git a/node_modules/@react-native-community/netinfo/src/__tests__/fetch.spec.ts b/node_modules/@react-native-community/netinfo/src/__tests__/fetch.spec.ts
index 4b56e4f..b790659 100644
--- a/node_modules/@react-native-community/netinfo/src/__tests__/fetch.spec.ts
+++ b/node_modules/@react-native-community/netinfo/src/__tests__/fetch.spec.ts
@@ -69,7 +69,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
@@ -131,7 +131,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
@@ -193,7 +193,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
@@ -255,7 +255,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
@@ -317,7 +317,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
@@ -361,7 +361,7 @@ describe('@react-native-community/netinfo fetch', () => {
       ];
     }
 
-    dataProvider().forEach(testCase => {
+    dataProvider().forEach((testCase) => {
       it(testCase.description, () => {
         mockNativeModule.getCurrentState.mockResolvedValue(
           testCase.expectedConnectionInfo,
@@ -455,7 +455,7 @@ describe('@react-native-community/netinfo fetch', () => {
         ];
       }
 
-      dataProvider().forEach(testCase => {
+      dataProvider().forEach((testCase) => {
         it(testCase.description, async () => {
           mockNativeModule.getCurrentState.mockResolvedValue(
             testCase.expectedConnectionInfo,
diff --git a/node_modules/@react-native-community/netinfo/src/internal/NativeRNCNetInfo.ts b/node_modules/@react-native-community/netinfo/src/internal/NativeRNCNetInfo.ts
new file mode 100644
index 0000000..deada41
--- /dev/null
+++ b/node_modules/@react-native-community/netinfo/src/internal/NativeRNCNetInfo.ts
@@ -0,0 +1,14 @@
+/* eslint-disable @typescript-eslint/ban-types */
+import type { TurboModule } from 'react-native';
+import { TurboModuleRegistry } from 'react-native';
+
+export interface Spec extends TurboModule {
+  configure: (config: Object) => void;
+  getCurrentState(requestedInterface?: string): Promise<Object>;
+  // Events
+  addListener: (eventName: string) => void;
+  removeListeners: (count: number) => void;
+}
+
+export default TurboModuleRegistry.getEnforcing<Spec>('RNCNetInfo');
+
diff --git a/node_modules/@react-native-community/netinfo/src/internal/internetReachability.ts b/node_modules/@react-native-community/netinfo/src/internal/internetReachability.ts
index 5cf797b..f9940a5 100644
--- a/node_modules/@react-native-community/netinfo/src/internal/internetReachability.ts
+++ b/node_modules/@react-native-community/netinfo/src/internal/internetReachability.ts
@@ -19,7 +19,8 @@ export default class InternetReachability {
   private _configuration: Types.NetInfoConfiguration;
   private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;
   private _isInternetReachable: boolean | null | undefined = undefined;
-  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;
+  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null =
+    null;
   private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;
 
   constructor(
@@ -60,7 +61,8 @@ export default class InternetReachability {
         this._setIsInternetReachable(null);
       }
       // Start a network request to check for internet
-      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();
+      this._currentInternetReachabilityCheckHandler =
+        this._checkInternetReachability();
     } else {
       // If we don't expect a connection or don't run reachability check, just change the state to "false"
       this._setIsInternetReachable(false);
@@ -79,9 +81,9 @@ export default class InternetReachability {
 
     // Create promise that will reject after the request timeout has been reached
     let timeoutHandle: ReturnType<typeof setTimeout>;
-    const timeoutPromise = new Promise<Response>((): void => {
+    const timeoutPromise = new Promise<Response>((_, reject): void => {
       timeoutHandle = setTimeout(
-        (): void => controller.abort('timedout'),
+        (): void => reject('timedout'),
         this._configuration.reachabilityRequestTimeout,
       );
     });
@@ -98,28 +100,37 @@ export default class InternetReachability {
       timeoutPromise,
       cancelPromise,
     ])
-      .then(
-        (response): Promise<boolean> => {
-          return this._configuration.reachabilityTest(response);
-        },
-      )
-      .then(
-        (result): void => {
-          this._setIsInternetReachable(result);
-          const nextTimeoutInterval = this._isInternetReachable
-            ? this._configuration.reachabilityLongTimeout
-            : this._configuration.reachabilityShortTimeout;
+      .then((response): Promise<boolean> => {
+        return this._configuration.reachabilityTest(response);
+      })
+      .then((result): void => {
+        this._setIsInternetReachable(result);
+        const nextTimeoutInterval = this._isInternetReachable
+          ? this._configuration.reachabilityLongTimeout
+          : this._configuration.reachabilityShortTimeout;
+        this._currentTimeoutHandle = setTimeout(
+          this._checkInternetReachability,
+          nextTimeoutInterval,
+        );
+      })
+      .catch((error: Error | 'timedout' | 'canceled'): void => {
+        if (error !== 'canceled') {
+          this._setIsInternetReachable(false);
           this._currentTimeoutHandle = setTimeout(
             this._checkInternetReachability,
-            nextTimeoutInterval,
+            this._configuration.reachabilityShortTimeout,
           );
-        },
-      )
+        }
+      })
       .catch(
         (error: Error | 'timedout' | 'canceled'): void => {
           if ('canceled' === error) {
             controller.abort();
           } else {
+            if ('timedout' === error) {
+              controller.abort();
+            }
+            
             this._setIsInternetReachable(false);
             this._currentTimeoutHandle = setTimeout(
               this._checkInternetReachability,
diff --git a/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.ts b/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.ts
index c0d9ec4..912a903 100644
--- a/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.ts
+++ b/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.ts
@@ -28,8 +28,12 @@ If none of these fix the issue, please open an issue on the Github repository: h
  * JavaScript code and the tests
  */
 let nativeEventEmitter: NativeEventEmitter | null = null;
+
 export default {
-  ...RNCNetInfo,
+  configure: RNCNetInfo.configure,
+  addListener: RNCNetInfo.addListener,
+  removeListeners: RNCNetInfo.removeListeners,
+  getCurrentState: RNCNetInfo.getCurrentState,
   get eventEmitter(): NativeEventEmitter {
     if (!nativeEventEmitter) {
       // eslint-disable-next-line @typescript-eslint/ban-ts-comment
diff --git a/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.web.ts b/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.web.ts
index b665235..41863a4 100644
--- a/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.web.ts
+++ b/node_modules/@react-native-community/netinfo/src/internal/nativeInterface.web.ts
@@ -14,12 +14,9 @@ import {DEVICE_CONNECTIVITY_EVENT} from './privateTypes';
 const nativeEventEmitter = new NativeEventEmitter();
 
 // Listen to connectivity events
-RNCNetInfo.addListener(
-  DEVICE_CONNECTIVITY_EVENT,
-  (event): void => {
-    nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);
-  },
-);
+RNCNetInfo.addListener(DEVICE_CONNECTIVITY_EVENT, (event): void => {
+  nativeEventEmitter.emit(DEVICE_CONNECTIVITY_EVENT, event);
+});
 
 export default {
   ...RNCNetInfo,
diff --git a/node_modules/@react-native-community/netinfo/src/internal/nativeModule.ts b/node_modules/@react-native-community/netinfo/src/internal/nativeModule.ts
index 206a69a..7aff149 100644
--- a/node_modules/@react-native-community/netinfo/src/internal/nativeModule.ts
+++ b/node_modules/@react-native-community/netinfo/src/internal/nativeModule.ts
@@ -10,6 +10,16 @@
 import {NativeModules} from 'react-native';
 import {NetInfoNativeModule} from './privateTypes';
 
-const RNCNetInfo: NetInfoNativeModule = NativeModules.RNCNetInfo;
+// React Native sets `__turboModuleProxy` on global when TurboModules are enabled.
+// Currently, this is the recommended way to detect TurboModules.
+// https://reactnative.dev/docs/the-new-architecture/backward-compatibility-turbomodules#unify-the-javascript-specs
+// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+// @ts-ignore
+const isTurboModuleEnabled = global.__turboModuleProxy != null;
+
+const RNCNetInfo: NetInfoNativeModule = isTurboModuleEnabled
+  ? // eslint-disable-next-line @typescript-eslint/no-var-requires
+    require('./NativeRNCNetInfo').default
+  : NativeModules.RNCNetInfo;
 
 export default RNCNetInfo;
diff --git a/node_modules/@react-native-community/netinfo/src/internal/types.ts b/node_modules/@react-native-community/netinfo/src/internal/types.ts
index 427db82..6a8f94a 100644
--- a/node_modules/@react-native-community/netinfo/src/internal/types.ts
+++ b/node_modules/@react-native-community/netinfo/src/internal/types.ts
@@ -34,7 +34,7 @@ export interface NetInfoConnectedDetails {
 
 interface NetInfoConnectedState<
   T extends NetInfoStateType,
-  D extends Record<string, unknown> = Record<string, unknown>
+  D extends Record<string, unknown> = Record<string, unknown>,
 > {
   type: T;
   isConnected: true;
@@ -59,9 +59,8 @@ export interface NetInfoUnknownState {
   isWifiEnabled?: boolean;
 }
 
-export type NetInfoNoConnectionState = NetInfoDisconnectedState<
-  NetInfoStateType.none
->;
+export type NetInfoNoConnectionState =
+  NetInfoDisconnectedState<NetInfoStateType.none>;
 export type NetInfoDisconnectedStates =
   | NetInfoUnknownState
   | NetInfoNoConnectionState;
@@ -87,9 +86,8 @@ export type NetInfoWifiState = NetInfoConnectedState<
     txLinkSpeed: number | null;
   }
 >;
-export type NetInfoBluetoothState = NetInfoConnectedState<
-  NetInfoStateType.bluetooth
->;
+export type NetInfoBluetoothState =
+  NetInfoConnectedState<NetInfoStateType.bluetooth>;
 export type NetInfoEthernetState = NetInfoConnectedState<
   NetInfoStateType.ethernet,
   {
diff --git a/node_modules/@react-native-community/netinfo/windows/.npmignore b/node_modules/@react-native-community/netinfo/windows/.npmignore
deleted file mode 100644
index 878f7ba..0000000
--- a/node_modules/@react-native-community/netinfo/windows/.npmignore
+++ /dev/null
@@ -1,92 +0,0 @@
-*AppPackages*
-*BundleArtifacts*
-
-#OS junk files
-[Tt]humbs.db
-*.DS_Store
-
-#Visual Studio files
-*.[Oo]bj
-*.user
-*.aps
-*.pch
-*.vspscc
-*.vssscc
-*_i.c
-*_p.c
-*.ncb
-*.suo
-*.tlb
-*.tlh
-*.bak
-*.[Cc]ache
-*.ilk
-*.log
-*.lib
-*.sbr
-*.sdf
-*.opensdf
-*.opendb
-*.unsuccessfulbuild
-ipch/
-[Oo]bj/
-[Bb]in
-[Dd]ebug*/
-[Rr]elease*/
-Ankh.NoLoad
-
-# Visual C++ cache files
-ipch/
-*.aps
-*.ncb
-*.opendb
-*.opensdf
-*.sdf
-*.cachefile
-*.VC.db
-*.VC.VC.opendb
-
-#MonoDevelop
-*.pidb
-*.userprefs
-
-#Tooling
-_ReSharper*/
-*.resharper
-[Tt]est[Rr]esult*
-*.sass-cache
-
-#Project files
-[Bb]uild/
-
-#Subversion files
-.svn
-
-# Office Temp Files
-~$*
-
-# vim Temp Files
-*~
-
-#NuGet
-packages/
-*.nupkg
-
-#ncrunch
-*ncrunch*
-*crunch*.local.xml
-
-# visual studio database projects
-*.dbmdl
-
-#Test files
-*.testsettings
-
-#Other files
-*.DotSettings
-.vs/
-*project.lock.json
-
-#Files generated by the VS build
-**/Generated Files/**
-
