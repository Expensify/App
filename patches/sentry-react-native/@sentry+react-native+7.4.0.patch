diff --git a/node_modules/@sentry/react-native/scripts/sentry_utils.rb b/node_modules/@sentry/react-native/scripts/sentry_utils.rb
index 5dc57a3..8887025 100644
--- a/node_modules/@sentry/react-native/scripts/sentry_utils.rb
+++ b/node_modules/@sentry/react-native/scripts/sentry_utils.rb
@@ -1,8 +1,24 @@
 def parse_rn_package_json()
-  rn_path = File.dirname(`node --print "require.resolve('react-native/package.json')"`)
-  env_rn_path = ENV['REACT_NATIVE_NODE_MODULES_DIR']
-  if env_rn_path != nil
-    rn_path = env_rn_path
+  # Try to resolve from installation root first (similar to react-native-svg and react-native-reanimated)
+  rn_path = nil
+  begin
+    rn_path = File.dirname(`cd "#{Pod::Config.instance.installation_root.to_s}" && node --print "require.resolve('react-native/package.json')" 2>/dev/null`.strip)
+  rescue
+    # node resolution failed, will try ENV fallback
+  end
+
+  # Fall back to ENV variable if node resolution didn't work
+  if rn_path.nil? || rn_path.empty?
+    env_rn_path = ENV['REACT_NATIVE_NODE_MODULES_DIR']
+    if env_rn_path != nil
+      # Check if ENV points to node_modules or node_modules/react-native
+      # Support both conventions for compatibility
+      if File.exist?(File.join(env_rn_path, 'package.json'))
+        rn_path = env_rn_path  # Already points to react-native directory
+      elsif File.exist?(File.join(env_rn_path, 'react-native/package.json'))
+        rn_path = File.join(env_rn_path, 'react-native')  # Points to node_modules
+      end
+    end
   end
 
   rn_package_json_path = File.join(rn_path, 'package.json')
