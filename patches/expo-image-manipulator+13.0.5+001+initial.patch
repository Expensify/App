diff --git a/node_modules/expo-image-manipulator/src/web/utils.web.ts b/node_modules/expo-image-manipulator/src/web/utils.web.ts
index dc2465a..04d8af1 100644
--- a/node_modules/expo-image-manipulator/src/web/utils.web.ts
+++ b/node_modules/expo-image-manipulator/src/web/utils.web.ts
@@ -8,6 +8,13 @@ export function getContext(canvas: HTMLCanvasElement): CanvasRenderingContext2D
   return ctx;
 }
 
+const SAFARI_MOBILE_CANVAS_LIMIT = 4096; 
+
+const isMobileIOS = () => {
+    const userAgent = navigator.userAgent;
+    return /iP(ad|od|hone)/i.test(userAgent) && /(WebKit|CriOS|FxiOS|OPiOS|mercury)/i.test(userAgent);
+};
+
 export async function blobToBase64String(blob: Blob): Promise<string> {
   const dataURL = await new Promise<string>((resolve, reject) => {
     const reader = new FileReader();
@@ -19,17 +26,49 @@ export async function blobToBase64String(blob: Blob): Promise<string> {
   return dataURL.replace(/^data:image\/\w+;base64,/, '');
 }
 
+function getAdjustedCanvasSize(originalWidth, originalHeight) {
+    if(!isMobileIOS()) return { width: originalWidth, height: originalHeight };
+
+    const aspectRatio = originalWidth / originalHeight;
+    let newWidth;
+    let newHeight;
+
+    if (originalWidth <= SAFARI_MOBILE_CANVAS_LIMIT && originalHeight <= SAFARI_MOBILE_CANVAS_LIMIT) {
+        return { width: originalWidth, height: originalHeight };
+    }
+
+    if (aspectRatio > 1) {
+        newWidth = SAFARI_MOBILE_CANVAS_LIMIT;
+        newHeight = Math.round(newWidth / aspectRatio);
+    } else {
+        newHeight = SAFARI_MOBILE_CANVAS_LIMIT;
+        newWidth = Math.round(newHeight * aspectRatio);
+    }
+
+    if (newWidth > SAFARI_MOBILE_CANVAS_LIMIT) {
+        newWidth = SAFARI_MOBILE_CANVAS_LIMIT;
+        newHeight = Math.round(newWidth / aspectRatio);
+    } else if (newHeight > SAFARI_MOBILE_CANVAS_LIMIT) {
+        newHeight = SAFARI_MOBILE_CANVAS_LIMIT;
+        newWidth = Math.round(newHeight * aspectRatio);
+    }
+
+    return { width: newWidth, height: newHeight };
+}
+
 export function loadImageAsync(uri: string): Promise<HTMLCanvasElement> {
   return new Promise((resolve, reject) => {
     const imageSource = new Image();
     imageSource.crossOrigin = 'anonymous';
     const canvas = document.createElement('canvas');
     imageSource.onload = () => {
-      canvas.width = imageSource.naturalWidth;
-      canvas.height = imageSource.naturalHeight;
+      const adjudstedCanvasSize = getAdjustedCanvasSize(imageSource.naturalWidth, imageSource.naturalHeight);
+
+      canvas.width = adjudstedCanvasSize.width;
+      canvas.height = adjudstedCanvasSize.height;
 
       const context = getContext(canvas);
-      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);
+      context.drawImage(imageSource, 0, 0, adjudstedCanvasSize.width, adjudstedCanvasSize.height);
 
       resolve(canvas);
     };
