diff --git a/node_modules/@expensify/react-native-live-markdown/android/src/main/java/com/expensify/livemarkdown/CustomMountingManager.java b/node_modules/@expensify/react-native-live-markdown/android/src/main/java/com/expensify/livemarkdown/CustomMountingManager.java
index 1b4381b..7e3aebe 100644
--- a/node_modules/@expensify/react-native-live-markdown/android/src/main/java/com/expensify/livemarkdown/CustomMountingManager.java
+++ b/node_modules/@expensify/react-native-live-markdown/android/src/main/java/com/expensify/livemarkdown/CustomMountingManager.java
@@ -13,7 +13,6 @@ import android.text.TextPaint;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.facebook.common.logging.FLog;
 import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.common.mapbuffer.MapBuffer;
@@ -21,8 +20,8 @@ import com.facebook.react.fabric.mounting.MountingManager;
 import com.facebook.react.uimanager.PixelUtil;
 import com.facebook.react.uimanager.ViewManagerRegistry;
 import com.facebook.react.views.text.TextAttributeProps;
-import com.facebook.react.views.text.TextInlineViewPlaceholderSpan;
-import com.facebook.react.views.text.TextLayoutManagerMapBuffer;
+import com.facebook.react.views.text.internal.span.TextInlineViewPlaceholderSpan;
+import com.facebook.react.views.text.TextLayoutManager;
 import com.facebook.yoga.YogaMeasureMode;
 import com.facebook.yoga.YogaMeasureOutput;
 
@@ -63,7 +62,7 @@ public class CustomMountingManager extends MountingManager {
       @Nullable float[] attachmentsPositions) {
 
     Spannable text =
-      TextLayoutManagerMapBuffer.getOrCreateSpannableForText(context, attributedString, null);
+      TextLayoutManager.getOrCreateSpannableForText(context, attributedString, null);
 
     if (text == null) {
       return 0;
@@ -71,14 +70,14 @@ public class CustomMountingManager extends MountingManager {
 
     int textBreakStrategy =
       TextAttributeProps.getTextBreakStrategy(
-        paragraphAttributes.getString(TextLayoutManagerMapBuffer.PA_KEY_TEXT_BREAK_STRATEGY));
+        paragraphAttributes.getString(TextLayoutManager.PA_KEY_TEXT_BREAK_STRATEGY));
     boolean includeFontPadding =
-      paragraphAttributes.contains(TextLayoutManagerMapBuffer.PA_KEY_INCLUDE_FONT_PADDING)
-        ? paragraphAttributes.getBoolean(TextLayoutManagerMapBuffer.PA_KEY_INCLUDE_FONT_PADDING)
+      paragraphAttributes.contains(TextLayoutManager.PA_KEY_INCLUDE_FONT_PADDING)
+        ? paragraphAttributes.getBoolean(TextLayoutManager.PA_KEY_INCLUDE_FONT_PADDING)
         : DEFAULT_INCLUDE_FONT_PADDING;
     int hyphenationFrequency =
       TextAttributeProps.getHyphenationFrequency(
-        paragraphAttributes.getString(TextLayoutManagerMapBuffer.PA_KEY_HYPHENATION_FREQUENCY));
+        paragraphAttributes.getString(TextLayoutManager.PA_KEY_HYPHENATION_FREQUENCY));
 
     // StaticLayout returns wrong metrics for the last line if it's empty, add something to the
     // last line so it's measured correctly
@@ -89,13 +88,15 @@ public class CustomMountingManager extends MountingManager {
       text = sb;
     }
 
+    Layout.Alignment alignment = TextLayoutManager.getTextAlignment(attributedString, text);
+
     markdownUtils.applyMarkdownFormatting((SpannableStringBuilder)text);
 
     BoringLayout.Metrics boring = BoringLayout.isBoring(text, sTextPaintInstance);
 
-    Class<TextLayoutManagerMapBuffer> mapBufferClass = TextLayoutManagerMapBuffer.class;
+    Class<TextLayoutManager> mapBufferClass = TextLayoutManager.class;
     try {
-      Method createLayoutMethod = mapBufferClass.getDeclaredMethod("createLayout", Spannable.class, BoringLayout.Metrics.class, float.class, YogaMeasureMode.class, boolean.class, int.class, int.class);
+      Method createLayoutMethod = mapBufferClass.getDeclaredMethod("createLayout", Spannable.class, BoringLayout.Metrics.class, float.class, YogaMeasureMode.class, boolean.class, int.class, int.class, Layout.Alignment.class);
       createLayoutMethod.setAccessible(true);
 
       Layout layout = (Layout)createLayoutMethod.invoke(
@@ -106,11 +107,12 @@ public class CustomMountingManager extends MountingManager {
         widthYogaMeasureMode,
         includeFontPadding,
         textBreakStrategy,
-        hyphenationFrequency);
+        hyphenationFrequency,
+        alignment);
 
       int maximumNumberOfLines =
-        paragraphAttributes.contains(TextLayoutManagerMapBuffer.PA_KEY_MAX_NUMBER_OF_LINES)
-          ? paragraphAttributes.getInt(TextLayoutManagerMapBuffer.PA_KEY_MAX_NUMBER_OF_LINES)
+        paragraphAttributes.contains(TextLayoutManager.PA_KEY_MAX_NUMBER_OF_LINES)
+          ? paragraphAttributes.getInt(TextLayoutManager.PA_KEY_MAX_NUMBER_OF_LINES)
           : UNSET;
 
       int calculatedLineCount =
diff --git a/node_modules/@expensify/react-native-live-markdown/android/src/main/new_arch/CMakeLists.txt b/node_modules/@expensify/react-native-live-markdown/android/src/main/new_arch/CMakeLists.txt
index 1609c60..1888eea 100644
--- a/node_modules/@expensify/react-native-live-markdown/android/src/main/new_arch/CMakeLists.txt
+++ b/node_modules/@expensify/react-native-live-markdown/android/src/main/new_arch/CMakeLists.txt
@@ -65,6 +65,12 @@ target_link_libraries(
   yoga
   android
   log
+  mapbufferjni
+  reactnativejni
+  react_render_consistency
+  react_performance_timeline
+  react_render_observers_events
+  react_featureflags
 )
 
 target_compile_options(
