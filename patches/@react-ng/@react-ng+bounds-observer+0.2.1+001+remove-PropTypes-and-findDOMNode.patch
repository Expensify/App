diff --git a/node_modules/@react-ng/bounds-observer/src/index.tsx b/node_modules/@react-ng/bounds-observer/src/index.tsx
index c690fcc..b6841c7 100644
--- a/node_modules/@react-ng/bounds-observer/src/index.tsx
+++ b/node_modules/@react-ng/bounds-observer/src/index.tsx
@@ -1,6 +1,5 @@
 import React, {ReactInstance, RefObject} from "react";
 import {BoundingClientRectObserver} from "@html-ng/bounding-client-rect-observer";
-import PropTypes from "prop-types";
 import ReactDOM from 'react-dom';
 
 interface BoundsObserverProps {
@@ -12,10 +11,6 @@ interface BoundsObserverProps {
 }
 
 export class BoundsObserver extends React.Component<BoundsObserverProps, {}> {
-    static propTypes = {
-        children: PropTypes.element.isRequired,
-    };
-
     private _childRef = React.createRef<ReactInstance>();
 
     private _childNode: Element | null = null;
@@ -27,14 +22,12 @@ export class BoundsObserver extends React.Component<BoundsObserverProps, {}> {
     }
 
     componentDidMount() {
-        const childRef = this._childRef.current;
+        const childNode = this._childRef.current;
 
-        if (!childRef) {
+        if (!childNode) {
             throw new Error("Reference should have been set by the time the component is mounted");
         }
 
-        const childNode = ReactDOM.findDOMNode(childRef);
-
         if (!(childNode instanceof Element)) {
             throw new Error("Child's corresponding DOM node should be an Element");
         }
diff --git a/node_modules/@react-ng/bounds-observer/dist/index.js b/node_modules/@react-ng/bounds-observer/dist/index.js
index b3c9cb3..9ffd885 100644
--- a/node_modules/@react-ng/bounds-observer/dist/index.js
+++ b/node_modules/@react-ng/bounds-observer/dist/index.js
@@ -33,11 +33,10 @@ var BoundsObserver = exports.BoundsObserver = /** @class */ (function (_super) {
         return _this;
     }
     BoundsObserver.prototype.componentDidMount = function () {
-        var childRef = this._childRef.current;
-        if (!childRef) {
+        var childNode = this._childRef.current;
+        if (!childNode) {
             throw new Error("Reference should have been set by the time the component is mounted");
         }
-        var childNode = react_dom_1.default.findDOMNode(childRef);
         if (!(childNode instanceof Element)) {
             throw new Error("Child's corresponding DOM node should be an Element");
         }
@@ -126,9 +125,6 @@ var BoundsObserver = exports.BoundsObserver = /** @class */ (function (_super) {
         var observer = args.observer;
         observer.disconnect();
     };
-    BoundsObserver.propTypes = {
-        children: prop_types_1.default.element.isRequired,
-    };
     return BoundsObserver;
 }(react_1.default.Component));
 //# sourceMappingURL=index.js.map
