///
/// HybridContactsModuleSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridContactsModuleSpec``
public protocol HybridContactsModuleSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getAll(keys: [ContactFields]) throws -> Promise<[Contact]>
}

/// See ``HybridContactsModuleSpec``
public class HybridContactsModuleSpec_base {
  private weak var cxxWrapper: HybridContactsModuleSpec_cxx? = nil
  public func getCxxWrapper() -> HybridContactsModuleSpec_cxx {
  #if DEBUG
    guard self is HybridContactsModuleSpec else {
      fatalError("`self` is not a `HybridContactsModuleSpec`! Did you accidentally inherit from `HybridContactsModuleSpec_base` instead of `HybridContactsModuleSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridContactsModuleSpec_cxx(self as! HybridContactsModuleSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ContactsModule HybridObject.
 * Implement this protocol to create Swift-based instances of ContactsModule.
 * ```swift
 * class HybridContactsModule : HybridContactsModuleSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridContactsModuleSpec = HybridContactsModuleSpec_protocol & HybridContactsModuleSpec_base
