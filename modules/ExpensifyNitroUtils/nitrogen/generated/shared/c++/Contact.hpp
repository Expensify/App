///
/// Contact.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::utils { struct StringHolder; }

#include <optional>
#include <string>
#include <vector>
#include "StringHolder.hpp"

namespace margelo::nitro::utils {

  /**
   * A struct which can be represented as a JavaScript object (Contact).
   */
  struct Contact {
  public:
    std::optional<std::string> firstName     SWIFT_PRIVATE;
    std::optional<std::string> lastName     SWIFT_PRIVATE;
    std::optional<std::vector<StringHolder>> phoneNumbers     SWIFT_PRIVATE;
    std::optional<std::vector<StringHolder>> emailAddresses     SWIFT_PRIVATE;
    std::optional<std::string> imageData     SWIFT_PRIVATE;

  public:
    Contact() = default;
    explicit Contact(std::optional<std::string> firstName, std::optional<std::string> lastName, std::optional<std::vector<StringHolder>> phoneNumbers, std::optional<std::vector<StringHolder>> emailAddresses, std::optional<std::string> imageData): firstName(firstName), lastName(lastName), phoneNumbers(phoneNumbers), emailAddresses(emailAddresses), imageData(imageData) {}
  };

} // namespace margelo::nitro::utils

namespace margelo::nitro {

  using namespace margelo::nitro::utils;

  // C++ Contact <> JS Contact (object)
  template <>
  struct JSIConverter<Contact> final {
    static inline Contact fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Contact(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "firstName")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "lastName")),
        JSIConverter<std::optional<std::vector<StringHolder>>>::fromJSI(runtime, obj.getProperty(runtime, "phoneNumbers")),
        JSIConverter<std::optional<std::vector<StringHolder>>>::fromJSI(runtime, obj.getProperty(runtime, "emailAddresses")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "imageData"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Contact& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "firstName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.firstName));
      obj.setProperty(runtime, "lastName", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.lastName));
      obj.setProperty(runtime, "phoneNumbers", JSIConverter<std::optional<std::vector<StringHolder>>>::toJSI(runtime, arg.phoneNumbers));
      obj.setProperty(runtime, "emailAddresses", JSIConverter<std::optional<std::vector<StringHolder>>>::toJSI(runtime, arg.emailAddresses));
      obj.setProperty(runtime, "imageData", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.imageData));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "firstName"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "lastName"))) return false;
      if (!JSIConverter<std::optional<std::vector<StringHolder>>>::canConvert(runtime, obj.getProperty(runtime, "phoneNumbers"))) return false;
      if (!JSIConverter<std::optional<std::vector<StringHolder>>>::canConvert(runtime, obj.getProperty(runtime, "emailAddresses"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "imageData"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
