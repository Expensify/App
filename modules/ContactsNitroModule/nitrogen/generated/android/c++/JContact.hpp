///
/// JContact.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Contact.hpp"

#include "JStringHolder.hpp"
#include "StringHolder.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::contacts {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Contact" and the the Kotlin data class "Contact".
   */
  struct JContact final: public jni::JavaClass<JContact> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/contacts/Contact;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Contact by copying all values to C++.
     */
    [[maybe_unused]]
    Contact toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldFirstName = clazz->getField<jni::JString>("firstName");
      jni::local_ref<jni::JString> firstName = this->getFieldValue(fieldFirstName);
      static const auto fieldLastName = clazz->getField<jni::JString>("lastName");
      jni::local_ref<jni::JString> lastName = this->getFieldValue(fieldLastName);
      static const auto fieldMiddleName = clazz->getField<jni::JString>("middleName");
      jni::local_ref<jni::JString> middleName = this->getFieldValue(fieldMiddleName);
      static const auto fieldPhoneNumbers = clazz->getField<jni::JArrayClass<JStringHolder>>("phoneNumbers");
      jni::local_ref<jni::JArrayClass<JStringHolder>> phoneNumbers = this->getFieldValue(fieldPhoneNumbers);
      static const auto fieldEmailAddresses = clazz->getField<jni::JArrayClass<JStringHolder>>("emailAddresses");
      jni::local_ref<jni::JArrayClass<JStringHolder>> emailAddresses = this->getFieldValue(fieldEmailAddresses);
      static const auto fieldImageData = clazz->getField<jni::JString>("imageData");
      jni::local_ref<jni::JString> imageData = this->getFieldValue(fieldImageData);
      static const auto fieldThumbnailImageData = clazz->getField<jni::JString>("thumbnailImageData");
      jni::local_ref<jni::JString> thumbnailImageData = this->getFieldValue(fieldThumbnailImageData);
      return Contact(
        firstName != nullptr ? std::make_optional(firstName->toStdString()) : std::nullopt,
        lastName != nullptr ? std::make_optional(lastName->toStdString()) : std::nullopt,
        middleName != nullptr ? std::make_optional(middleName->toStdString()) : std::nullopt,
        phoneNumbers != nullptr ? std::make_optional([&]() {
          size_t __size = phoneNumbers->size();
          std::vector<StringHolder> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = phoneNumbers->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt,
        emailAddresses != nullptr ? std::make_optional([&]() {
          size_t __size = emailAddresses->size();
          std::vector<StringHolder> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = emailAddresses->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt,
        imageData != nullptr ? std::make_optional(imageData->toStdString()) : std::nullopt,
        thumbnailImageData != nullptr ? std::make_optional(thumbnailImageData->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JContact::javaobject> fromCpp(const Contact& value) {
      return newInstance(
        value.firstName.has_value() ? jni::make_jstring(value.firstName.value()) : nullptr,
        value.lastName.has_value() ? jni::make_jstring(value.lastName.value()) : nullptr,
        value.middleName.has_value() ? jni::make_jstring(value.middleName.value()) : nullptr,
        value.phoneNumbers.has_value() ? [&]() {
          size_t __size = value.phoneNumbers.value().size();
          jni::local_ref<jni::JArrayClass<JStringHolder>> __array = jni::JArrayClass<JStringHolder>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.phoneNumbers.value()[__i];
            __array->setElement(__i, *JStringHolder::fromCpp(__element));
          }
          return __array;
        }() : nullptr,
        value.emailAddresses.has_value() ? [&]() {
          size_t __size = value.emailAddresses.value().size();
          jni::local_ref<jni::JArrayClass<JStringHolder>> __array = jni::JArrayClass<JStringHolder>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.emailAddresses.value()[__i];
            __array->setElement(__i, *JStringHolder::fromCpp(__element));
          }
          return __array;
        }() : nullptr,
        value.imageData.has_value() ? jni::make_jstring(value.imageData.value()) : nullptr,
        value.thumbnailImageData.has_value() ? jni::make_jstring(value.thumbnailImageData.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::contacts
