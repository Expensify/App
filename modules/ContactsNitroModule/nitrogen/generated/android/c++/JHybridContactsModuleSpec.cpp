///
/// JHybridContactsModuleSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridContactsModuleSpec.hpp"

// Forward declaration of `Contact` to properly resolve imports.
namespace margelo::nitro::contacts { struct Contact; }
// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::contacts { struct StringHolder; }
// Forward declaration of `ContactFields` to properly resolve imports.
namespace margelo::nitro::contacts { enum class ContactFields; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "Contact.hpp"
#include <NitroModules/JPromise.hpp>
#include "JContact.hpp"
#include <optional>
#include <string>
#include "StringHolder.hpp"
#include "JStringHolder.hpp"
#include "ContactFields.hpp"
#include "JContactFields.hpp"

namespace margelo::nitro::contacts {

  jni::local_ref<JHybridContactsModuleSpec::jhybriddata> JHybridContactsModuleSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridContactsModuleSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridContactsModuleSpec::initHybrid),
    });
  }

  size_t JHybridContactsModuleSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::vector<Contact>>> JHybridContactsModuleSpec::getAll(const std::vector<ContactFields>& keys) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JArrayClass<JContactFields>> /* keys */)>("getAll");
    auto __result = method(_javaPart, [&]() {
      size_t __size = keys.size();
      jni::local_ref<jni::JArrayClass<JContactFields>> __array = jni::JArrayClass<JContactFields>::newArray(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        const auto& __element = keys[__i];
        __array->setElement(__i, *JContactFields::fromCpp(__element));
      }
      return __array;
    }());
    return [&]() {
      auto __promise = Promise<std::vector<Contact>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JContact>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<Contact> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::contacts
