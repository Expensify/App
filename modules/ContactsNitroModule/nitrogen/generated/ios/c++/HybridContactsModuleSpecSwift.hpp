///
/// HybridContactsModuleSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridContactsModuleSpec.hpp"

// Forward declaration of `HybridContactsModuleSpec_cxx` to properly resolve imports.
namespace ContactsModule { class HybridContactsModuleSpec_cxx; }

// Forward declaration of `Contact` to properly resolve imports.
namespace margelo::nitro::contacts { struct Contact; }
// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::contacts { struct StringHolder; }
// Forward declaration of `ContactFields` to properly resolve imports.
namespace margelo::nitro::contacts { enum class ContactFields; }

#include <NitroModules/Promise.hpp>
#include <vector>
#include "Contact.hpp"
#include <optional>
#include <string>
#include "StringHolder.hpp"
#include "ContactFields.hpp"

#include "ContactsModule-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::contacts {

  /**
   * The C++ part of HybridContactsModuleSpec_cxx.swift.
   *
   * HybridContactsModuleSpecSwift (C++) accesses HybridContactsModuleSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridContactsModuleSpec_cxx can directly inherit from the C++ class HybridContactsModuleSpec
   * to simplify the whole structure and memory management.
   */
  class HybridContactsModuleSpecSwift: public virtual HybridContactsModuleSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridContactsModuleSpecSwift(const ContactsModule::HybridContactsModuleSpec_cxx& swiftPart):
      HybridObject(HybridContactsModuleSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline ContactsModule::HybridContactsModuleSpec_cxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::vector<Contact>>> getAll(const std::vector<ContactFields>& keys) override {
      auto __result = _swiftPart.getAll(keys);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    ContactsModule::HybridContactsModuleSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::contacts
