///
/// ContactsModule-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ContactFields` to properly resolve imports.
namespace margelo::nitro::contacts { enum class ContactFields; }
// Forward declaration of `Contact` to properly resolve imports.
namespace margelo::nitro::contacts { struct Contact; }
// Forward declaration of `HybridContactsModuleSpec` to properly resolve imports.
namespace margelo::nitro::contacts { class HybridContactsModuleSpec; }
// Forward declaration of `StringHolder` to properly resolve imports.
namespace margelo::nitro::contacts { struct StringHolder; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridContactsModuleSpecCxx` to properly resolve imports.
namespace ContactsModule { class HybridContactsModuleSpecCxx; }

// Include C++ defined types
#include "Contact.hpp"
#include "ContactFields.hpp"
#include "HybridContactsModuleSpec.hpp"
#include "StringHolder.hpp"
#include <NitroModules/Promise.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::contacts::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::vector<StringHolder>
  /**
   * Specialized version of `std::vector<StringHolder>`.
   */
  using std__vector_StringHolder_ = std::vector<StringHolder>;
  inline std::vector<StringHolder> create_std__vector_StringHolder_(size_t size) {
    std::vector<StringHolder> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<StringHolder>>
  /**
   * Specialized version of `std::optional<std::vector<StringHolder>>`.
   */
  using std__optional_std__vector_StringHolder__ = std::optional<std::vector<StringHolder>>;
  inline std::optional<std::vector<StringHolder>> create_std__optional_std__vector_StringHolder__(const std::vector<StringHolder>& value) {
    return std::optional<std::vector<StringHolder>>(value);
  }
  
  // pragma MARK: std::vector<Contact>
  /**
   * Specialized version of `std::vector<Contact>`.
   */
  using std__vector_Contact_ = std::vector<Contact>;
  inline std::vector<Contact> create_std__vector_Contact_(size_t size) {
    std::vector<Contact> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<Contact>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<Contact>>>`.
   */
  using std__shared_ptr_Promise_std__vector_Contact___ = std::shared_ptr<Promise<std::vector<Contact>>>;
  inline std::shared_ptr<Promise<std::vector<Contact>>> create_std__shared_ptr_Promise_std__vector_Contact___() {
    return Promise<std::vector<Contact>>::create();
  }
  
  // pragma MARK: std::function<void(const std::vector<Contact>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<Contact>&)>`.
   */
  using Func_void_std__vector_Contact_ = std::function<void(const std::vector<Contact>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<Contact>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_Contact__Wrapper final {
  public:
    explicit Func_void_std__vector_Contact__Wrapper(const std::function<void(const std::vector<Contact>& /* result */)>& func): _function(func) {}
    explicit Func_void_std__vector_Contact__Wrapper(std::function<void(const std::vector<Contact>& /* result */)>&& func): _function(std::move(func)) {}
    inline void call(std::vector<Contact> result) const {
      _function(result);
    }
  private:
    std::function<void(const std::vector<Contact>& /* result */)> _function;
  };
  inline Func_void_std__vector_Contact_ create_Func_void_std__vector_Contact_(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::vector<Contact>), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__vector_Contact_([sharedClosureHolder, call](const std::vector<Contact>& result) -> void {
      call(sharedClosureHolder.get(), result);
    });
  }
  inline std::shared_ptr<Func_void_std__vector_Contact__Wrapper> share_Func_void_std__vector_Contact_(const Func_void_std__vector_Contact_& value) {
    return std::make_shared<Func_void_std__vector_Contact__Wrapper>(value);
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(const std::function<void(const std::exception_ptr& /* error */)>& func): _function(func) {}
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::move(func)) {}
    inline void call(std::exception_ptr error) const {
      _function(error);
    }
  private:
    std::function<void(const std::exception_ptr& /* error */)> _function;
  };
  inline Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull closureHolder, void(* _Nonnull call)(void* _Nonnull /* closureHolder */, std::exception_ptr), void(* _Nonnull destroy)(void* _Nonnull)) {
    std::shared_ptr<void> sharedClosureHolder(closureHolder, destroy);
    return Func_void_std__exception_ptr([sharedClosureHolder, call](const std::exception_ptr& error) -> void {
      call(sharedClosureHolder.get(), error);
    });
  }
  inline std::shared_ptr<Func_void_std__exception_ptr_Wrapper> share_Func_void_std__exception_ptr(const Func_void_std__exception_ptr& value) {
    return std::make_shared<Func_void_std__exception_ptr_Wrapper>(value);
  }
  
  // pragma MARK: std::vector<ContactFields>
  /**
   * Specialized version of `std::vector<ContactFields>`.
   */
  using std__vector_ContactFields_ = std::vector<ContactFields>;
  inline std::vector<ContactFields> create_std__vector_ContactFields_(size_t size) {
    std::vector<ContactFields> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::contacts::HybridContactsModuleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::contacts::HybridContactsModuleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__contacts__HybridContactsModuleSpec_ = std::shared_ptr<margelo::nitro::contacts::HybridContactsModuleSpec>;
  std::shared_ptr<margelo::nitro::contacts::HybridContactsModuleSpec> create_std__shared_ptr_margelo__nitro__contacts__HybridContactsModuleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__contacts__HybridContactsModuleSpec_(std__shared_ptr_margelo__nitro__contacts__HybridContactsModuleSpec_ cppType);

} // namespace margelo::nitro::contacts::bridge::swift
