name: Cherry-pick a pull request

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: The number of a pull request to CP
        required: true
      NEW_VERSION:
        description: The new app version
        required: false
        default: ''

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      IS_DEPLOYER: ${{ fromJSON(steps.isUserDeployer.outputs.isTeamMember) || github.actor == 'OSBotify' }}
    steps:
      - id: isUserDeployer
        uses: tspascoal/get-user-teams-membership@baf2e6adf4c3b897bd65a7e3184305c165aec872
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          username: ${{ github.actor }}
          team: mobile-deployers

  createNewVersion:
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.IS_DEPLOYER) && github.event.inputs.NEW_VERSION == '' }}
    uses: Expensify/App/.github/workflows/createNewVersion.yml@main
    secrets: inherit

  cherryPick:
    needs: [validateActor, createNewVersion]
    if: ${{ always() && fromJSON(needs.validateActor.outputs.IS_DEPLOYER) }}
    runs-on: ubuntu-latest
    steps:
      # Version: 2.3.4
      - name: Checkout staging branch
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          ref: staging
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - uses: Expensify/App/.github/actions/composite/setupGitForOSBotify@main
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Create branch for new pull request
        run: |
          git checkout -b ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}
          git push --set-upstream origin ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Get merge commit for CP pull request
        id: getCPMergeCommit
        uses: Expensify/App/.github/actions/javascript/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          PULL_REQUEST_NUMBER: ${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Save correct NEW_VERSION to env
        env:
          NEW_VERSION: ${{ github.event.inputs.NEW_VERSION }}
        run: |
          if [ -z "$NEW_VERSION" ]; then
            echo "NEW_VERSION=${{ needs.createNewVersion.outputs.NEW_VERSION }}" >> "$GITHUB_ENV"
            echo "New version is ${{ env.NEW_VERSION }}"
          else
            echo "NEW_VERSION=${{ github.event.inputs.NEW_VERSION }}" >> "$GITHUB_ENV"
            echo "New version is ${{ env.NEW_VERSION }}"
          fi;

      - name: Get merge commit for version-bump pull request
        id: getVersionBumpMergeCommit
        uses: Expensify/App/.github/actions/javascript/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: OSBotify
          TITLE_REGEX: Update version to ${{ env.NEW_VERSION }}

      - name: Cherry-pick the version-bump to new branch
        run: |
          git fetch
          git cherry-pick -S -x --mainline 1 --strategy=recursive -Xtheirs ${{ steps.getVersionBumpMergeCommit.outputs.MERGE_COMMIT_SHA }}

      - name: Cherry-pick the merge commit of target PR to new branch
        id: cherryPick
        run: |
          echo "Attempting to cherry-pick ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}"
          if git cherry-pick -S -x --mainline 1 ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}; then
            echo "🎉 No conflicts! CP was a success, PR can be automerged 🎉"
            echo "SHOULD_AUTOMERGE=true" >> "$GITHUB_OUTPUT"
          else
            echo "😞 PR can't be automerged, there are merge conflicts in the following files:"
            git --no-pager diff --name-only --diff-filter=U
            git add .
            GIT_MERGE_AUTOEDIT=no git cherry-pick --continue
            echo "SHOULD_AUTOMERGE=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes to CP branch
        run: git push

      - name: Create Pull Request
        id: createPullRequest
        run: |
          gh pr create \
            --title "🍒 Cherry pick PR #${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 🍒" \
            --body "🍒 Cherry pick https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 🍒" \
            --label "automerge" \
            --base "staging"
          sleep 5
          echo "PR_NUMBER=$(gh pr view --json 'number' --jq '.number')" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Check if ShortVersionString is up to date
        id: isShortVersionStringUpdated
        uses: Expensify/App/.github/actions/javascript/checkBundleVersionStringMatch@main

      - name: Auto-assign PR if there are merge conflicts or if the bundle versions are mismatched
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) || !fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}
        run: gh pr edit --add-label "Engineering,Hourly"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Assign the PR to the deployer
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) }}
        run: gh pr edit --add-assignee ${{ steps.getCPMergeCommit.outputs.MERGE_ACTOR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: If PR has merge conflicts, comment with instructions for assignee
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) }}
        run: |
          gh pr comment --body \
          "This pull request has merge conflicts and can not be automatically merged. :disappointed:
           Please manually resolve the conflicts, push your changes, and then request another reviewer to review and merge.
           **Important:** There may be conflicts that GitHub is not able to detect, so please _carefully_ review this pull request before approving."
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: If PR has a bundle version mismatch, comment with the instructions for assignee
        if: ${{ !fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}
        run: |
          gh pr comment --body \
          "The CFBundleShortVersionString value in this PR is not compatible with the CFBundleVersion, so cherry picking it will result in an iOS deploy failure.
           Please manually resolve the mismatch, push your changes, and then request another reviewer to review and merge.
           **Important:** This mismatch can be caused by a failed Update Protected Branch workflow followed by a manual CP, but please confirm the cause of the mismatch before updating any version numbers."
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Auto-approve the PR
        # Important: only auto-approve if there was no merge conflict!
        if: ${{ fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) }}
        run: gh pr review --approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if pull request is mergeable
        id: isPullRequestMergeable
        uses: Expensify/App/.github/actions/javascript/isPullRequestMergeable@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ steps.createPullRequest.outputs.pr_number }}

      - name: Auto-merge the PR
        # Important: only auto-merge if there was no merge conflict and the PR is mergable (not blocked by a missing status check)!
        if: ${{ fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) && fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        run: gh pr merge ${{ steps.createPullRequest.outputs.pr_number }} --merge --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: 'Announces a CP failure in the #announce Slack room'
        uses: 8398a7/action-slack@v3
        if: ${{ failure() || !fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        with:
          status: custom
          custom_payload: |
            {
              channel: '#announce',
              attachments: [{
                color: "#DB4545",
                pretext: `<!subteam^S4TJJ3PSL>`,
                text: `💥 Failed to CP https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 💥`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
