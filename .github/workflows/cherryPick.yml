name: Cherry-pick a pull request

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: The number of a pull request to CP
        required: true

jobs:
  createNewVersion:
    uses: ./.github/workflows/createNewVersion.yml
    secrets: inherit

  cherryPick:
    needs: createNewVersion
    runs-on: ubuntu-latest
    env:
      # The name of the branch created if there are conflicts when CPing the PR.
      CONFLICT_BRANCH_NAME: cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}-${{ github.run_id }}-${{ github.run_attempt }}
    steps:
      - name: Checkout staging branch
        # v4
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          ref: staging
          token: ${{ secrets.OS_BOTIFY_TOKEN }}
          submodules: true

      # This command is necessary to fetch any branch other than main in the submodule.
      # See https://github.com/actions/checkout/issues/1815#issuecomment-2777836442 for further context.
      - name: Enable branch-switching in submodules
        run: |
          git submodule foreach '\
            git config --add remote.origin.fetch "+refs/heads/staging:refs/remotes/origin/staging" && \
            git config --add remote.origin.fetch "+refs/heads/production:refs/remotes/origin/production" && \
            git config --add remote.origin.fetch "+refs/tags/*:refs/tags/*"'

      - name: Set up git for OSBotify
        id: setupGitForOSBotify
        uses: Expensify/GitHub-Actions/setupGitForOSBotify@main
        with:
          OP_VAULT: ${{ vars.OP_VAULT }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OS_BOTIFY_APP_ID: ${{ secrets.OS_BOTIFY_APP_ID }}
          OS_BOTIFY_PRIVATE_KEY: ${{ secrets.OS_BOTIFY_PRIVATE_KEY }}

      - name: Get previous app version
        id: getPreviousVersion
        uses: ./.github/actions/javascript/getPreviousVersion
        with:
          SEMVER_LEVEL: "PATCH"

      - name: Fetch history of relevant refs
        run: |
          git fetch origin main staging --no-tags --shallow-exclude ${{ steps.getPreviousVersion.outputs.PREVIOUS_VERSION }}
          cd Mobile-Expensify
          git fetch origin main staging --no-tags --shallow-exclude ${{ steps.getPreviousVersion.outputs.PREVIOUS_VERSION }}

      - name: Get E/App version bump commit
        id: getVersionBumpCommit
        run: |
          git switch main
          VERSION_BUMP_COMMIT="$(git log -1 --format='%H' --author='OSBotify' --grep 'Update version to ${{ needs.createNewVersion.outputs.NEW_VERSION }}')"
          if [ -z "$VERSION_BUMP_COMMIT" ]; then
            echo "::error::❌ Could not find E/App version bump commit for ${{ needs.createNewVersion.outputs.NEW_VERSION }}"
            git log --oneline
          else
            echo "::notice::👀 Found E/App version bump commit $VERSION_BUMP_COMMIT"
          fi
          echo "VERSION_BUMP_SHA=$VERSION_BUMP_COMMIT" >> "$GITHUB_OUTPUT"

      - name: Get Mobile-Expensify version bump commit
        id: getMobileExpensifyVersionBumpCommit
        working-directory: Mobile-Expensify
        run: |
          git switch main
          VERSION_BUMP_COMMIT="$(git log -1 --format='%H' --author='OSBotify' --grep 'Update version to ${{ needs.createNewVersion.outputs.NEW_VERSION }}')"
          if [ -z "$VERSION_BUMP_COMMIT" ]; then
            echo "::error::❌ Could not find Mobile-Expensify version bump commit for ${{ needs.createNewVersion.outputs.NEW_VERSION }}"
            git log --oneline
          else
            echo "::notice::👀 Found Mobile-Expensify version bump commit $VERSION_BUMP_COMMIT"
          fi
          echo "VERSION_BUMP_SHA=$VERSION_BUMP_COMMIT" >> "$GITHUB_OUTPUT"

      - name: Get merge commit for E/App pull request to CP
        id: getCPMergeCommit
        uses: ./.github/actions/javascript/getPullRequestDetails
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          PULL_REQUEST_NUMBER: ${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Cherry-pick the Mobile-Expensify version bump to Mobile-Expensify staging
        working-directory: Mobile-Expensify
        run: |
          git switch staging
          git cherry-pick -S -x --mainline 1 --strategy=recursive -Xtheirs ${{ steps.getMobileExpensifyVersionBumpCommit.outputs.VERSION_BUMP_SHA }}
          git push origin staging

      - name: Cherry-pick the E/App version-bump to staging
        run: |
          git switch staging
          git cherry-pick -S -x --mainline 1 --strategy=recursive -Xtheirs ${{ steps.getVersionBumpCommit.outputs.VERSION_BUMP_SHA }}

      - name: Update the Mobile-Expensify submodule on E/App staging
        run: |
          git add Mobile-Expensify
          git commit -m "Update Mobile-Expensify submodule version to ${{ needs.createNewVersion.outputs.NEW_VERSION }}"

      - name: Cherry-pick the merge commit of target PR
        id: cherryPick
        run: |
          echo "Attempting to cherry-pick ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}"
          if git cherry-pick -S -x --mainline 1 ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}; then
            echo "🎉 No conflicts! CP was a success, PR can be automerged 🎉"
            echo "HAS_CONFLICTS=false" >> "$GITHUB_OUTPUT"
            git commit --amend -m "$(git log -1 --pretty=%B)" -m "(CP triggered by ${{ github.actor }})"
          else
            echo "😞 PR can't be automerged, there are merge conflicts in the following files:"
            git --no-pager diff --name-only --diff-filter=U
            git cherry-pick --abort
            echo "HAS_CONFLICTS=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes
        run: |
          if [[ ${{steps.cherryPick.outputs.HAS_CONFLICTS}} == 'true' ]]; then
            git checkout -b ${{ env.CONFLICT_BRANCH_NAME }}
            git push --set-upstream origin ${{ env.CONFLICT_BRANCH_NAME }}
          else
            git push origin staging
          fi

      - name: Create Pull Request to manually finish CP
        if: fromJSON(steps.cherryPick.outputs.HAS_CONFLICTS)
        id: createPullRequest
        run: |
          AUTHOR_CHECKLIST=$(sed -n '/### PR Author Checklist/,$p' .github/PULL_REQUEST_TEMPLATE.md)

          PR_DESCRIPTION=$(cat <<EOF
          🍒 Cherry pick https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 🍒

          This PR had conflicts when we tried to cherry-pick it to staging. You'll need to manually perform the cherry-pick, using the following steps:

          \`\`\`bash
          git fetch
          git checkout ${{ env.CONFLICT_BRANCH_NAME }}
          git cherry-pick -S -x --mainline 1 ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}
          \`\`\`

          Then manually resolve conflicts, and commit the change with \`git cherry-pick --continue\`. Lastly, please run:

          \`\`\`bash
          git commit --amend -m "\$(git log -1 --pretty=%B)" -m "(CP triggered by ${{ github.actor }})"
          \`\`\`

          That will help us keep track of who triggered this CP. Once all that's done, push your changes with \`git push origin ${{ env.CONFLICT_BRANCH_NAME }}\`, and then open this PR for review.

          Note that you **must** test this PR, and both the author and reviewer checklist should be completed, just as if you were merging the PR to main.

          _Pro-tip:_ If this PR appears to have conflicts against the _staging_ base, it means that the version on staging has been updated. The easiest thing to do if you see this is to close the PR and re-run the CP.

          $AUTHOR_CHECKLIST
          EOF
          )

          # Create PR
          gh pr create \
            --title "🍒 Cherry pick PR #${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 🍒" \
            --body "$PR_DESCRIPTION" \
            --label "Engineering,Hourly" \
            --base "staging"
          sleep 5
        env:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}

      - name: Add assignees to conflict PRs
        if: fromJSON(steps.cherryPick.outputs.HAS_CONFLICTS)
        run: |
          gh pr edit --add-assignee "${{ github.actor }},${{ steps.getCPMergeCommit.outputs.MERGE_ACTOR }}"
          ORIGINAL_PR_AUTHOR="$(gh pr view ${{ github.event.inputs.PULL_REQUEST_NUMBER }} --json author --jq .author.login)"
          gh pr edit --add-assignee "$ORIGINAL_PR_AUTHOR"
        env:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}
        # In cases when the original PR author is outside the org, the `gh pr edit` command will fail. But we don't want to fail the workflow in that case.
        continue-on-error: true

      - name: Label original PR with CP Staging
        run: gh pr edit ${{ inputs.PULL_REQUEST_NUMBER }} --add-label 'CP Staging'
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Announces a CP failure in the #announce Slack room"
        # v3
        uses: 8398a7/action-slack@1750b5085f3ec60384090fb7c52965ef822e869e
        if: ${{ failure() }}
        with:
          status: custom
          custom_payload: |
            {
              channel: '#announce',
              attachments: [{
                color: "#DB4545",
                pretext: `<!subteam^S4TJJ3PSL>`,
                text: `💥 Failed to CP https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging 💥`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
