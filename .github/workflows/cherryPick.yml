name: Cherry-pick a pull request

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: The number of a pull request to CP
        required: true
      NEW_VERSION:
        description: The new app version
        required: false
        default: ''

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      IS_DEPLOYER: ${{ fromJSON(steps.isUserDeployer.outputs.isTeamMember) || github.actor == 'OSBotify' }}
    steps:
      - id: isUserDeployer
        uses: tspascoal/get-user-teams-membership@baf2e6adf4c3b897bd65a7e3184305c165aec872
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          username: ${{ github.actor }}
          team: mobile-deployers

  createNewVersion:
    needs: validateActor
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.validateActor.outputs.IS_DEPLOYER) && github.event.inputs.NEW_VERSION == '' }}
    outputs:
      NEW_VERSION: ${{ steps.getNewVersion.outputs.NEW_VERSION }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: main
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - uses: softprops/turnstyle@8db075d65b19bf94e6e8687b504db69938dc3c65
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new BUILD version
        uses: Expensify/App/.github/actions/triggerWorkflowAndWait@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          WORKFLOW: createNewVersion.yml
          INPUTS: '{ "SEMVER_LEVEL": "BUILD" }'

      - name: Pull main to get the new version
        id: getNewVersion
        run: |
          git pull origin main
          echo "New version is $(npm run print-version --silent)"
          echo "::set-output name=NEW_VERSION::$(npm run print-version --silent)"

  cherryPick:
    needs: [validateActor, createNewVersion]
    if: ${{ always() && fromJSON(needs.validateActor.outputs.IS_DEPLOYER) }}
    runs-on: ubuntu-latest
    steps:
      # Version: 2.3.4
      - name: Checkout staging branch
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: staging
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Decrypt Botify GPG key
        run: cd .github/workflows && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output OSBotify-private-key.asc OSBotify-private-key.asc.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Import Botify GPG Key
        run: cd .github/workflows && gpg --import OSBotify-private-key.asc

      - name: Set up git for Botify
        run: |
          git config user.signingkey 367811D53E34168C
          git config commit.gpgsign true
          git config user.name OSBotify
          git config user.email infra+osbotify@expensify.com

      - name: Create branch for new pull request
        run: |
          git checkout -b ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}
          git push --set-upstream origin ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Get merge commit for CP pull request
        id: getCPMergeCommit
        uses: Expensify/App/.github/actions/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          PULL_REQUEST_NUMBER: ${{ github.event.inputs.PULL_REQUEST_NUMBER }}

      - name: Save correct NEW_VERSION to env
        run: |
          if [ -z ${{ github.event.inputs.NEW_VERSION }} ]; then
            echo "NEW_VERSION=${{ needs.createNewVersion.outputs.NEW_VERSION }}" >> $GITHUB_ENV
            echo "New version is ${{ env.NEW_VERSION }}"
          else
            echo "NEW_VERSION=${{ github.event.inputs.NEW_VERSION }}" >> $GITHUB_ENV
            echo "New version is ${{ env.NEW_VERSION }}"
          fi;

      - name: Get merge commit for version-bump pull request
        id: getVersionBumpMergeCommit
        uses: Expensify/App/.github/actions/getPullRequestDetails@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: OSBotify
          TITLE_REGEX: Update version to ${{ env.NEW_VERSION }}

      - name: Cherry-pick the version-bump to new branch
        run: |
          git fetch
          git cherry-pick -S -x --mainline 1 --strategy=recursive -Xtheirs ${{ steps.getVersionBumpMergeCommit.outputs.MERGE_COMMIT_SHA }}

      - name: Cherry-pick the merge commit of target PR to new branch
        id: cherryPick
        run: |
          echo "Attempting to cherry-pick ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}"
          if git cherry-pick -S -x --mainline 1 ${{ steps.getCPMergeCommit.outputs.MERGE_COMMIT_SHA }}; then
            echo "üéâ No conflicts! CP was a success, PR can be automerged üéâ"
            echo "::set-output name=SHOULD_AUTOMERGE::true"
          else
            echo "üòû PR can't be automerged, there are merge conflicts in the following files:"
            git --no-pager diff --name-only --diff-filter=U
            git add .
            GIT_MERGE_AUTOEDIT=no git cherry-pick --continue
            echo "::set-output name=SHOULD_AUTOMERGE::false"
          fi

      - name: Push changes to CP branch
        run: git push

      - name: Create Pull Request
        id: createPullRequest
        # Version: 2.4.3
        uses: repo-sync/pull-request@65194d8015be7624d231796ddee1cd52a5023cb3
        with:
          source_branch: ${{ github.actor }}-cherry-pick-staging-${{ github.event.inputs.PULL_REQUEST_NUMBER }}
          destination_branch: staging
          github_token: ${{ secrets.OS_BOTIFY_TOKEN }}
          pr_title: 'üçí Cherry pick PR #${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üçí'
          pr_body: 'üçí Cherry pick https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üçí'
          pr_label: automerge

      - name: Check if pull request is mergeable
        id: isPullRequestMergeable
        uses: Expensify/App/.github/actions/isPullRequestMergeable@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ steps.createPullRequest.outputs.pr_number }}

      - name: Check if ShortVersionString is up to date
        id: isShortVersionStringUpdated
        uses: Expensify/App/.github/actions/checkBundleVersionStringMatch@main

      - name: Auto-assign PR if there are merge conflicts or if the bundle versions are mismatched
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) || !fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) || !fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}
        uses: actions-ecosystem/action-add-labels@a8ae047fee0ca28235f9764e1c478d2136dc15c1
        with:
          number: ${{ steps.createPullRequest.outputs.pr_number }}
          labels: |
            Engineering
            Hourly

      - name: Assign the PR to the deployer
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) || !fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        uses: actions-ecosystem/action-add-assignees@a73fcabd82d847c5e7433fcfdd58ef9f7e8a3993
        with:
          number: ${{ steps.createPullRequest.outputs.pr_number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          assignees: ${{ steps.getCPMergeCommit.outputs.MERGE_ACTOR }}

      - name: If PR has merge conflicts, comment with instructions for assignee
        if: ${{ !fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) || !fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        uses: actions-ecosystem/action-create-comment@cd098164398331c50e7dfdd0dfa1b564a1873fac
        with:
          github_token: ${{ secrets.OS_BOTIFY_TOKEN }}
          number: ${{ steps.createPullRequest.outputs.pr_number }}
          body: |
            This pull request has merge conflicts and can not be automatically merged. :disappointed:
            Please manually resolve the conflicts, push your changes, and then request another reviewer to review and merge.
            **Important:** There may be conflicts that GitHub is not able to detect, so please _carefully_ review this pull request before approving.

      - name: If PR has a bundle version mismatch, comment with the instructions for assignee
        if: ${{ !fromJSON(steps.isShortVersionStringUpdated.outputs.BUNDLE_VERSIONS_MATCH) }}
        uses: actions-ecosystem/action-create-comment@cd098164398331c50e7dfdd0dfa1b564a1873fac
        with:
          github_token: ${{ secrets.OS_BOTIFY_TOKEN }}
          number: ${{ steps.createPullRequest.outputs.pr_number }}
          body: |
            The CFBundleShortVersionString value in this PR is not compatible with the CFBundleVersion, so cherry picking it will result in an iOS deploy failure.
            Please manually resolve the mismatch, push your changes, and then request another reviewer to review and merge.
            **Important:** This mismatch can be caused by a failed Update Protected Branch workflow followed by a manual CP, but please confirm the cause of the mismatch before updating any version numbers.

      - name: Check for an auto approve
        # Important: only auto-approve if there was no merge conflict!
        if: ${{ fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) && fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        # Version: 2.0.0
        uses: hmarr/auto-approve-action@6a9ec7556f0a7fa5b49527a1eea4878b8a22d2e0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.createPullRequest.outputs.pr_number }}

      - name: Check for an auto merge
        # Important: only auto-merge if there was no merge conflict!
        if: ${{ fromJSON(steps.cherryPick.outputs.SHOULD_AUTOMERGE) && fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
        # Version: 0.12.0
        uses: pascalgn/automerge-action@39d831e1bb389bd242626bc25d4060064a97181c
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          PULL_REQUEST: ${{ steps.createPullRequest.outputs.pr_number }}

      # Create a local git tag on staging so that GitUtils.getPullRequestsMergedBetween can use `git log` to generate a
      # list of pull requests that were merged between this version tag and another.
      # NOTE: This tag is only used locally and shouldn't be pushed to the remote.
      # If it was pushed, that would trigger the staging deploy which is handled in a separate workflow (deploy.yml)
      - name: Tag staging
        if: ${{ github.actor != 'OSBotify' }}
        run: |
          git checkout staging
          git pull origin staging
          git tag ${{ env.NEW_VERSION }}

      # Note: we only run this action if the PR was manually CP'd. Otherwise, the deploy checklist is updated from preDeploy.yml
      - name: Update StagingDeployCash
        if: ${{ github.actor != 'OSBotify' }}
        uses: Expensify/App/.github/actions/createOrUpdateStagingDeploy@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          NPM_VERSION: ${{ env.NEW_VERSION }}

      - name: 'Announces a CP failure in the #announce Slack room'
        uses: 8398a7/action-slack@v3
        if: ${{ failure() }}
        with:
          status: custom
          custom_payload: |
            {
              channel: '#announce',
              attachments: [{
                color: "#DB4545",
                pretext: `<!subteam^S4TJJ3PSL>`,
                text: `üí• Failed to CP https://github.com/Expensify/App/pull/${{ github.event.inputs.PULL_REQUEST_NUMBER }} to staging üí•`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
