name: Create new version

on:
  workflow_dispatch:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: true
        default: BUILD
        type: string

  workflow_call:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: false
        default: BUILD
        type: string

    outputs:
      NEW_VERSION:
        description: The new version string
        value: ${{ jobs.createNewVersion.outputs.NEW_VERSION }}

    secrets:
      SLACK_WEBHOOK:
        description: Webhook used to comment in slack
        required: true
      OS_BOTIFY_COMMIT_TOKEN:
        description: OSBotify personal access token, used to workaround committing to protected branch
        required: true
      OP_SERVICE_ACCOUNT_TOKEN:
        description: 1Password service account token
        required: true
      OS_BOTIFY_APP_ID:
        description: App ID for OSBotify GitHub App
        required: true
      OS_BOTIFY_PRIVATE_KEY:
        description: Private key for OSBotify GitHub App
        required: true

jobs:
  createNewVersion:
    runs-on: macos-latest
    outputs:
      NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
    steps:
      - name: Run turnstyle
        uses: softprops/turnstyle@49108bdfa571e62371bd2c3094893c547ab3fc03
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check out
        # v4
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          ref: main
          submodules: true
          # The OS_BOTIFY_COMMIT_TOKEN is a personal access token tied to osbotify
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

      - name: Validate actor
        uses: ./.github/actions/composite/validateActor
        with:
          OS_BOTIFY_TOKEN: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

      - name: Setup git for OSBotify
        uses: Expensify/GitHub-Actions/setupGitForOSBotify@main
        id: setupGitForOSBotify
        with:
          OP_VAULT: ${{ vars.OP_VAULT }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          SETUP_AS_APP: false

      - name: Generate new E/App version (including Mobile-Expensify version bump)
        id: bumpVersion
        uses: ./.github/actions/javascript/bumpVersion
        with:
          SEMVER_LEVEL: ${{ inputs.SEMVER_LEVEL }}

      - name: Commit new Mobile-Expensify version
        working-directory: Mobile-Expensify
        run: |
          # Checkout main branch in Mobile-Expensify submodule.
          # This is IMPORTANT so that when we make changes, we aren't in a detached head state, and when we later push those changes to main, it works!
          git checkout main
          git add \
            ./Android/AndroidManifest.xml \
            ./app/config/config.json \
            ./iOS/Expensify/Expensify-Info.plist\
            ./iOS/SmartScanExtension/Info.plist \
            ./iOS/NotificationServiceExtension/Info.plist
          git commit -m "Update version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"
          if ! git push origin main; then
            echo "Race condition! Mobile-Expensify main was updated while this workflow was running, so push failed. Fetching remote, rebasing, and retrying push once."
            git fetch origin main
            if ! git rebase origin/main; then
              echo "::error:: Rebase failed while retrying Mobile-Expensify push"
              exit 1
            fi
            if ! git push origin main; then
              echo "::error:: Mobile-Expensify change failed to push after rebase"
              exit 1
            fi
          fi

      - name: Commit new E/App version
        run: |
          git add \
            ./package.json \
            ./package-lock.json \
            ./android/app/build.gradle \
            ./ios/NewExpensify/Info.plist \
            ./ios/NotificationServiceExtension/Info.plist \
            ./ios/ShareViewController/Info.plist
          git commit -m "Update version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"

      - name: Update Mobile-Expensify submodule in E/App
        run: |
          git add Mobile-Expensify
          git commit -m "Update Mobile-Expensify submodule version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"
          if ! git push origin main; then
            echo "Race condition! E/App main was updated while this workflow was running, so push failed. Fetching remote, rebasing, and retrying push once."
            git fetch origin main
            if ! git rebase origin/main; then
              echo "::error:: Rebase failed while retrying Mobile-Expensify push"
              exit 1
            fi
            if ! git push origin main; then
              echo "::error:: Mobile-Expensify change failed to push after rebase"
              exit 1
            fi
          fi

      - name: Announce failed workflow in Slack
        if: ${{ failure() }}
        uses: ./.github/actions/composite/announceFailedWorkflowInSlack
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
