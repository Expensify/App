name: Create new version

on:
  workflow_call:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: false
        default: BUILD
        type: string

    outputs:
      NEW_VERSION:
        description: The new version string
        value: ${{ jobs.createNewVersion.outputs.NEW_VERSION }}

    secrets:
      LARGE_SECRET_PASSPHRASE:
        description: Passphrase used to decrypt GPG key
        required: true
      OS_BOTIFY_TOKEN:
        description: Token for the OSBotify user
        required: true
      SLACK_WEBHOOK:
        description: Webhook used to comment in slack
        required: true

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      HAS_WRITE_ACCESS: ${{ contains(fromJSON('["write", "admin"]'), steps.getUserPermissions.outputs.PERMISSION) }}
    steps:
      - name: Get user permissions
        id: getUserPermissions
        run: echo "PERMISSION=$(gh api /repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission | jq -r '.permission')" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

  createNewVersion:
    runs-on: macos-latest
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.HAS_WRITE_ACCESS) }}

    outputs:
      NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}

    steps:
      # Version: 3.0.2
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          fetch-depth: 0

      - uses: Expensify/App/.github/actions/composite/setupGitForOSBotify@main
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - uses: softprops/turnstyle@ca99add00ff0c9cbc697d22631d2992f377e5bd5
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create new branch
        run: |
          git pull
          BRANCH_NAME="version-${{ inputs.SEMVER_LEVEL }}-$(uuidgen)"
          git checkout -b "$BRANCH_NAME"
          git push --set-upstream origin "$BRANCH_NAME"
          echo "VERSION_BRANCH=$BRANCH_NAME" >> "$GITHUB_ENV"

      - name: Generate version
        id: bumpVersion
        uses: Expensify/App/.github/actions/javascript/bumpVersion@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          SEMVER_LEVEL: ${{ inputs.SEMVER_LEVEL }}

      - name: Commit new version
        run: |
          git add \
            ./package.json \
            ./package-lock.json \
            ./android/app/build.gradle \
            ./ios/NewExpensify/Info.plist \
            ./ios/NewExpensifyTests/Info.plist
          git commit -m "Update version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"
          git push origin ${{ env.VERSION_BRANCH }}

      - name: Update main branch
        uses: Expensify/App/.github/actions/composite/updateProtectedBranch@main
        with:
          TARGET_BRANCH: main
          SOURCE_BRANCH: ${{ env.VERSION_BRANCH }}
          OS_BOTIFY_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - if: ${{ failure() }}
        uses: Expensify/App/.github/actions/composite/announceFailedWorkflowInSlack@main
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
