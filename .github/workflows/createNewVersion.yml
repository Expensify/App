name: Create new version

on:
  workflow_dispatch:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: true
        default: BUILD
        type: string

  workflow_call:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: false
        default: BUILD
        type: string

    outputs:
      NEW_VERSION:
        description: The new version string
        value: ${{ jobs.createNewVersion.outputs.NEW_VERSION }}

    secrets:
      LARGE_SECRET_PASSPHRASE:
        description: Passphrase used to decrypt GPG key
        required: true
      SLACK_WEBHOOK:
        description: Webhook used to comment in slack
        required: true
      OS_BOTIFY_COMMIT_TOKEN:
        description: OSBotify personal access token, used to workaround committing to protected branch
        required: true

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      HAS_WRITE_ACCESS: ${{ contains(fromJSON('["write", "admin"]'), steps.getUserPermissions.outputs.PERMISSION) }}
    steps:
      - name: Get user permissions
        id: getUserPermissions
        run: echo "PERMISSION=$(gh api /repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission | jq -r '.permission')" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

  createNewVersion:
    runs-on: macos-latest
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.HAS_WRITE_ACCESS) }}

    outputs:
      NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}

    steps:
      - name: Run turnstyle
        uses: softprops/turnstyle@49108bdfa571e62371bd2c3094893c547ab3fc03
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: main
          # The OS_BOTIFY_COMMIT_TOKEN is a personal access token tied to osbotify
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

      - name: Setup git for OSBotify
        uses: ./.github/actions/composite/setupGitForOSBotify
        id: setupGitForOSBotify
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Generate version
        id: bumpVersion
        uses: ./.github/actions/javascript/bumpVersion
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}
          SEMVER_LEVEL: ${{ inputs.SEMVER_LEVEL }}

      - name: Commit new version
        run: |
          git add \
            ./package.json \
            ./package-lock.json \
            ./android/app/build.gradle \
            ./ios/NewExpensify/Info.plist \
            ./ios/NewExpensifyTests/Info.plist \
            ./ios/NotificationServiceExtension/Info.plist
          git commit -m "Update version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"

      - name: Update main branch
        run: git push origin main

      - name: Announce failed workflow in Slack
        if: ${{ failure() }}
        uses: ./.github/actions/composite/announceFailedWorkflowInSlack
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  createNewHybridVersion:
    runs-on: macos-latest
    needs: [validateActor, createNewVersion]
    if: ${{ fromJSON(needs.validateActor.outputs.HAS_WRITE_ACCESS) }}
    defaults:
      run:
        working-directory: Mobile-Expensify
    steps:
      - name: Run turnstyle
        uses: softprops/turnstyle@49108bdfa571e62371bd2c3094893c547ab3fc03
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check out `App` repo
        uses: actions/checkout@v4
        with:
          ref: main
          # The OS_BOTIFY_COMMIT_TOKEN is a personal access token tied to osbotify
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

      - name: Check out `Mobile-Expensify` repo
        uses: actions/checkout@v4
        with:
          repository: 'Expensify/Mobile-Expensify'
          submodules: true
          path: 'Mobile-Expensify'
          token: ${{ secrets.OS_BOTIFY_COMMIT_TOKEN }}

      - name: Update submodule
        run: |
          cd react-native
          git submodule update --init

      - name: Setup git for OSBotify
        uses: ./.github/actions/composite/setupGitForOSBotify
        id: setupGitForOSBotify
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Generate HybridApp version
        run: |
          # Generate all flavors of the version
          SHORT_APP_VERSION=$(echo "$NEW_VERSION" | awk -F'-' '{print $1}')
          BUILD_NUMBER=$(echo "$NEW_VERSION" | awk -F'-' '{print $2}')
          FULL_APP_VERSION="$SHORT_APP_VERSION.$BUILD_NUMBER"
          ANDROID_VERSION_CODE=$(echo "$FULL_APP_VERSION" | ruby -e "puts '05%02d%02d%02d%02d' % STDIN.read.split('.')")
          
          # File paths to update
          ANDROID_MANIFEST_FILE="Android/AndroidManifest.xml"
          IOS_INFO_PLIST_FILE="iOS/Expensify/Expensify-Info.plist"
          IOS_SHARE_EXTENSION_PLIST_FILE="iOS/SmartScanExtension/Info.plist"
          IOS_NOTIFICATION_EXTENSION_PLIST_FILE="iOS/NotificationServiceExtension/Info.plist"
          JS_CONFIG_FILE="app/config/config.json" 
          
          # Update Android HybridApp Version
          sed -i .bak -E  "s/versionName=\"([0-9\.]*)\"/versionName=\"$FULL_APP_VERSION\"/" $ANDROID_MANIFEST_FILE
          sed -i .bak -E "s/versionCode=\"([0-9]*)\"/versionCode=\"$ANDROID_VERSION_CODE\"/" $ANDROID_MANIFEST_FILE
          
          # Update iOS HybridApp Version
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $SHORT_APP_VERSION" $IOS_INFO_PLIST_FILE
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $FULL_APP_VERSION" $IOS_INFO_PLIST_FILE
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $SHORT_APP_VERSION" $IOS_SHARE_EXTENSION_PLIST_FILE
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $FULL_APP_VERSION" $IOS_SHARE_EXTENSION_PLIST_FILE
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $SHORT_APP_VERSION" $IOS_NOTIFICATION_EXTENSION_PLIST_FILE
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $FULL_APP_VERSION" $IOS_NOTIFICATION_EXTENSION_PLIST_FILE
          
          # Update JS HybridApp Version
          sed -i .bak -E  "s/\"version\": \"([0-9\.]*)\"/\"version\": \"$FULL_APP_VERSION\"/" $JS_CONFIG_FILE
        env:
          NEW_VERSION: ${{ needs.createNewVersion.outputs.NEW_VERSION }}

      - name: Commit new version
        run: |
          git add \
            ./Android/AndroidManifest.xml \
            ./app/config/config.json \
            ./iOS/Expensify/Expensify-Info.plist\
            ./iOS/SmartScanExtension/Info.plist \
            ./iOS/NotificationServiceExtension/Info.plist
          git commit -m "Update version to ${{ needs.createNewVersion.outputs.NEW_VERSION }}"

      - name: Update main branch
        run: git push origin main

      - name: Announce failed workflow in Slack
        if: ${{ failure() }}
        uses: ./.github/actions/composite/announceFailedWorkflowInSlack
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
