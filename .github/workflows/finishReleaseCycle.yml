name: Prepare production deploy

on:
  issues:
    types: [closed]

# The updateProduction and createNewStagingDeployCash jobs are executed when a StagingDeployCash is closed.
jobs:
  validate:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'StagingDeployCash')

    outputs:
      isValid: ${{ fromJSON(steps.validateActor.outputs.isTeamMember) && !fromJSON(steps.checkDeployBlockers.outputs.HAS_DEPLOY_BLOCKERS) }}

    steps:
      - name: Validate actor is deployer
        id: validateActor
        uses: tspascoal/get-user-teams-membership@baf2e6adf4c3b897bd65a7e3184305c165aec872
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          username: ${{ github.actor }}
          team: mobile-deployers

      - name: Reopen and comment on issue
        if: ${{ !fromJSON(steps.validateActor.outputs.isTeamMember) }}
        uses: Expensify/App/.github/actions/javascript/reopenIssueWithComment@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT: |
            Sorry, only members of @Expensify/Mobile-Deployers can close deploy checklists.
            Reopening!

      - name: Check for any deploy blockers
        if: ${{ fromJSON(steps.validateActor.outputs.isTeamMember) }}
        id: checkDeployBlockers
        uses: Expensify/App/.github/actions/javascript/checkDeployBlockers@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Reopen and comment on issue
        if: ${{ fromJSON(steps.validateActor.outputs.isTeamMember) && fromJSON(steps.checkDeployBlockers.outputs.HAS_DEPLOY_BLOCKERS) }}
        uses: Expensify/App/.github/actions/javascript/reopenIssueWithComment@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT: |
            This issue either has unchecked items or has not yet been marked with the `:shipit:` emoji of approval.
            Reopening!

  # Update the production branch to trigger the production deploy.
  updateProduction:
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ fromJSON(needs.validate.outputs.isValid) }}
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: main
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Update production branch
        uses: Expensify/App/.github/actions/composite/updateProtectedBranch@main
        with:
          TARGET_BRANCH: production
          OS_BOTIFY_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

  # Deploy deferred PRs to staging and create a new StagingDeployCash for the next release cycle.
  createNewStagingDeployCash:
    runs-on: macos-11
    needs: validate
    if: ${{ fromJSON(needs.validate.outputs.isValid) }}
    steps:
      # Version: 2.3.4
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - uses: softprops/turnstyle@8db075d65b19bf94e6e8687b504db69938dc3c65
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new PATCH version
        uses: Expensify/App/.github/actions/javascript/triggerWorkflowAndWait@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          WORKFLOW: createNewVersion.yml
          INPUTS: '{ "SEMVER_LEVEL": "PATCH" }'

      - name: Update staging branch to trigger staging deploy
        uses: Expensify/App/.github/actions/composite/updateProtectedBranch@main
        with:
          TARGET_BRANCH: staging
          OS_BOTIFY_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Pull staging to get the new version
        run: |
          git checkout staging
          git pull origin staging
          echo "NEW_VERSION=$(npm run print-version --silent)" >> "$GITHUB_ENV"
          echo "New version is ${{ env.NEW_VERSION }}"

        # Create a local git tag so that GitUtils.getPullRequestsMergedBetween can use `git log` to generate a
        # list of pull requests that were merged between this version tag and another.
        # NOTE: This tag is only used locally and shouldn't be pushed to the remote.
        # If it was pushed, that would trigger the staging deploy which is handled in a separate workflow (deploy.yml)
      - name: Tag version
        run: git tag ${{ env.NEW_VERSION }}

      - name: Create new StagingDeployCash
        uses: Expensify/App/.github/actions/javascript/createOrUpdateStagingDeploy@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          NPM_VERSION: ${{ env.NEW_VERSION }}

      - if: ${{ failure() }}
        uses: Expensify/App/.github/actions/composite/announceFailedWorkflowInSlack@main
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
