name: Process new code merged to main

on:
  push:
    branches: [main]

jobs:
  chooseDeployActions:
    runs-on: ubuntu-latest
    outputs:
      mergedPullRequest: ${{ steps.getMergedPullRequest.outputs.number }}
      isStagingDeployLocked: ${{ steps.isStagingDeployLocked.outputs.IS_LOCKED }}
      isAutomatedPullRequest: ${{ steps.isAutomatedPullRequest.outputs.IS_VERSION_BUMP_PR }}
      shouldCherryPick: ${{ steps.shouldCherryPick.outputs.SHOULD_CHERRY_PICK }}

    steps:
      # Version: 2.3.4
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          fetch-depth: 0
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Get merged pull request
        id: getMergedPullRequest
        uses: actions-ecosystem/action-get-merged-pull-request@59afe90821bb0b555082ce8ff1e36b03f91553d9
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if StagingDeployCash is locked
        id: isStagingDeployLocked
        uses: Expensify/App/.github/actions/isStagingDeployLocked@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Check if merged pull request was an automatic version bump PR
        id: isAutomatedPullRequest
        run: echo "::set-output name=IS_VERSION_BUMP_PR::${{ github.actor == 'OSBotify' }}"

      - name: Check if merged pull request has `CP Staging` label
        id: shouldCherryPick
        run: echo "::set-output name=SHOULD_CHERRY_PICK::${{ contains(steps.getMergedPullRequest.outputs.labels, 'CP Staging') }}"

  skipDeploy:
    runs-on: ubuntu-latest
    needs: chooseDeployActions
    if: ${{ fromJSON(needs.chooseDeployActions.outputs.isStagingDeployLocked) && !fromJSON(needs.chooseDeployActions.outputs.isAutomatedPullRequest) && !fromJSON(needs.chooseDeployActions.outputs.shouldCherryPick) }}

    steps:
      - name: Comment on deferred PR
        uses: actions-ecosystem/action-create-comment@cd098164398331c50e7dfdd0dfa1b564a1873fac
        with:
          github_token: ${{ secrets.OS_BOTIFY_TOKEN }}
          number: ${{ needs.chooseDeployActions.outputs.mergedPullRequest }}
          body: |
            :hand: This PR was not deployed to staging yet because QA is ongoing. It will be automatically deployed to staging after the next production release.

  version:
    runs-on: ubuntu-latest
    needs: chooseDeployActions
    if: ${{ fromJSON(needs.chooseDeployActions.outputs.shouldCherryPick) || (!fromJSON(needs.chooseDeployActions.outputs.isStagingDeployLocked) && !fromJSON(needs.chooseDeployActions.outputs.isAutomatedPullRequest)) }}

    steps:
      # Version: 2.3.4
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          fetch-depth: 0
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - uses: softprops/turnstyle@8db075d65b19bf94e6e8687b504db69938dc3c65
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new BUILD version
        uses: Expensify/App/.github/actions/triggerWorkflowAndWait@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          WORKFLOW: createNewVersion.yml
          INPUTS: '{ "SEMVER_LEVEL": "BUILD" }'

      - name: Pull main to get the new version
        run: |
          git pull origin main
          echo "NEW_VERSION=$(npm run print-version --silent)" >> $GITHUB_ENV
          echo "New version is ${{ env.NEW_VERSION }}"

      - name: Update staging branch from main
        if: ${{ !fromJSON(needs.chooseDeployActions.outputs.isStagingDeployLocked) }}
        uses: Expensify/App/.github/actions/triggerWorkflowAndWait@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          WORKFLOW: updateProtectedBranch.yml
          INPUTS: '{ "TARGET_BRANCH": "staging" }'

      - name: Cherry pick to staging
        if: ${{ fromJSON(needs.chooseDeployActions.outputs.isStagingDeployLocked) && fromJSON(needs.chooseDeployActions.outputs.shouldCherryPick) }}
        uses: Expensify/App/.github/actions/triggerWorkflowAndWait@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          WORKFLOW: cherryPick.yml
          INPUTS: '{ "PULL_REQUEST_NUMBER": "${{ needs.chooseDeployActions.outputs.mergedPullRequest }}", "NEW_VERSION": "${{ env.NEW_VERSION }}" }'

      # Create a local git tag on staging so that GitUtils.getPullRequestsMergedBetween can use `git log` to generate a
      # list of pull requests that were merged between this version tag and another.
      # NOTE: This tag is only used locally and shouldn't be pushed to the remote.
      # If it was pushed, that would trigger the staging deploy which is handled in a separate workflow (deploy.yml)
      - name: Tag staging
        run: |
          git checkout staging
          git pull origin staging
          git tag ${{ env.NEW_VERSION }}

      - name: Update StagingDeployCash
        uses: Expensify/App/.github/actions/createOrUpdateStagingDeploy@main
        with:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
          NPM_VERSION: ${{ env.NEW_VERSION }}

      # This Slack step is duplicated in all workflows, if you make a change to this step, make sure to update all
      # the other workflows with the same change
      - uses: 8398a7/action-slack@v3
        name: Job failed Slack notification
        if: ${{ failure() }}
        with:
          status: custom
          fields: workflow, repo
          custom_payload: |
            {
              channel: '#announce',
              attachments: [{
                color: "#DB4545",
                pretext: `<!subteam^S4TJJ3PSL>`,
                text: `ðŸ’¥ ${process.env.AS_REPO} failed on ${process.env.AS_WORKFLOW} workflow ðŸ’¥`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  newContributorWelcomeMessage:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'OSBotify' }}
    steps:
      # Version: 2.3.4
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Get merged pull request
        id: getMergedPullRequest
        # TODO: Point back action actions-ecosystem after https://github.com/actions-ecosystem/action-get-merged-pull-request/pull/223 is merged
        uses: roryabraham/action-get-merged-pull-request@7a7a194f6ff8f3eef58c822083695a97314ebec1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR count for ${{ steps.getMergedPullRequest.outputs.author }}
        run: echo "PR_COUNT=$(gh pr list --author ${{ steps.getMergedPullRequest.outputs.author }} --state any | grep -c '')" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on ${{ steps.getMergedPullRequest.outputs.author }}\'s first pull request!
        if: ${{ fromJSON(env.PR_COUNT) == 1 }}
        uses: actions-ecosystem/action-create-comment@cd098164398331c50e7dfdd0dfa1b564a1873fac
        with:
          github_token: ${{ secrets.OS_BOTIFY_TOKEN }}
          number: ${{ steps.getMergedPullRequest.outputs.number }}
          body: |
            @${{ steps.getMergedPullRequest.outputs.author }}, Great job getting your first Expensify/App pull request over the finish line! :tada:
            
            I know there's a lot of information in our [contributing guidelines](https://github.com/Expensify/App/blob/main/CONTRIBUTING.md), so here are some points to take note of :memo::

            1. Now that your first PR has been merged, you can be hired for another issue. Once you've completed a few issues, you may be eligible to work on more than one job at a time. 
            2. Once your PR is deployed to our staging servers, it will undergo quality assurance (QA) testing. If we find that it doesn't work as expected or causes a regression, you'll be responsible for fixing it. Typically, we would revert this PR and give you another chance to create a similar PR without causing a regression.
            3. Once your PR is deployed to _production_, we start a 7-day timer :alarm_clock:. After it has been on production for 7 days without causing any regressions, then we pay out the Upwork job. :moneybag:

            So it might take a while before you're paid for your work, but we typically post multiple new jobs every day, so there's plenty of opportunity. I hope you've had a positive experience contributing to this repo! :blush:
