name: Build and profile Android apps

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: Pull request number to build the app from
        required: false
        default: ''
      OLD_DOT_PULL_REQUEST_NUMBER:
        description: Old Dot Pull request number to build the app from
        required: false
        default: ''

jobs:
  getBranchRef:
    runs-on: ubuntu-latest
    outputs:
      REF: ${{ steps.getHeadRef.outputs.REF }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get NewDot PR commit SHA
        id: getHeadRef
        run: |
          set -e
          if [[ -z "${{ github.event.inputs.PULL_REQUEST_NUMBER }}" ]]; then
            echo "REF=" >> "$GITHUB_OUTPUT"
          else
            echo "REF=$(gh pr view ${{ github.event.inputs.PULL_REQUEST_NUMBER }} --json headRefOid --jq '.headRefOid')" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  getOldDotBranchRef:
    runs-on: ubuntu-latest
    outputs:
      OLD_DOT_REF: ${{ steps.getHeadRef.outputs.REF }}
    steps:
      - name: Get OD PR commit SHA
        id: getHeadRef
        run: |
          set -e
          if [[ -z "${{ github.event.inputs.OLD_DOT_PULL_REQUEST_NUMBER }}" ]]; then
            echo "REF=" >> "$GITHUB_OUTPUT"
          else
            echo "REF=$(gh pr view ${{ github.event.inputs.OLD_DOT_PULL_REQUEST_NUMBER }} -R Expensify/Mobile-Expensify --json headRefOid --jq '.headRefOid')" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.OS_BOTIFY_TOKEN }}
  
  
  postGitHubCommentBuildStarted:
    runs-on: ubuntu-latest
    needs: [getBranchRef, getOldDotBranchRef]
    steps:
      - name: Add comment to ND PR 
        if: ${{ github.event.inputs.PULL_REQUEST_NUMBER != ''}}
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const workflowURL = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.PULL_REQUEST_NUMBER }},
              body: `ðŸš§ @${{ github.actor }} has triggered build profiling. You can view the [workflow run here](${workflowURL}).`
            });  
      
      - name: Add comment to OD PR 
        if: ${{ github.event.inputs.OLD_DOT_PULL_REQUEST_NUMBER != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.OS_BOTIFY_TOKEN }}
          script: |
            const workflowURL = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: 'Mobile-Expensify',
              issue_number: ${{ github.event.inputs.OLD_DOT_PULL_REQUEST_NUMBER }},
              body: `ðŸš§ @${{ github.actor }} has triggered build profiling. You can view the [workflow run here](${workflowURL}).`
            });
       
  buildHybridAppAndroid:
    name: Build HybridApp Android
    needs: [getBranchRef, getOldDotBranchRef]
    runs-on: ubuntu-latest-xl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ needs.getBranchRef.outputs.REF || 'main' }}
          token: ${{ secrets.OS_BOTIFY_TOKEN }}
          fetch-depth: 0

      - name: Update submodule to match main
        run: |
          git submodule update --init --remote
      
      - name: Checkout OldDot if PR specified
        if: ${{ needs.getOldDotBranchRef.outputs.OLD_DOT_REF != '' }}
        run: |
          cd Mobile-Expensify
          git fetch origin ${{ needs.getOldDotBranchRef.outputs.OLD_DOT_REF }}
          git checkout ${{ needs.getOldDotBranchRef.outputs.OLD_DOT_REF }}
                

      - name: Configure MapBox SDK
        run: ./scripts/setup-mapbox-sdk.sh ${{ secrets.MAPBOX_SDK_DOWNLOAD_TOKEN }}

      - name: Setup Node
        id: setup-node
        uses: ./.github/actions/composite/setupNode
        with:
          IS_HYBRID_BUILD: 'true'

      - name: Run grunt build
        run: |
          cd Mobile-Expensify
          npm run grunt:build:shared

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.190.0
        with:
          bundler-cache: true

      - name: Install New Expensify Gems
        run: bundle install

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Load files from 1Password
        working-directory: android/app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          op read "op://${{ vars.OP_VAULT }}/android-fastlane-json-key.json/android-fastlane-json-key.json" --force --out-file ./android-fastlane-json-key.json
          op read "op://${{ vars.OP_VAULT }}/upload-key.keystore/upload-key.keystore" --force --out-file ./upload-key.keystore
          
          # Copy the keystore to the Android directory for Fullstory
          cp ./upload-key.keystore Mobile-Expensify/Android 

      - name: Load Android upload keystore credentials from 1Password
        id: load-credentials
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          ANDROID_UPLOAD_KEYSTORE_PASSWORD: op://${{ vars.OP_VAULT }}/Repository-Secrets/ANDROID_UPLOAD_KEYSTORE_PASSWORD
          ANDROID_UPLOAD_KEYSTORE_ALIAS: op://${{ vars.OP_VAULT }}/Repository-Secrets/ANDROID_UPLOAD_KEYSTORE_ALIAS
          ANDROID_UPLOAD_KEY_PASSWORD: op://${{ vars.OP_VAULT }}/Repository-Secrets/ANDROID_UPLOAD_KEY_PASSWORD

      - name: Build Android Release
        working-directory: Mobile-Expensify/Android
        run: |
          ./gradlew --profile assembleRelease \
            -Pandroid.injected.signing.store.file="./upload-key.keystore" \
            -Pandroid.injected.signing.store.password=${{ steps.load-credentials.outputs.ANDROID_UPLOAD_KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ steps.load-credentials.outputs.ANDROID_UPLOAD_KEYSTORE_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ steps.load-credentials.outputs.ANDROID_UPLOAD_KEY_PASSWORD }}
          
          echo "Printing Gradle profile report:"
          # Print the latest generated profile report
          PROFILE_REPORT=$(find build/reports/profile -maxdepth 1 -type f)
          cat "$PROFILE_REPORT"

  buildStandaloneAndroid:
    name: Build Standalone Android
    needs: [getBranchRef]
    runs-on: ubuntu-latest-xl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.OS_BOTIFY_TOKEN }}
          ref: ${{ needs.getBranchRef.outputs.REF || 'main' }}

      - name: Configure MapBox SDK
        run: ./scripts/setup-mapbox-sdk.sh ${{ secrets.MAPBOX_SDK_DOWNLOAD_TOKEN }}

      - name: Setup Node
        id: setup-node
        uses: ./.github/actions/composite/setupNode
        with:
          IS_HYBRID_BUILD: 'false'
     
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Load files from 1Password
        working-directory: android/app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: op read "op://${{ vars.OP_VAULT }}/New Expensify my-upload-key.keystore/my-upload-key.keystore" --force --out-file ./my-upload-key.keystore

      - name: Build Android Release
        working-directory: android
        env:
          MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}
        run: |
          ./gradlew --profile assembleProductionRelease

          echo "Printing Gradle profile report:"
          # Print the latest generated profile report
          PROFILE_REPORT=$(find build/reports/profile -maxdepth 1 -type f)
          cat "$PROFILE_REPORT"
