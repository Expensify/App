name: Update Protected Branch
description: Create, approve, and merge a pull request against a protected branch

inputs:
  TARGET_BRANCH:
    description: The target branch to update. This becomes the base branch of the pull request.
    required: true
  SOURCE_BRANCH:
    description: If updating main, you must also provide a head branch to update main with.
    required: false
    default: ''
  PR_TITLE:
    description: Optional title for the PR used to update the protected branch
    required: false
  PR_BODY:
    description: Optional body for the PR used to update the protected branch
    required: false
  OS_BOTIFY_TOKEN:
    description: GitHub token for OSBotify
    required: true
  GPG_PASSPHRASE:
    description: Passphrase used to decrypt GPG key for OSBotify
    required: true

runs:
  using: composite
  steps:
    - name: Validate target branch
      if: ${{ !contains(fromJSON('["main", "staging", "production", "gh-pages"]'), inputs.TARGET_BRANCH) }}
      shell: bash
      run: |
        echo "Target branch must be one of ['main', 'staging', 'production', 'gh-pages']"
        exit 1

    # If updating main, SOURCE_BRANCH must not be empty
    - name: Validate source branch
      if: inputs.TARGET_BRANCH == 'main' && inputs.SOURCE_BRANCH == ''
      shell: bash
      run: |
        echo "Cannot update main branch without specifying a source branch"
        exit 1

    # If updating staging or gh-pages, the source branch will always be main
    # If updating production, the source branch will always be staging
    - name: Set source branch
      shell: bash
      run: |
        if [[ ${{ inputs.TARGET_BRANCH }} == 'staging' || ${{ inputs.TARGET_BRANCH }} == 'gh-pages' ]]; then
          echo "SOURCE_BRANCH=main" >> "$GITHUB_ENV"
        elif [[ ${{ inputs.TARGET_BRANCH }} == 'production' ]]; then
          echo "SOURCE_BRANCH=staging" >> "$GITHUB_ENV"
        else
          echo "SOURCE_BRANCH=${{ inputs.SOURCE_BRANCH }}" >> "$GITHUB_ENV"
        fi

    - uses: Expensify/App/.github/actions/composite/setupGitForOSBotify@main
      with:
        GPG_PASSPHRASE: ${{ inputs.GPG_PASSPHRASE }}

    - name: Checkout source branch
      shell: bash
      run: git checkout ${{ env.SOURCE_BRANCH }}

    - name: Create temporary branch to resolve conflicts
      if: ${{ inputs.TARGET_BRANCH != 'main' }}
      shell: bash
      run: |
        git checkout ${{ inputs.TARGET_BRANCH }}
        BRANCH_NAME=update-${{ inputs.TARGET_BRANCH }}-from-${{ env.SOURCE_BRANCH }}
        git checkout -b "$BRANCH_NAME"
        git merge -Xtheirs ${{ env.SOURCE_BRANCH }}
        git push --set-upstream origin "$BRANCH_NAME"

    - name: Overwrite root directory with static site
      if: ${{ inputs.TARGET_BRANCH == 'gh-pages' }}
      shell: bash
      run: |
        cd Expensify/App
        find . -delete -mindepth 1 -not -regex "^\.\/(\.git|help/_site)(\/.*)?" -regextype posix-extended
        mv -v help/_site/* .  
        rm -rf help/_site
        touch ./.nojekyll
        git add -A
        git commit -m "Overwrite root directory with static site"

    - name: Create Pull Request
      id: createPullRequest
      shell: bash
      run: |
        PR_TITLE="${{ inputs.PR_TITLE }}"
        PR_BODY="${{ inputs.PR_BODY }}"

        if [[ -z "$PR_TITLE" || -z "$PR_BODY" ]]; then
          NEW_VERSION="$(npm run print-version --silent)"
          PR_TITLE="Update version to $NEW_VERSION on ${{ inputs.TARGET_BRANCH }}"
          PR_BODY="Update version to $NEW_VERSION"
        fi

        gh pr create \
          --title "$PR_TITLE" \
          --body "$PR_BODY" \
          --label "automerge" \
          --base ${{ inputs.TARGET_BRANCH }}
        sleep 5
        echo "::set-output name=PR_NUMBER::$(gh pr view --json 'number' --jq '.number')"
      env:
        GITHUB_TOKEN: ${{ inputs.OS_BOTIFY_TOKEN }}

    - name: Check changed files
      if: ${{ inputs.TARGET_BRANCH == 'main' }}
      id: changedFiles
      # Version: 3.3.0
      uses: umani/changed-files@1d252c611c64289d35243fc37ece7323ea5e93e1
      with:
        repo-token: ${{ github.token }}
        pr-number: ${{ steps.createPullRequest.outputs.PR_NUMBER }}

    - name: Validate changed files
      if: ${{ inputs.TARGET_BRANCH == 'main' && (steps.changedFiles.outputs.files_updated != 'android/app/build.gradle ios/NewExpensify/Info.plist ios/NewExpensifyTests/Info.plist package-lock.json package.json' || steps.changedFiles.outputs.files_created != '' || steps.changedFiles.outputs.files_deleted != '') }}
      shell: bash
      run: exit 1

    - name: Auto-approve the PR
      shell: bash
      run: gh pr review --approve
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Check if pull request is mergeable
      id: isPullRequestMergeable
      uses: Expensify/App/.github/actions/javascript/isPullRequestMergeable@main
      with:
        GITHUB_TOKEN: ${{ github.token }}
        PULL_REQUEST_NUMBER: ${{ steps.createPullRequest.outputs.PR_NUMBER }}

    - name: Leave comment if PR is not mergeable
      if: ${{ !fromJSON(steps.isPullRequestMergeable.outputs.IS_MERGEABLE) }}
      shell: bash
      run: |
        gh pr comment --body \
        ":bell: @Expensify/mobile-deployers :bell: - The Update Protected Branch workflow has failed because this PR was not mergable.
          If you are the deployer this week, please resolve the error and merge this PR to continue the deploy process."
      env:
        GITHUB_TOKEN: ${{ inputs.OS_BOTIFY_TOKEN }}

    - name: Fail workflow if PR is not mergeable
      if: ${{ steps.isPullRequestMergeable.outputs.IS_MERGEABLE == 'false' }}
      shell: bash
      run: exit 1

    - name: Auto-merge the PR
      shell: bash
      run: gh pr merge ${{ steps.createPullRequest.outputs.PR_NUMBER }} --merge --delete-branch
      env:
        GITHUB_TOKEN: ${{ inputs.OS_BOTIFY_TOKEN }}
